/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var e={1983:(e,t,n)=>{"use strict";n(6266),n(990),n(911),n(4160),n(6197),n(6728),n(4039),n(3568),n(8051),n(8250),n(5434),n(4952),n(6337),n(5666)},6266:(e,t,n)=>{n(5767),n(8132),n(8388),n(7470),n(4882),n(1520),n(7476),n(9622),n(9375),n(3533),n(4672),n(4157),n(5095),n(9892),n(5115),n(9176),n(8838),n(6253),n(9730),n(6059),n(8377),n(1084),n(4299),n(1246),n(726),n(1901),n(5972),n(3403),n(2516),n(9371),n(6479),n(1736),n(1889),n(5177),n(6943),n(6503),n(6786),n(932),n(7526),n(1591),n(9073),n(347),n(579),n(4669),n(7710),n(5789),n(3514),n(9978),n(8472),n(6946),n(5068),n(413),n(191),n(8306),n(4564),n(9115),n(9539),n(6620),n(2850),n(823),n(7732),n(856),n(703),n(1539),n(5292),n(6629),n(3694),n(7648),n(7795),n(4531),n(3605),n(6780),n(9937),n(511),n(1822),n(9977),n(1031),n(6331),n(1560),n(774),n(522),n(8295),n(7842),n(110),n(75),n(4336),n(1802),n(8837),n(6773),n(5745),n(3057),n(3750),n(3369),n(9564),n(2e3),n(8977),n(2310),n(4899),n(1842),n(6997),n(3946),n(8269),n(6108),n(6774),n(1466),n(9357),n(6142),n(1876),n(851),n(8416),n(8184),n(147),n(9192),n(142),n(1786),n(5368),n(6964),n(2152),n(4821),n(9103),n(1303),n(3318),n(162),n(3834),n(1572),n(2139),n(685),n(5535),n(7347),n(3049),n(6633),n(8989),n(8270),n(4510),n(3984),n(5769),n(55),n(6014),e.exports=n(5645)},911:(e,t,n)=>{n(1268),e.exports=n(5645).Array.flatMap},990:(e,t,n)=>{n(2773),e.exports=n(5645).Array.includes},5434:(e,t,n)=>{n(3276),e.exports=n(5645).Object.entries},8051:(e,t,n)=>{n(8351),e.exports=n(5645).Object.getOwnPropertyDescriptors},8250:(e,t,n)=>{n(6409),e.exports=n(5645).Object.values},4952:(e,t,n)=>{"use strict";n(851),n(9865),e.exports=n(5645).Promise.finally},6197:(e,t,n)=>{n(2770),e.exports=n(5645).String.padEnd},4160:(e,t,n)=>{n(1784),e.exports=n(5645).String.padStart},4039:(e,t,n)=>{n(4325),e.exports=n(5645).String.trimRight},6728:(e,t,n)=>{n(5869),e.exports=n(5645).String.trimLeft},3568:(e,t,n)=>{n(9665),e.exports=n(8787).f("asyncIterator")},115:(e,t,n)=>{n(4579),e.exports=n(1327).global},5663:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},2159:(e,t,n)=>{var r=n(6727);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},1327:e=>{var t=e.exports={version:"2.6.12"};"number"==typeof __e&&(__e=t)},9216:(e,t,n)=>{var r=n(5663);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},9666:(e,t,n)=>{e.exports=!n(7929)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},7467:(e,t,n)=>{var r=n(6727),o=n(3938).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},3856:(e,t,n)=>{var r=n(3938),o=n(1327),i=n(9216),a=n(1818),l=n(7069),u=function(e,t,n){var s,c,f,d=e&u.F,p=e&u.G,h=e&u.S,v=e&u.P,m=e&u.B,g=e&u.W,y=p?o:o[t]||(o[t]={}),b=y.prototype,w=p?r:h?r[t]:(r[t]||{}).prototype;for(s in p&&(n=t),n)(c=!d&&w&&void 0!==w[s])&&l(y,s)||(f=c?w[s]:n[s],y[s]=p&&"function"!=typeof w[s]?n[s]:m&&c?i(f,r):g&&w[s]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((y.virtual||(y.virtual={}))[s]=f,e&u.R&&b&&!b[s]&&a(b,s,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},7929:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},3938:e=>{var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},7069:e=>{var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},1818:(e,t,n)=>{var r=n(4743),o=n(3101);e.exports=n(9666)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},3758:(e,t,n)=>{e.exports=!n(9666)&&!n(7929)((function(){return 7!=Object.defineProperty(n(7467)("div"),"a",{get:function(){return 7}}).a}))},6727:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},4743:(e,t,n)=>{var r=n(2159),o=n(3758),i=n(3206),a=Object.defineProperty;t.f=n(9666)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},3101:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},3206:(e,t,n)=>{var r=n(6727);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},4579:(e,t,n)=>{var r=n(3856);r(r.G,{global:n(3938)})},4963:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},3365:(e,t,n)=>{var r=n(2032);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},7722:(e,t,n)=>{var r=n(6314)("unscopables"),o=Array.prototype;null==o[r]&&n(7728)(o,r,{}),e.exports=function(e){o[r][e]=!0}},6793:(e,t,n)=>{"use strict";var r=n(4496)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},3328:e=>{e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},7007:(e,t,n)=>{var r=n(5286);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},5216:(e,t,n)=>{"use strict";var r=n(508),o=n(2337),i=n(875);e.exports=[].copyWithin||function(e,t){var n=r(this),a=i(n.length),l=o(e,a),u=o(t,a),s=arguments.length>2?arguments[2]:void 0,c=Math.min((void 0===s?a:o(s,a))-u,a-l),f=1;for(u<l&&l<u+c&&(f=-1,u+=c-1,l+=c-1);c-- >0;)u in n?n[l]=n[u]:delete n[l],l+=f,u+=f;return n}},6852:(e,t,n)=>{"use strict";var r=n(508),o=n(2337),i=n(875);e.exports=function(e){for(var t=r(this),n=i(t.length),a=arguments.length,l=o(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,s=void 0===u?n:o(u,n);s>l;)t[l++]=e;return t}},9315:(e,t,n)=>{var r=n(2110),o=n(875),i=n(2337);e.exports=function(e){return function(t,n,a){var l,u=r(t),s=o(u.length),c=i(a,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},50:(e,t,n)=>{var r=n(741),o=n(9797),i=n(508),a=n(875),l=n(6886);e.exports=function(e,t){var n=1==e,u=2==e,s=3==e,c=4==e,f=6==e,d=5==e||f,p=t||l;return function(t,l,h){for(var v,m,g=i(t),y=o(g),b=r(l,h,3),w=a(y.length),x=0,S=n?p(t,w):u?p(t,0):void 0;w>x;x++)if((d||x in y)&&(m=b(v=y[x],x,g),e))if(n)S[x]=m;else if(m)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:S.push(v)}else if(c)return!1;return f?-1:s||c?c:S}}},7628:(e,t,n)=>{var r=n(4963),o=n(508),i=n(9797),a=n(875);e.exports=function(e,t,n,l,u){r(t);var s=o(e),c=i(s),f=a(s.length),d=u?f-1:0,p=u?-1:1;if(n<2)for(;;){if(d in c){l=c[d],d+=p;break}if(d+=p,u?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;u?d>=0:f>d;d+=p)d in c&&(l=t(l,c[d],d,s));return l}},2736:(e,t,n)=>{var r=n(5286),o=n(4302),i=n(6314)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},6886:(e,t,n)=>{var r=n(2736);e.exports=function(e,t){return new(r(e))(t)}},4398:(e,t,n)=>{"use strict";var r=n(4963),o=n(5286),i=n(7242),a=[].slice,l={},u=function(e,t,n){if(!(t in l)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";l[t]=Function("F,a","return new F("+r.join(",")+")")}return l[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),l=function(){var r=n.concat(a.call(arguments));return this instanceof l?u(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(l.prototype=t.prototype),l}},1488:(e,t,n)=>{var r=n(2032),o=n(6314)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},2032:e=>{var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},9824:(e,t,n)=>{"use strict";var r=n(9275).f,o=n(2503),i=n(4408),a=n(741),l=n(3328),u=n(3531),s=n(2923),c=n(5436),f=n(2974),d=n(7057),p=n(4728).fastKey,h=n(1616),v=d?"_s":"size",m=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,s){var c=e((function(e,r){l(e,c,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&u(r,n,e[s],e)}));return i(c.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=h(this,t),r=m(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(e){h(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!m(h(this,t),e)}}),d&&r(c.prototype,"size",{get:function(){return h(this,t)[v]}}),c},def:function(e,t,n){var r,o,i=m(e,t);return i?i.v=n:(e._l=i={i:o=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[v]++,"F"!==o&&(e._i[o]=i)),e},getEntry:m,setStrong:function(e,t,n){s(e,t,(function(e,n){this._t=h(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this,t=e._k,n=e._l;n&&n.r;)n=n.p;return e._t&&(e._l=n=n?n.n:e._t._f)?c(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(e._t=void 0,c(1))}),n?"entries":"values",!n,!0),f(t)}}},3657:(e,t,n)=>{"use strict";var r=n(4408),o=n(4728).getWeak,i=n(7007),a=n(5286),l=n(3328),u=n(3531),s=n(50),c=n(9181),f=n(1616),d=s(5),p=s(6),h=0,v=function(e){return e._l||(e._l=new m)},m=function(){this.a=[]},g=function(e,t){return d(e.a,(function(e){return e[0]===t}))};m.prototype={get:function(e){var t=g(this,e);if(t)return t[1]},has:function(e){return!!g(this,e)},set:function(e,t){var n=g(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var s=e((function(e,r){l(e,s,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&u(r,n,e[i],e)}));return r(s.prototype,{delete:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).delete(e):n&&c(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).has(e):n&&c(n,this._i)}}),s},def:function(e,t,n){var r=o(i(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},5795:(e,t,n)=>{"use strict";var r=n(3816),o=n(2985),i=n(7234),a=n(4408),l=n(4728),u=n(3531),s=n(3328),c=n(5286),f=n(4253),d=n(7462),p=n(2943),h=n(266);e.exports=function(e,t,n,v,m,g){var y=r[e],b=y,w=m?"set":"add",x=b&&b.prototype,S={},E=function(e){var t=x[e];i(x,e,"delete"==e||"has"==e?function(e){return!(g&&!c(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!c(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(g||x.forEach&&!f((function(){(new b).entries().next()})))){var k=new b,C=k[w](g?{}:-0,1)!=k,A=f((function(){k.has(1)})),P=d((function(e){new b(e)})),O=!g&&f((function(){for(var e=new b,t=5;t--;)e[w](t,t);return!e.has(-0)}));P||((b=t((function(t,n){s(t,b,e);var r=h(new y,t,b);return null!=n&&u(n,m,r[w],r),r}))).prototype=x,x.constructor=b),(A||O)&&(E("delete"),E("has"),m&&E("get")),(O||C)&&E(w),g&&x.clear&&delete x.clear}else b=v.getConstructor(t,e,m,w),a(b.prototype,n),l.NEED=!0;return p(b,e),S[e]=b,o(o.G+o.W+o.F*(b!=y),S),g||v.setStrong(b,e,m),b}},5645:e=>{var t=e.exports={version:"2.6.12"};"number"==typeof __e&&(__e=t)},2811:(e,t,n)=>{"use strict";var r=n(9275),o=n(681);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},741:(e,t,n)=>{var r=n(4963);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},3537:(e,t,n)=>{"use strict";var r=n(4253),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-50000000000001))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},870:(e,t,n)=>{"use strict";var r=n(7007),o=n(1689),i="number";e.exports=function(e){if("string"!==e&&e!==i&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),e!=i)}},1355:e=>{e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},7057:(e,t,n)=>{e.exports=!n(4253)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},2457:(e,t,n)=>{var r=n(5286),o=n(3816).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},4430:e=>{e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},5541:(e,t,n)=>{var r=n(7184),o=n(4548),i=n(4682);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,l=n(e),u=i.f,s=0;l.length>s;)u.call(e,a=l[s++])&&t.push(a);return t}},2985:(e,t,n)=>{var r=n(3816),o=n(5645),i=n(7728),a=n(7234),l=n(741),u=function(e,t,n){var s,c,f,d,p=e&u.F,h=e&u.G,v=e&u.S,m=e&u.P,g=e&u.B,y=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(s in h&&(n=t),n)f=((c=!p&&y&&void 0!==y[s])?y:n)[s],d=g&&c?l(f,r):m&&"function"==typeof f?l(Function.call,f):f,y&&a(y,s,f,e&u.U),b[s]!=f&&i(b,s,d),m&&w[s]!=f&&(w[s]=f)};r.core=o,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},8852:(e,t,n)=>{var r=n(6314)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},4253:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},8082:(e,t,n)=>{"use strict";n(8269);var r=n(7234),o=n(7728),i=n(4253),a=n(1355),l=n(6314),u=n(1165),s=l("species"),c=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=l(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[s]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!c||"split"===e&&!f){var v=/./[d],m=n(a,d,""[e],(function(e,t,n,r,o){return t.exec===u?p&&!o?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),g=m[0],y=m[1];r(String.prototype,e,g),o(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},3218:(e,t,n)=>{"use strict";var r=n(7007);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},3325:(e,t,n)=>{"use strict";var r=n(4302),o=n(5286),i=n(875),a=n(741),l=n(6314)("isConcatSpreadable");e.exports=function e(t,n,u,s,c,f,d,p){for(var h,v,m=c,g=0,y=!!d&&a(d,p,3);g<s;){if(g in u){if(h=y?y(u[g],g,n):u[g],v=!1,o(h)&&(v=void 0!==(v=h[l])?!!v:r(h)),v&&f>0)m=e(t,n,h,i(h.length),m,f-1)-1;else{if(m>=9007199254740991)throw TypeError();t[m]=h}m++}g++}return m}},3531:(e,t,n)=>{var r=n(741),o=n(8851),i=n(6555),a=n(7007),l=n(875),u=n(9002),s={},c={},f=e.exports=function(e,t,n,f,d){var p,h,v,m,g=d?function(){return e}:u(e),y=r(n,f,t?2:1),b=0;if("function"!=typeof g)throw TypeError(e+" is not iterable!");if(i(g)){for(p=l(e.length);p>b;b++)if((m=t?y(a(h=e[b])[0],h[1]):y(e[b]))===s||m===c)return m}else for(v=g.call(e);!(h=v.next()).done;)if((m=o(v,y,h.value,t))===s||m===c)return m};f.BREAK=s,f.RETURN=c},18:(e,t,n)=>{e.exports=n(3825)("native-function-to-string",Function.toString)},3816:e=>{var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)},9181:e=>{var t={}.hasOwnProperty;e.exports=function(e,n){return t.call(e,n)}},7728:(e,t,n)=>{var r=n(9275),o=n(681);e.exports=n(7057)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},639:(e,t,n)=>{var r=n(3816).document;e.exports=r&&r.documentElement},1734:(e,t,n)=>{e.exports=!n(7057)&&!n(4253)((function(){return 7!=Object.defineProperty(n(2457)("div"),"a",{get:function(){return 7}}).a}))},266:(e,t,n)=>{var r=n(5286),o=n(7375).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},7242:e=>{e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},9797:(e,t,n)=>{var r=n(2032);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},6555:(e,t,n)=>{var r=n(2803),o=n(6314)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},4302:(e,t,n)=>{var r=n(2032);e.exports=Array.isArray||function(e){return"Array"==r(e)}},8367:(e,t,n)=>{var r=n(5286),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},5286:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},5364:(e,t,n)=>{var r=n(5286),o=n(2032),i=n(6314)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},8851:(e,t,n)=>{var r=n(7007);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},9988:(e,t,n)=>{"use strict";var r=n(2503),o=n(681),i=n(2943),a={};n(7728)(a,n(6314)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},2923:(e,t,n)=>{"use strict";var r=n(4461),o=n(2985),i=n(7234),a=n(7728),l=n(2803),u=n(9988),s=n(2943),c=n(468),f=n(6314)("iterator"),d=!([].keys&&"next"in[].keys()),p="keys",h="values",v=function(){return this};e.exports=function(e,t,n,m,g,y,b){u(n,t,m);var w,x,S,E=function(e){if(!d&&e in P)return P[e];switch(e){case p:case h:return function(){return new n(this,e)}}return function(){return new n(this,e)}},k=t+" Iterator",C=g==h,A=!1,P=e.prototype,O=P[f]||P["@@iterator"]||g&&P[g],R=O||E(g),_=g?C?E("entries"):R:void 0,N="Array"==t&&P.entries||O;if(N&&(S=c(N.call(new e)))!==Object.prototype&&S.next&&(s(S,k,!0),r||"function"==typeof S[f]||a(S,f,v)),C&&O&&O.name!==h&&(A=!0,R=function(){return O.call(this)}),r&&!b||!d&&!A&&P[f]||a(P,f,R),l[t]=R,l[k]=v,g)if(w={values:C?R:E(h),keys:y?R:E(p),entries:_},b)for(x in w)x in P||i(P,x,w[x]);else o(o.P+o.F*(d||A),t,w);return w}},7462:(e,t,n)=>{var r=n(6314)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},5436:e=>{e.exports=function(e,t){return{value:t,done:!!e}}},2803:e=>{e.exports={}},4461:e=>{e.exports=!1},3086:e=>{var t=Math.expm1;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:t},4934:(e,t,n)=>{var r=n(1801),o=Math.pow,i=o(2,-52),a=o(2,-23),l=o(2,127)*(2-a),u=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),s=r(e);return o<u?s*(o/u/a+1/i-1/i)*u*a:(n=(t=(1+a/i)*o)-(t-o))>l||n!=n?s*(1/0):s*n}},6206:e=>{e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},1801:e=>{e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},4728:(e,t,n)=>{var r=n(3953)("meta"),o=n(5286),i=n(9181),a=n(9275).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(4253)((function(){return u(Object.preventExtensions({}))})),c=function(e){a(e,r,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&u(e)&&!i(e,r)&&c(e),e}}},4351:(e,t,n)=>{var r=n(3816),o=n(4193).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,l=r.Promise,u="process"==n(2032)(a);e.exports=function(){var e,t,n,s=function(){var r,o;for(u&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(l&&l.resolve){var c=l.resolve(void 0);n=function(){c.then(s)}}else n=function(){o.call(r,s)};else{var f=!0,d=document.createTextNode("");new i(s).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},3499:(e,t,n)=>{"use strict";var r=n(4963);function o(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},5345:(e,t,n)=>{"use strict";var r=n(7057),o=n(7184),i=n(4548),a=n(4682),l=n(508),u=n(9797),s=Object.assign;e.exports=!s||n(4253)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=s({},e)[n]||Object.keys(s({},t)).join("")!=r}))?function(e,t){for(var n=l(e),s=arguments.length,c=1,f=i.f,d=a.f;s>c;)for(var p,h=u(arguments[c++]),v=f?o(h).concat(f(h)):o(h),m=v.length,g=0;m>g;)p=v[g++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:s},2503:(e,t,n)=>{var r=n(7007),o=n(5588),i=n(4430),a=n(9335)("IE_PROTO"),l=function(){},u=function(){var e,t=n(2457)("iframe"),r=i.length;for(t.style.display="none",n(639).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[i[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[a]=e):n=u(),void 0===t?n:o(n,t)}},9275:(e,t,n)=>{var r=n(7007),o=n(1734),i=n(1689),a=Object.defineProperty;t.f=n(7057)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},5588:(e,t,n)=>{var r=n(9275),o=n(7007),i=n(7184);e.exports=n(7057)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),l=a.length,u=0;l>u;)r.f(e,n=a[u++],t[n]);return e}},8693:(e,t,n)=>{var r=n(4682),o=n(681),i=n(2110),a=n(1689),l=n(9181),u=n(1734),s=Object.getOwnPropertyDescriptor;t.f=n(7057)?s:function(e,t){if(e=i(e),t=a(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return o(!r.f.call(e,t),e[t])}},9327:(e,t,n)=>{var r=n(2110),o=n(616).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},616:(e,t,n)=>{var r=n(189),o=n(4430).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},4548:(e,t)=>{t.f=Object.getOwnPropertySymbols},468:(e,t,n)=>{var r=n(9181),o=n(508),i=n(9335)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},189:(e,t,n)=>{var r=n(9181),o=n(2110),i=n(9315)(!1),a=n(9335)("IE_PROTO");e.exports=function(e,t){var n,l=o(e),u=0,s=[];for(n in l)n!=a&&r(l,n)&&s.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~i(s,n)||s.push(n));return s}},7184:(e,t,n)=>{var r=n(189),o=n(4430);e.exports=Object.keys||function(e){return r(e,o)}},4682:(e,t)=>{t.f={}.propertyIsEnumerable},3160:(e,t,n)=>{var r=n(2985),o=n(5645),i=n(4253);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i((function(){n(1)})),"Object",a)}},1131:(e,t,n)=>{var r=n(7057),o=n(7184),i=n(2110),a=n(4682).f;e.exports=function(e){return function(t){for(var n,l=i(t),u=o(l),s=u.length,c=0,f=[];s>c;)n=u[c++],r&&!a.call(l,n)||f.push(e?[n,l[n]]:l[n]);return f}}},7643:(e,t,n)=>{var r=n(616),o=n(4548),i=n(7007),a=n(3816).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},7743:(e,t,n)=>{var r=n(3816).parseFloat,o=n(9599).trim;e.exports=1/r(n(4644)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},5960:(e,t,n)=>{var r=n(3816).parseInt,o=n(9599).trim,i=n(4644),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},188:e=>{e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},94:(e,t,n)=>{var r=n(7007),o=n(5286),i=n(3499);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},681:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},4408:(e,t,n)=>{var r=n(7234);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},7234:(e,t,n)=>{var r=n(3816),o=n(7728),i=n(9181),a=n(3953)("src"),l=n(18),u="toString",s=(""+l).split(u);n(5645).inspectSource=function(e){return l.call(e)},(e.exports=function(e,t,n,l){var u="function"==typeof n;u&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(u&&(i(n,a)||o(n,a,e[t]?""+e[t]:s.join(String(t)))),e===r?e[t]=n:l?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,u,(function(){return"function"==typeof this&&this[a]||l.call(this)}))},7787:(e,t,n)=>{"use strict";var r=n(1488),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},1165:(e,t,n)=>{"use strict";var r,o,i=n(3218),a=RegExp.prototype.exec,l=String.prototype.replace,u=a,s=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),c=void 0!==/()??/.exec("")[1];(s||c)&&(u=function(e){var t,n,r,o,u=this;return c&&(n=new RegExp("^"+u.source+"$(?!\\s)",i.call(u))),s&&(t=u.lastIndex),r=a.call(u,e),s&&r&&(u.lastIndex=u.global?r.index+r[0].length:t),c&&r&&r.length>1&&l.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=u},7195:e=>{e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},7375:(e,t,n)=>{var r=n(5286),o=n(7007),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(741)(Function.call,n(8693).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},2974:(e,t,n)=>{"use strict";var r=n(3816),o=n(9275),i=n(7057),a=n(6314)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},2943:(e,t,n)=>{var r=n(9275).f,o=n(9181),i=n(6314)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},9335:(e,t,n)=>{var r=n(3825)("keys"),o=n(3953);e.exports=function(e){return r[e]||(r[e]=o(e))}},3825:(e,t,n)=>{var r=n(5645),o=n(3816),i="__core-js_shared__",a=o[i]||(o[i]={});(e.exports=function(e,t){return a[e]||(a[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(4461)?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},8364:(e,t,n)=>{var r=n(7007),o=n(4963),i=n(6314)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[i])?t:o(n)}},7717:(e,t,n)=>{"use strict";var r=n(4253);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},4496:(e,t,n)=>{var r=n(1467),o=n(1355);e.exports=function(e){return function(t,n){var i,a,l=String(o(t)),u=r(n),s=l.length;return u<0||u>=s?e?"":void 0:(i=l.charCodeAt(u))<55296||i>56319||u+1===s||(a=l.charCodeAt(u+1))<56320||a>57343?e?l.charAt(u):i:e?l.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},2094:(e,t,n)=>{var r=n(5364),o=n(1355);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},9395:(e,t,n)=>{var r=n(2985),o=n(4253),i=n(1355),a=/"/g,l=function(e,t,n,r){var o=String(i(e)),l="<"+t;return""!==n&&(l+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),l+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(l),r(r.P+r.F*o((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},5442:(e,t,n)=>{var r=n(875),o=n(8595),i=n(1355);e.exports=function(e,t,n,a){var l=String(i(e)),u=l.length,s=void 0===n?" ":String(n),c=r(t);if(c<=u||""==s)return l;var f=c-u,d=o.call(s,Math.ceil(f/s.length));return d.length>f&&(d=d.slice(0,f)),a?d+l:l+d}},8595:(e,t,n)=>{"use strict";var r=n(1467),o=n(1355);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},9599:(e,t,n)=>{var r=n(2985),o=n(1355),i=n(4253),a=n(4644),l="["+a+"]",u=RegExp("^"+l+l+"*"),s=RegExp(l+l+"*$"),c=function(e,t,n){var o={},l=i((function(){return!!a[e]()||"​"!="​"[e]()})),u=o[e]=l?t(f):a[e];n&&(o[n]=u),r(r.P+r.F*l,"String",o)},f=c.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(s,"")),e};e.exports=c},4644:e=>{e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},4193:(e,t,n)=>{var r,o,i,a=n(741),l=n(7242),u=n(639),s=n(2457),c=n(3816),f=c.process,d=c.setImmediate,p=c.clearImmediate,h=c.MessageChannel,v=c.Dispatch,m=0,g={},y=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},b=function(e){y.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return g[++m]=function(){l("function"==typeof e?e:Function(e),t)},r(m),m},p=function(e){delete g[e]},"process"==n(2032)(f)?r=function(e){f.nextTick(a(y,e,1))}:v&&v.now?r=function(e){v.now(a(y,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(e){c.postMessage(e+"","*")},c.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(e){u.appendChild(s("script")).onreadystatechange=function(){u.removeChild(this),y.call(e)}}:function(e){setTimeout(a(y,e,1),0)}),e.exports={set:d,clear:p}},2337:(e,t,n)=>{var r=n(1467),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},4843:(e,t,n)=>{var r=n(1467),o=n(875);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},1467:e=>{var t=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:t)(e)}},2110:(e,t,n)=>{var r=n(9797),o=n(1355);e.exports=function(e){return r(o(e))}},875:(e,t,n)=>{var r=n(1467),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},508:(e,t,n)=>{var r=n(1355);e.exports=function(e){return Object(r(e))}},1689:(e,t,n)=>{var r=n(5286);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},8440:(e,t,n)=>{"use strict";if(n(7057)){var r=n(4461),o=n(3816),i=n(4253),a=n(2985),l=n(9383),u=n(1125),s=n(741),c=n(3328),f=n(681),d=n(7728),p=n(4408),h=n(1467),v=n(875),m=n(4843),g=n(2337),y=n(1689),b=n(9181),w=n(1488),x=n(5286),S=n(508),E=n(6555),k=n(2503),C=n(468),A=n(616).f,P=n(9002),O=n(3953),R=n(6314),_=n(50),N=n(9315),T=n(8364),M=n(6997),I=n(2803),F=n(7462),L=n(2974),j=n(6852),z=n(5216),D=n(9275),B=n(8693),W=D.f,U=B.f,V=o.RangeError,$=o.TypeError,H=o.Uint8Array,q="ArrayBuffer",K="SharedArrayBuffer",Q="BYTES_PER_ELEMENT",Y=Array.prototype,G=u.ArrayBuffer,X=u.DataView,J=_(0),Z=_(2),ee=_(3),te=_(4),ne=_(5),re=_(6),oe=N(!0),ie=N(!1),ae=M.values,le=M.keys,ue=M.entries,se=Y.lastIndexOf,ce=Y.reduce,fe=Y.reduceRight,de=Y.join,pe=Y.sort,he=Y.slice,ve=Y.toString,me=Y.toLocaleString,ge=R("iterator"),ye=R("toStringTag"),be=O("typed_constructor"),we=O("def_constructor"),xe=l.CONSTR,Se=l.TYPED,Ee=l.VIEW,ke="Wrong length!",Ce=_(1,(function(e,t){return _e(T(e,e[we]),t)})),Ae=i((function(){return 1===new H(new Uint16Array([1]).buffer)[0]})),Pe=!!H&&!!H.prototype.set&&i((function(){new H(1).set({})})),Oe=function(e,t){var n=h(e);if(n<0||n%t)throw V("Wrong offset!");return n},Re=function(e){if(x(e)&&Se in e)return e;throw $(e+" is not a typed array!")},_e=function(e,t){if(!x(e)||!(be in e))throw $("It is not a typed array constructor!");return new e(t)},Ne=function(e,t){return Te(T(e,e[we]),t)},Te=function(e,t){for(var n=0,r=t.length,o=_e(e,r);r>n;)o[n]=t[n++];return o},Me=function(e,t,n){W(e,t,{get:function(){return this._d[n]}})},Ie=function(e){var t,n,r,o,i,a,l=S(e),u=arguments.length,c=u>1?arguments[1]:void 0,f=void 0!==c,d=P(l);if(null!=d&&!E(d)){for(a=d.call(l),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);l=r}for(f&&u>2&&(c=s(c,arguments[2],2)),t=0,n=v(l.length),o=_e(this,n);n>t;t++)o[t]=f?c(l[t],t):l[t];return o},Fe=function(){for(var e=0,t=arguments.length,n=_e(this,t);t>e;)n[e]=arguments[e++];return n},Le=!!H&&i((function(){me.call(new H(1))})),je=function(){return me.apply(Le?he.call(Re(this)):Re(this),arguments)},ze={copyWithin:function(e,t){return z.call(Re(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return te(Re(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return j.apply(Re(this),arguments)},filter:function(e){return Ne(this,Z(Re(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return ne(Re(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return re(Re(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){J(Re(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ie(Re(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return oe(Re(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return de.apply(Re(this),arguments)},lastIndexOf:function(e){return se.apply(Re(this),arguments)},map:function(e){return Ce(Re(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ce.apply(Re(this),arguments)},reduceRight:function(e){return fe.apply(Re(this),arguments)},reverse:function(){for(var e,t=this,n=Re(t).length,r=Math.floor(n/2),o=0;o<r;)e=t[o],t[o++]=t[--n],t[n]=e;return t},some:function(e){return ee(Re(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return pe.call(Re(this),e)},subarray:function(e,t){var n=Re(this),r=n.length,o=g(e,r);return new(T(n,n[we]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===t?r:g(t,r))-o))}},De=function(e,t){return Ne(this,he.call(Re(this),e,t))},Be=function(e){Re(this);var t=Oe(arguments[1],1),n=this.length,r=S(e),o=v(r.length),i=0;if(o+t>n)throw V(ke);for(;i<o;)this[t+i]=r[i++]},We={entries:function(){return ue.call(Re(this))},keys:function(){return le.call(Re(this))},values:function(){return ae.call(Re(this))}},Ue=function(e,t){return x(e)&&e[Se]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ve=function(e,t){return Ue(e,t=y(t,!0))?f(2,e[t]):U(e,t)},$e=function(e,t,n){return!(Ue(e,t=y(t,!0))&&x(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?W(e,t,n):(e[t]=n.value,e)};xe||(B.f=Ve,D.f=$e),a(a.S+a.F*!xe,"Object",{getOwnPropertyDescriptor:Ve,defineProperty:$e}),i((function(){ve.call({})}))&&(ve=me=function(){return de.call(this)});var He=p({},ze);p(He,We),d(He,ge,We.values),p(He,{slice:De,set:Be,constructor:function(){},toString:ve,toLocaleString:je}),Me(He,"buffer","b"),Me(He,"byteOffset","o"),Me(He,"byteLength","l"),Me(He,"length","e"),W(He,ye,{get:function(){return this[Se]}}),e.exports=function(e,t,n,u){var s=e+((u=!!u)?"Clamped":"")+"Array",f="get"+e,p="set"+e,h=o[s],g=h||{},y=h&&C(h),b=!h||!l.ABV,S={},E=h&&h.prototype,P=function(e,n){W(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Ae)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](n*t+o.o,r,Ae)}(this,n,e)},enumerable:!0})};b?(h=n((function(e,n,r,o){c(e,h,s,"_d");var i,a,l,u,f=0,p=0;if(x(n)){if(!(n instanceof G||(u=w(n))==q||u==K))return Se in n?Te(h,n):Ie.call(h,n);i=n,p=Oe(r,t);var g=n.byteLength;if(void 0===o){if(g%t)throw V(ke);if((a=g-p)<0)throw V(ke)}else if((a=v(o)*t)+p>g)throw V(ke);l=a/t}else l=m(n),i=new G(a=l*t);for(d(e,"_d",{b:i,o:p,l:a,e:l,v:new X(i)});f<l;)P(e,f++)})),E=h.prototype=k(He),d(E,"constructor",h)):i((function(){h(1)}))&&i((function(){new h(-1)}))&&F((function(e){new h,new h(null),new h(1.5),new h(e)}),!0)||(h=n((function(e,n,r,o){var i;return c(e,h,s),x(n)?n instanceof G||(i=w(n))==q||i==K?void 0!==o?new g(n,Oe(r,t),o):void 0!==r?new g(n,Oe(r,t)):new g(n):Se in n?Te(h,n):Ie.call(h,n):new g(m(n))})),J(y!==Function.prototype?A(g).concat(A(y)):A(g),(function(e){e in h||d(h,e,g[e])})),h.prototype=E,r||(E.constructor=h));var O=E[ge],R=!!O&&("values"==O.name||null==O.name),_=We.values;d(h,be,!0),d(E,Se,s),d(E,Ee,!0),d(E,we,h),(u?new h(1)[ye]==s:ye in E)||W(E,ye,{get:function(){return s}}),S[s]=h,a(a.G+a.W+a.F*(h!=g),S),a(a.S,s,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i((function(){g.of.call(h,1)})),s,{from:Ie,of:Fe}),Q in E||d(E,Q,t),a(a.P,s,ze),L(s),a(a.P+a.F*Pe,s,{set:Be}),a(a.P+a.F*!R,s,We),r||E.toString==ve||(E.toString=ve),a(a.P+a.F*i((function(){new h(1).slice()})),s,{slice:De}),a(a.P+a.F*(i((function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()}))||!i((function(){E.toLocaleString.call([1,2])}))),s,{toLocaleString:je}),I[s]=R?O:_,r||R||d(E,ge,_)}}else e.exports=function(){}},1125:(e,t,n)=>{"use strict";var r=n(3816),o=n(7057),i=n(4461),a=n(9383),l=n(7728),u=n(4408),s=n(4253),c=n(3328),f=n(1467),d=n(875),p=n(4843),h=n(616).f,v=n(9275).f,m=n(6852),g=n(2943),y="ArrayBuffer",b="DataView",w="Wrong index!",x=r.ArrayBuffer,S=r.DataView,E=r.Math,k=r.RangeError,C=r.Infinity,A=x,P=E.abs,O=E.pow,R=E.floor,_=E.log,N=E.LN2,T="buffer",M="byteLength",I="byteOffset",F=o?"_b":T,L=o?"_l":M,j=o?"_o":I;function z(e,t,n){var r,o,i,a=new Array(n),l=8*n-t-1,u=(1<<l)-1,s=u>>1,c=23===t?O(2,-24)-O(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=P(e))!=e||e===C?(o=e!=e?1:0,r=u):(r=R(_(e)/N),e*(i=O(2,-r))<1&&(r--,i*=2),(e+=r+s>=1?c/i:c*O(2,1-s))*i>=2&&(r++,i/=2),r+s>=u?(o=0,r=u):r+s>=1?(o=(e*i-1)*O(2,t),r+=s):(o=e*O(2,s-1)*O(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,l+=t;l>0;a[f++]=255&r,r/=256,l-=8);return a[--f]|=128*d,a}function D(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,a=i>>1,l=o-7,u=n-1,s=e[u--],c=127&s;for(s>>=7;l>0;c=256*c+e[u],u--,l-=8);for(r=c&(1<<-l)-1,c>>=-l,l+=t;l>0;r=256*r+e[u],u--,l-=8);if(0===c)c=1-a;else{if(c===i)return r?NaN:s?-C:C;r+=O(2,t),c-=a}return(s?-1:1)*r*O(2,c-t)}function B(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function W(e){return[255&e]}function U(e){return[255&e,e>>8&255]}function V(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function $(e){return z(e,52,8)}function H(e){return z(e,23,4)}function q(e,t,n){v(e.prototype,t,{get:function(){return this[n]}})}function K(e,t,n,r){var o=p(+n);if(o+t>e[L])throw k(w);var i=e[F]._b,a=o+e[j],l=i.slice(a,a+t);return r?l:l.reverse()}function Q(e,t,n,r,o,i){var a=p(+n);if(a+t>e[L])throw k(w);for(var l=e[F]._b,u=a+e[j],s=r(+o),c=0;c<t;c++)l[u+c]=s[i?c:t-c-1]}if(a.ABV){if(!s((function(){x(1)}))||!s((function(){new x(-1)}))||s((function(){return new x,new x(1.5),new x(NaN),x.name!=y}))){for(var Y,G=(x=function(e){return c(this,x),new A(p(e))}).prototype=A.prototype,X=h(A),J=0;X.length>J;)(Y=X[J++])in x||l(x,Y,A[Y]);i||(G.constructor=x)}var Z=new S(new x(2)),ee=S.prototype.setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||u(S.prototype,{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else x=function(e){c(this,x,y);var t=p(e);this._b=m.call(new Array(t),0),this[L]=t},S=function(e,t,n){c(this,S,b),c(e,x,b);var r=e[L],o=f(t);if(o<0||o>r)throw k("Wrong offset!");if(o+(n=void 0===n?r-o:d(n))>r)throw k("Wrong length!");this[F]=e,this[j]=o,this[L]=n},o&&(q(x,M,"_l"),q(S,T,"_b"),q(S,M,"_l"),q(S,I,"_o")),u(S.prototype,{getInt8:function(e){return K(this,1,e)[0]<<24>>24},getUint8:function(e){return K(this,1,e)[0]},getInt16:function(e){var t=K(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=K(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return B(K(this,4,e,arguments[1]))},getUint32:function(e){return B(K(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return D(K(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return D(K(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){Q(this,1,e,W,t)},setUint8:function(e,t){Q(this,1,e,W,t)},setInt16:function(e,t){Q(this,2,e,U,t,arguments[2])},setUint16:function(e,t){Q(this,2,e,U,t,arguments[2])},setInt32:function(e,t){Q(this,4,e,V,t,arguments[2])},setUint32:function(e,t){Q(this,4,e,V,t,arguments[2])},setFloat32:function(e,t){Q(this,4,e,H,t,arguments[2])},setFloat64:function(e,t){Q(this,8,e,$,t,arguments[2])}});g(x,y),g(S,b),l(S.prototype,a.VIEW,!0),t.ArrayBuffer=x,t.DataView=S},9383:(e,t,n)=>{for(var r,o=n(3816),i=n(7728),a=n(3953),l=a("typed_array"),u=a("view"),s=!(!o.ArrayBuffer||!o.DataView),c=s,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[d[f++]])?(i(r.prototype,l,!0),i(r.prototype,u,!0)):c=!1;e.exports={ABV:s,CONSTR:c,TYPED:l,VIEW:u}},3953:e=>{var t=0,n=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++t+n).toString(36))}},575:(e,t,n)=>{var r=n(3816).navigator;e.exports=r&&r.userAgent||""},1616:(e,t,n)=>{var r=n(5286);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},6074:(e,t,n)=>{var r=n(3816),o=n(5645),i=n(4461),a=n(8787),l=n(9275).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:a.f(e)})}},8787:(e,t,n)=>{t.f=n(6314)},6314:(e,t,n)=>{var r=n(3825)("wks"),o=n(3953),i=n(3816).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},9002:(e,t,n)=>{var r=n(1488),o=n(6314)("iterator"),i=n(2803);e.exports=n(5645).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},2e3:(e,t,n)=>{var r=n(2985);r(r.P,"Array",{copyWithin:n(5216)}),n(7722)("copyWithin")},5745:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(4);r(r.P+r.F*!n(7717)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},8977:(e,t,n)=>{var r=n(2985);r(r.P,"Array",{fill:n(6852)}),n(7722)("fill")},8837:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(2);r(r.P+r.F*!n(7717)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},4899:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(6),i="findIndex",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(7722)(i)},2310:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(5),i="find",a=!0;i in[]&&Array(1).find((function(){a=!1})),r(r.P+r.F*a,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(7722)(i)},4336:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(0),i=n(7717)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},522:(e,t,n)=>{"use strict";var r=n(741),o=n(2985),i=n(508),a=n(8851),l=n(6555),u=n(875),s=n(2811),c=n(9002);o(o.S+o.F*!n(7462)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,o,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,m=void 0!==v,g=0,y=c(d);if(m&&(v=r(v,h>2?arguments[2]:void 0,2)),null==y||p==Array&&l(y))for(n=new p(t=u(d.length));t>g;g++)s(n,g,m?v(d[g],g):d[g]);else for(f=y.call(d),n=new p;!(o=f.next()).done;g++)s(n,g,m?a(f,v,[o.value,g],!0):o.value);return n.length=g,n}})},3369:(e,t,n)=>{"use strict";var r=n(2985),o=n(9315)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(7717)(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},774:(e,t,n)=>{var r=n(2985);r(r.S,"Array",{isArray:n(4302)})},6997:(e,t,n)=>{"use strict";var r=n(7722),o=n(5436),i=n(2803),a=n(2110);e.exports=n(2923)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},7842:(e,t,n)=>{"use strict";var r=n(2985),o=n(2110),i=[].join;r(r.P+r.F*(n(9797)!=Object||!n(7717)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},9564:(e,t,n)=>{"use strict";var r=n(2985),o=n(2110),i=n(1467),a=n(875),l=[].lastIndexOf,u=!!l&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(7717)(l)),"Array",{lastIndexOf:function(e){if(u)return l.apply(this,arguments)||0;var t=o(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},1802:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(1);r(r.P+r.F*!n(7717)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},8295:(e,t,n)=>{"use strict";var r=n(2985),o=n(2811);r(r.S+r.F*n(4253)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},3750:(e,t,n)=>{"use strict";var r=n(2985),o=n(7628);r(r.P+r.F*!n(7717)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},3057:(e,t,n)=>{"use strict";var r=n(2985),o=n(7628);r(r.P+r.F*!n(7717)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},110:(e,t,n)=>{"use strict";var r=n(2985),o=n(639),i=n(2032),a=n(2337),l=n(875),u=[].slice;r(r.P+r.F*n(4253)((function(){o&&u.call(o)})),"Array",{slice:function(e,t){var n=l(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return u.call(this,e,t);for(var o=a(e,n),s=a(t,n),c=l(s-o),f=new Array(c),d=0;d<c;d++)f[d]="String"==r?this.charAt(o+d):this[o+d];return f}})},6773:(e,t,n)=>{"use strict";var r=n(2985),o=n(50)(3);r(r.P+r.F*!n(7717)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},75:(e,t,n)=>{"use strict";var r=n(2985),o=n(4963),i=n(508),a=n(4253),l=[].sort,u=[1,2,3];r(r.P+r.F*(a((function(){u.sort(void 0)}))||!a((function(){u.sort(null)}))||!n(7717)(l)),"Array",{sort:function(e){return void 0===e?l.call(i(this)):l.call(i(this),o(e))}})},1842:(e,t,n)=>{n(2974)("Array")},1822:(e,t,n)=>{var r=n(2985);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},1031:(e,t,n)=>{var r=n(2985),o=n(3537);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},9977:(e,t,n)=>{"use strict";var r=n(2985),o=n(508),i=n(1689);r(r.P+r.F*n(4253)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},1560:(e,t,n)=>{var r=n(6314)("toPrimitive"),o=Date.prototype;r in o||n(7728)(o,r,n(870))},6331:(e,t,n)=>{var r=Date.prototype,o="Invalid Date",i=r.toString,a=r.getTime;new Date(NaN)+""!=o&&n(7234)(r,"toString",(function(){var e=a.call(this);return e==e?i.call(this):o}))},9730:(e,t,n)=>{var r=n(2985);r(r.P,"Function",{bind:n(4398)})},8377:(e,t,n)=>{"use strict";var r=n(5286),o=n(468),i=n(6314)("hasInstance"),a=Function.prototype;i in a||n(9275).f(a,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},6059:(e,t,n)=>{var r=n(9275).f,o=Function.prototype,i=/^\s*function ([^ (]*)/,a="name";a in o||n(7057)&&r(o,a,{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},8416:(e,t,n)=>{"use strict";var r=n(9824),o=n(1616),i="Map";e.exports=n(5795)(i,(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(o(this,i),e);return t&&t.v},set:function(e,t){return r.def(o(this,i),0===e?0:e,t)}},r,!0)},6503:(e,t,n)=>{var r=n(2985),o=n(6206),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},6786:(e,t,n)=>{var r=n(2985),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},932:(e,t,n)=>{var r=n(2985),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},7526:(e,t,n)=>{var r=n(2985),o=n(1801);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},1591:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},9073:(e,t,n)=>{var r=n(2985),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},347:(e,t,n)=>{var r=n(2985),o=n(3086);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},579:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{fround:n(4934)})},4669:(e,t,n)=>{var r=n(2985),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,l=arguments.length,u=0;a<l;)u<(n=o(arguments[a++]))?(i=i*(r=u/n)*r+1,u=n):i+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(i)}})},7710:(e,t,n)=>{var r=n(2985),o=Math.imul;r(r.S+r.F*n(4253)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(e,t){var n=65535,r=+e,o=+t,i=n&r,a=n&o;return 0|i*a+((n&r>>>16)*a+i*(n&o>>>16)<<16>>>0)}})},5789:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},3514:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{log1p:n(6206)})},9978:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},8472:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{sign:n(1801)})},6946:(e,t,n)=>{var r=n(2985),o=n(3086),i=Math.exp;r(r.S+r.F*n(4253)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},5068:(e,t,n)=>{var r=n(2985),o=n(3086),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},413:(e,t,n)=>{var r=n(2985);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},1246:(e,t,n)=>{"use strict";var r=n(3816),o=n(9181),i=n(2032),a=n(266),l=n(1689),u=n(4253),s=n(616).f,c=n(8693).f,f=n(9275).f,d=n(9599).trim,p="Number",h=r.Number,v=h,m=h.prototype,g=i(n(2503)(m))==p,y="trim"in String.prototype,b=function(e){var t=l(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=y?t.trim():d(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,u=t.slice(2),s=0,c=u.length;s<c;s++)if((a=u.charCodeAt(s))<48||a>o)return NaN;return parseInt(u,r)}}return+t};if(!h(" 0o1")||!h("0b1")||h("+0x1")){h=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof h&&(g?u((function(){m.valueOf.call(n)})):i(n)!=p)?a(new v(b(t)),n,h):b(t)};for(var w,x=n(7057)?s(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),S=0;x.length>S;S++)o(v,w=x[S])&&!o(h,w)&&f(h,w,c(v,w));h.prototype=m,m.constructor=h,n(7234)(r,p,h)}},5972:(e,t,n)=>{var r=n(2985);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},3403:(e,t,n)=>{var r=n(2985),o=n(3816).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},2516:(e,t,n)=>{var r=n(2985);r(r.S,"Number",{isInteger:n(8367)})},9371:(e,t,n)=>{var r=n(2985);r(r.S,"Number",{isNaN:function(e){return e!=e}})},6479:(e,t,n)=>{var r=n(2985),o=n(8367),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},1736:(e,t,n)=>{var r=n(2985);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},1889:(e,t,n)=>{var r=n(2985);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},5177:(e,t,n)=>{var r=n(2985),o=n(7743);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},6943:(e,t,n)=>{var r=n(2985),o=n(5960);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},726:(e,t,n)=>{"use strict";var r=n(2985),o=n(1467),i=n(3365),a=n(8595),l=1..toFixed,u=Math.floor,s=[0,0,0,0,0,0],c="Number.toFixed: incorrect invocation!",f="0",d=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*s[n],s[n]=r%1e7,r=u(r/1e7)},p=function(e){for(var t=6,n=0;--t>=0;)n+=s[t],s[t]=u(n/e),n=n%e*1e7},h=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==s[e]){var n=String(s[e]);t=""===t?n:t+a.call(f,7-n.length)+n}return t},v=function(e,t,n){return 0===t?n:t%2==1?v(e,t-1,n*e):v(e*e,t/2,n)};r(r.P+r.F*(!!l&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(4253)((function(){l.call({})}))),"Number",{toFixed:function(e){var t,n,r,l,u=i(this,c),s=o(e),m="",g=f;if(s<0||s>20)throw RangeError(c);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(m="-",u=-u),u>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(u*v(2,69,1))-69)<0?u*v(2,-t,1):u/v(2,t,1),n*=4503599627370496,(t=52-t)>0){for(d(0,n),r=s;r>=7;)d(1e7,0),r-=7;for(d(v(10,r,1),0),r=t-1;r>=23;)p(1<<23),r-=23;p(1<<r),d(1,1),p(2),g=h()}else d(0,n),d(1<<-t,0),g=h()+a.call(f,s);return s>0?m+((l=g.length)<=s?"0."+a.call(f,s-l)+g:g.slice(0,l-s)+"."+g.slice(l-s)):m+g}})},1901:(e,t,n)=>{"use strict";var r=n(2985),o=n(4253),i=n(3365),a=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==a.call(1,void 0)}))||!o((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},5115:(e,t,n)=>{var r=n(2985);r(r.S+r.F,"Object",{assign:n(5345)})},8132:(e,t,n)=>{var r=n(2985);r(r.S,"Object",{create:n(2503)})},7470:(e,t,n)=>{var r=n(2985);r(r.S+r.F*!n(7057),"Object",{defineProperties:n(5588)})},8388:(e,t,n)=>{var r=n(2985);r(r.S+r.F*!n(7057),"Object",{defineProperty:n(9275).f})},9375:(e,t,n)=>{var r=n(5286),o=n(4728).onFreeze;n(3160)("freeze",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},4882:(e,t,n)=>{var r=n(2110),o=n(8693).f;n(3160)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(r(e),t)}}))},9622:(e,t,n)=>{n(3160)("getOwnPropertyNames",(function(){return n(9327).f}))},1520:(e,t,n)=>{var r=n(508),o=n(468);n(3160)("getPrototypeOf",(function(){return function(e){return o(r(e))}}))},9892:(e,t,n)=>{var r=n(5286);n(3160)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},4157:(e,t,n)=>{var r=n(5286);n(3160)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},5095:(e,t,n)=>{var r=n(5286);n(3160)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},9176:(e,t,n)=>{var r=n(2985);r(r.S,"Object",{is:n(7195)})},7476:(e,t,n)=>{var r=n(508),o=n(7184);n(3160)("keys",(function(){return function(e){return o(r(e))}}))},4672:(e,t,n)=>{var r=n(5286),o=n(4728).onFreeze;n(3160)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},3533:(e,t,n)=>{var r=n(5286),o=n(4728).onFreeze;n(3160)("seal",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},8838:(e,t,n)=>{var r=n(2985);r(r.S,"Object",{setPrototypeOf:n(7375).set})},6253:(e,t,n)=>{"use strict";var r=n(1488),o={};o[n(6314)("toStringTag")]="z",o+""!="[object z]"&&n(7234)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},4299:(e,t,n)=>{var r=n(2985),o=n(7743);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},1084:(e,t,n)=>{var r=n(2985),o=n(5960);r(r.G+r.F*(parseInt!=o),{parseInt:o})},851:(e,t,n)=>{"use strict";var r,o,i,a,l=n(4461),u=n(3816),s=n(741),c=n(1488),f=n(2985),d=n(5286),p=n(4963),h=n(3328),v=n(3531),m=n(8364),g=n(4193).set,y=n(4351)(),b=n(3499),w=n(188),x=n(575),S=n(94),E="Promise",k=u.TypeError,C=u.process,A=C&&C.versions,P=A&&A.v8||"",O=u.Promise,R="process"==c(C),_=function(){},N=o=b.f,T=!!function(){try{var e=O.resolve(1),t=(e.constructor={})[n(6314)("species")]=function(e){e(_,_)};return(R||"function"==typeof PromiseRejectionEvent)&&e.then(_)instanceof t&&0!==P.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),M=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},I=function(e,t){if(!e._n){e._n=!0;var n=e._c;y((function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,l=o?t.ok:t.fail,u=t.resolve,s=t.reject,c=t.domain;try{l?(o||(2==e._h&&j(e),e._h=1),!0===l?n=r:(c&&c.enter(),n=l(r),c&&(c.exit(),a=!0)),n===t.promise?s(k("Promise-chain cycle")):(i=M(n))?i.call(n,u,s):u(n)):s(r)}catch(e){c&&!a&&c.exit(),s(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&F(e)}))}},F=function(e){g.call(u,(function(){var t,n,r,o=e._v,i=L(e);if(i&&(t=w((function(){R?C.emit("unhandledRejection",o,e):(n=u.onunhandledrejection)?n({promise:e,reason:o}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",o)})),e._h=R||L(e)?2:1),e._a=void 0,i&&t.e)throw t.v}))},L=function(e){return 1!==e._h&&0===(e._a||e._c).length},j=function(e){g.call(u,(function(){var t;R?C.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},z=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),I(t,!0))},D=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw k("Promise can't be resolved itself");(t=M(e))?y((function(){var r={_w:n,_d:!1};try{t.call(e,s(D,r,1),s(z,r,1))}catch(e){z.call(r,e)}})):(n._v=e,n._s=1,I(n,!1))}catch(e){z.call({_w:n,_d:!1},e)}}};T||(O=function(e){h(this,O,E,"_h"),p(e),r.call(this);try{e(s(D,this,1),s(z,this,1))}catch(e){z.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(4408)(O.prototype,{then:function(e,t){var n=N(m(this,O));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=R?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&I(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=s(D,e,1),this.reject=s(z,e,1)},b.f=N=function(e){return e===O||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!T,{Promise:O}),n(2943)(O,E),n(2974)(E),a=n(5645).Promise,f(f.S+f.F*!T,E,{reject:function(e){var t=N(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(l||!T),E,{resolve:function(e){return S(l&&this===a?O:this,e)}}),f(f.S+f.F*!(T&&n(7462)((function(e){O.all(e).catch(_)}))),E,{all:function(e){var t=this,n=N(t),r=n.resolve,o=n.reject,i=w((function(){var n=[],i=0,a=1;v(e,!1,(function(e){var l=i++,u=!1;n.push(void 0),a++,t.resolve(e).then((function(e){u||(u=!0,n[l]=e,--a||r(n))}),o)})),--a||r(n)}));return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=N(t),r=n.reject,o=w((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return o.e&&r(o.v),n.promise}})},1572:(e,t,n)=>{var r=n(2985),o=n(4963),i=n(7007),a=(n(3816).Reflect||{}).apply,l=Function.apply;r(r.S+r.F*!n(4253)((function(){a((function(){}))})),"Reflect",{apply:function(e,t,n){var r=o(e),u=i(n);return a?a(r,t,u):l.call(r,t,u)}})},2139:(e,t,n)=>{var r=n(2985),o=n(2503),i=n(4963),a=n(7007),l=n(5286),u=n(4253),s=n(4398),c=(n(3816).Reflect||{}).construct,f=u((function(){function e(){}return!(c((function(){}),[],e)instanceof e)})),d=!u((function(){c((function(){}))}));r(r.S+r.F*(f||d),"Reflect",{construct:function(e,t){i(e),a(t);var n=arguments.length<3?e:i(arguments[2]);if(d&&!f)return c(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(s.apply(e,r))}var u=n.prototype,p=o(l(u)?u:Object.prototype),h=Function.apply.call(e,p,t);return l(h)?h:p}})},685:(e,t,n)=>{var r=n(9275),o=n(2985),i=n(7007),a=n(1689);o(o.S+o.F*n(4253)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){i(e),t=a(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},5535:(e,t,n)=>{var r=n(2985),o=n(8693).f,i=n(7007);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},7347:(e,t,n)=>{"use strict";var r=n(2985),o=n(7007),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(9988)(i,"Object",(function(){var e,t=this,n=t._k;do{if(t._i>=n.length)return{value:void 0,done:!0}}while(!((e=n[t._i++])in t._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},6633:(e,t,n)=>{var r=n(8693),o=n(2985),i=n(7007);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},8989:(e,t,n)=>{var r=n(2985),o=n(468),i=n(7007);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},3049:(e,t,n)=>{var r=n(8693),o=n(468),i=n(9181),a=n(2985),l=n(5286),u=n(7007);a(a.S,"Reflect",{get:function e(t,n){var a,s,c=arguments.length<3?t:arguments[2];return u(t)===c?t[n]:(a=r.f(t,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(c):void 0:l(s=o(t))?e(s,n,c):void 0}})},8270:(e,t,n)=>{var r=n(2985);r(r.S,"Reflect",{has:function(e,t){return t in e}})},4510:(e,t,n)=>{var r=n(2985),o=n(7007),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},3984:(e,t,n)=>{var r=n(2985);r(r.S,"Reflect",{ownKeys:n(7643)})},5769:(e,t,n)=>{var r=n(2985),o=n(7007),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},6014:(e,t,n)=>{var r=n(2985),o=n(7375);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},55:(e,t,n)=>{var r=n(9275),o=n(8693),i=n(468),a=n(9181),l=n(2985),u=n(681),s=n(7007),c=n(5286);l(l.S,"Reflect",{set:function e(t,n,l){var f,d,p=arguments.length<4?t:arguments[3],h=o.f(s(t),n);if(!h){if(c(d=i(t)))return e(d,n,l,p);h=u(0)}if(a(h,"value")){if(!1===h.writable||!c(p))return!1;if(f=o.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=l,r.f(p,n,f)}else r.f(p,n,u(0,l));return!0}return void 0!==h.set&&(h.set.call(p,l),!0)}})},3946:(e,t,n)=>{var r=n(3816),o=n(266),i=n(9275).f,a=n(616).f,l=n(5364),u=n(3218),s=r.RegExp,c=s,f=s.prototype,d=/a/g,p=/a/g,h=new s(d)!==d;if(n(7057)&&(!h||n(4253)((function(){return p[n(6314)("match")]=!1,s(d)!=d||s(p)==p||"/a/i"!=s(d,"i")})))){s=function(e,t){var n=this instanceof s,r=l(e),i=void 0===t;return!n&&r&&e.constructor===s&&i?e:o(h?new c(r&&!i?e.source:e,t):c((r=e instanceof s)?e.source:e,r&&i?u.call(e):t),n?this:f,s)};for(var v=function(e){e in s||i(s,e,{configurable:!0,get:function(){return c[e]},set:function(t){c[e]=t}})},m=a(c),g=0;m.length>g;)v(m[g++]);f.constructor=s,s.prototype=f,n(7234)(r,"RegExp",s)}n(2974)("RegExp")},8269:(e,t,n)=>{"use strict";var r=n(1165);n(2985)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},6774:(e,t,n)=>{n(7057)&&"g"!=/./g.flags&&n(9275).f(RegExp.prototype,"flags",{configurable:!0,get:n(3218)})},1466:(e,t,n)=>{"use strict";var r=n(7007),o=n(875),i=n(6793),a=n(7787);n(8082)("match",1,(function(e,t,n,l){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=l(n,e,this);if(t.done)return t.value;var u=r(e),s=String(this);if(!u.global)return a(u,s);var c=u.unicode;u.lastIndex=0;for(var f,d=[],p=0;null!==(f=a(u,s));){var h=String(f[0]);d[p]=h,""===h&&(u.lastIndex=i(s,o(u.lastIndex),c)),p++}return 0===p?null:d}]}))},9357:(e,t,n)=>{"use strict";var r=n(7007),o=n(508),i=n(875),a=n(1467),l=n(6793),u=n(7787),s=Math.max,c=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(8082)("replace",2,(function(e,t,n,h){return[function(r,o){var i=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),d=String(this),p="function"==typeof t;p||(t=String(t));var m=f.global;if(m){var g=f.unicode;f.lastIndex=0}for(var y=[];;){var b=u(f,d);if(null===b)break;if(y.push(b),!m)break;""===String(b[0])&&(f.lastIndex=l(d,i(f.lastIndex),g))}for(var w,x="",S=0,E=0;E<y.length;E++){b=y[E];for(var k=String(b[0]),C=s(c(a(b.index),d.length),0),A=[],P=1;P<b.length;P++)A.push(void 0===(w=b[P])?w:String(w));var O=b.groups;if(p){var R=[k].concat(A,C,d);void 0!==O&&R.push(O);var _=String(t.apply(void 0,R))}else _=v(k,d,C,A,O,t);C>=S&&(x+=d.slice(S,C)+_,S=C+k.length)}return x+d.slice(S)}];function v(e,t,r,i,a,l){var u=r+e.length,s=i.length,c=p;return void 0!==a&&(a=o(a),c=d),n.call(l,c,(function(n,o){var l;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(u);case"<":l=a[o.slice(1,-1)];break;default:var c=+o;if(0===c)return n;if(c>s){var d=f(c/10);return 0===d?n:d<=s?void 0===i[d-1]?o.charAt(1):i[d-1]+o.charAt(1):n}l=i[c-1]}return void 0===l?"":l}))}}))},6142:(e,t,n)=>{"use strict";var r=n(7007),o=n(7195),i=n(7787);n(8082)("search",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var l=r(e),u=String(this),s=l.lastIndex;o(s,0)||(l.lastIndex=0);var c=i(l,u);return o(l.lastIndex,s)||(l.lastIndex=s),null===c?-1:c.index}]}))},1876:(e,t,n)=>{"use strict";var r=n(5364),o=n(7007),i=n(8364),a=n(6793),l=n(875),u=n(7787),s=n(1165),c=n(4253),f=Math.min,d=[].push,p=4294967295,h=!c((function(){RegExp(p,"y")}));n(8082)("split",2,(function(e,t,n,c){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,a,l,u=[],c=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,h=void 0===t?p:t>>>0,v=new RegExp(e.source,c+"g");(i=s.call(v,o))&&!((a=v.lastIndex)>f&&(u.push(o.slice(f,i.index)),i.length>1&&i.index<o.length&&d.apply(u,i.slice(1)),l=i[0].length,f=a,u.length>=h));)v.lastIndex===i.index&&v.lastIndex++;return f===o.length?!l&&v.test("")||u.push(""):u.push(o.slice(f)),u.length>h?u.slice(0,h):u}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):v.call(String(o),n,r)},function(e,t){var r=c(v,e,this,t,v!==n);if(r.done)return r.value;var s=o(e),d=String(this),m=i(s,RegExp),g=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(h?"y":"g"),b=new m(h?s:"^(?:"+s.source+")",y),w=void 0===t?p:t>>>0;if(0===w)return[];if(0===d.length)return null===u(b,d)?[d]:[];for(var x=0,S=0,E=[];S<d.length;){b.lastIndex=h?S:0;var k,C=u(b,h?d:d.slice(S));if(null===C||(k=f(l(b.lastIndex+(h?0:S)),d.length))===x)S=a(d,S,g);else{if(E.push(d.slice(x,S)),E.length===w)return E;for(var A=1;A<=C.length-1;A++)if(E.push(C[A]),E.length===w)return E;S=x=k}}return E.push(d.slice(x)),E}]}))},6108:(e,t,n)=>{"use strict";n(6774);var r=n(7007),o=n(3218),i=n(7057),a="toString",l=/./.toString,u=function(e){n(7234)(RegExp.prototype,a,e,!0)};n(4253)((function(){return"/a/b"!=l.call({source:"a",flags:"b"})}))?u((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)})):l.name!=a&&u((function(){return l.call(this)}))},8184:(e,t,n)=>{"use strict";var r=n(9824),o=n(1616);e.exports=n(5795)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},856:(e,t,n)=>{"use strict";n(9395)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},703:(e,t,n)=>{"use strict";n(9395)("big",(function(e){return function(){return e(this,"big","","")}}))},1539:(e,t,n)=>{"use strict";n(9395)("blink",(function(e){return function(){return e(this,"blink","","")}}))},5292:(e,t,n)=>{"use strict";n(9395)("bold",(function(e){return function(){return e(this,"b","","")}}))},9539:(e,t,n)=>{"use strict";var r=n(2985),o=n(4496)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},6620:(e,t,n)=>{"use strict";var r=n(2985),o=n(875),i=n(2094),a="endsWith",l="".endsWith;r(r.P+r.F*n(8852)(a),"String",{endsWith:function(e){var t=i(this,e,a),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),s=String(e);return l?l.call(t,s,u):t.slice(u-s.length,u)===s}})},6629:(e,t,n)=>{"use strict";n(9395)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},3694:(e,t,n)=>{"use strict";n(9395)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},7648:(e,t,n)=>{"use strict";n(9395)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},191:(e,t,n)=>{var r=n(2985),o=n(2337),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},2850:(e,t,n)=>{"use strict";var r=n(2985),o=n(2094),i="includes";r(r.P+r.F*n(8852)(i),"String",{includes:function(e){return!!~o(this,e,i).indexOf(e,arguments.length>1?arguments[1]:void 0)}})},7795:(e,t,n)=>{"use strict";n(9395)("italics",(function(e){return function(){return e(this,"i","","")}}))},9115:(e,t,n)=>{"use strict";var r=n(4496)(!0);n(2923)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},4531:(e,t,n)=>{"use strict";n(9395)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},8306:(e,t,n)=>{var r=n(2985),o=n(2110),i=n(875);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,a=[],l=0;n>l;)a.push(String(t[l++])),l<r&&a.push(String(arguments[l]));return a.join("")}})},823:(e,t,n)=>{var r=n(2985);r(r.P,"String",{repeat:n(8595)})},3605:(e,t,n)=>{"use strict";n(9395)("small",(function(e){return function(){return e(this,"small","","")}}))},7732:(e,t,n)=>{"use strict";var r=n(2985),o=n(875),i=n(2094),a="startsWith",l="".startsWith;r(r.P+r.F*n(8852)(a),"String",{startsWith:function(e){var t=i(this,e,a),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return l?l.call(t,r,n):t.slice(n,n+r.length)===r}})},6780:(e,t,n)=>{"use strict";n(9395)("strike",(function(e){return function(){return e(this,"strike","","")}}))},9937:(e,t,n)=>{"use strict";n(9395)("sub",(function(e){return function(){return e(this,"sub","","")}}))},511:(e,t,n)=>{"use strict";n(9395)("sup",(function(e){return function(){return e(this,"sup","","")}}))},4564:(e,t,n)=>{"use strict";n(9599)("trim",(function(e){return function(){return e(this,3)}}))},5767:(e,t,n)=>{"use strict";var r=n(3816),o=n(9181),i=n(7057),a=n(2985),l=n(7234),u=n(4728).KEY,s=n(4253),c=n(3825),f=n(2943),d=n(3953),p=n(6314),h=n(8787),v=n(6074),m=n(5541),g=n(4302),y=n(7007),b=n(5286),w=n(508),x=n(2110),S=n(1689),E=n(681),k=n(2503),C=n(9327),A=n(8693),P=n(4548),O=n(9275),R=n(7184),_=A.f,N=O.f,T=C.f,M=r.Symbol,I=r.JSON,F=I&&I.stringify,L=p("_hidden"),j=p("toPrimitive"),z={}.propertyIsEnumerable,D=c("symbol-registry"),B=c("symbols"),W=c("op-symbols"),U=Object.prototype,V="function"==typeof M&&!!P.f,$=r.QObject,H=!$||!$.prototype||!$.prototype.findChild,q=i&&s((function(){return 7!=k(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=_(U,t);r&&delete U[t],N(e,t,n),r&&e!==U&&N(U,t,r)}:N,K=function(e){var t=B[e]=k(M.prototype);return t._k=e,t},Q=V&&"symbol"==typeof M.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof M},Y=function(e,t,n){return e===U&&Y(W,t,n),y(e),t=S(t,!0),y(n),o(B,t)?(n.enumerable?(o(e,L)&&e[L][t]&&(e[L][t]=!1),n=k(n,{enumerable:E(0,!1)})):(o(e,L)||N(e,L,E(1,{})),e[L][t]=!0),q(e,t,n)):N(e,t,n)},G=function(e,t){y(e);for(var n,r=m(t=x(t)),o=0,i=r.length;i>o;)Y(e,n=r[o++],t[n]);return e},X=function(e){var t=z.call(this,e=S(e,!0));return!(this===U&&o(B,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,L)&&this[L][e])||t)},J=function(e,t){if(e=x(e),t=S(t,!0),e!==U||!o(B,t)||o(W,t)){var n=_(e,t);return!n||!o(B,t)||o(e,L)&&e[L][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=T(x(e)),r=[],i=0;n.length>i;)o(B,t=n[i++])||t==L||t==u||r.push(t);return r},ee=function(e){for(var t,n=e===U,r=T(n?W:x(e)),i=[],a=0;r.length>a;)!o(B,t=r[a++])||n&&!o(U,t)||i.push(B[t]);return i};V||(l((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===U&&t.call(W,n),o(this,L)&&o(this[L],e)&&(this[L][e]=!1),q(this,e,E(1,n))};return i&&H&&q(U,e,{configurable:!0,set:t}),K(e)}).prototype,"toString",(function(){return this._k})),A.f=J,O.f=Y,n(616).f=C.f=Z,n(4682).f=X,P.f=ee,i&&!n(4461)&&l(U,"propertyIsEnumerable",X,!0),h.f=function(e){return K(p(e))}),a(a.G+a.W+a.F*!V,{Symbol:M});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)p(te[ne++]);for(var re=R(p.store),oe=0;re.length>oe;)v(re[oe++]);a(a.S+a.F*!V,"Symbol",{for:function(e){return o(D,e+="")?D[e]:D[e]=M(e)},keyFor:function(e){if(!Q(e))throw TypeError(e+" is not a symbol!");for(var t in D)if(D[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!V,"Object",{create:function(e,t){return void 0===t?k(e):G(k(e),t)},defineProperty:Y,defineProperties:G,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ie=s((function(){P.f(1)}));a(a.S+a.F*ie,"Object",{getOwnPropertySymbols:function(e){return P.f(w(e))}}),I&&a(a.S+a.F*(!V||s((function(){var e=M();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!Q(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!Q(t))return t}),r[1]=t,F.apply(I,r)}}),M.prototype[j]||n(7728)(M.prototype,j,M.prototype.valueOf),f(M,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},142:(e,t,n)=>{"use strict";var r=n(2985),o=n(9383),i=n(1125),a=n(7007),l=n(2337),u=n(875),s=n(5286),c=n(3816).ArrayBuffer,f=n(8364),d=i.ArrayBuffer,p=i.DataView,h=o.ABV&&c.isView,v=d.prototype.slice,m=o.VIEW,g="ArrayBuffer";r(r.G+r.W+r.F*(c!==d),{ArrayBuffer:d}),r(r.S+r.F*!o.CONSTR,g,{isView:function(e){return h&&h(e)||s(e)&&m in e}}),r(r.P+r.U+r.F*n(4253)((function(){return!new d(2).slice(1,void 0).byteLength})),g,{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(a(this),e);for(var n=a(this).byteLength,r=l(e,n),o=l(void 0===t?n:t,n),i=new(f(this,d))(u(o-r)),s=new p(this),c=new p(i),h=0;r<o;)c.setUint8(h++,s.getUint8(r++));return i}}),n(2974)(g)},1786:(e,t,n)=>{var r=n(2985);r(r.G+r.W+r.F*!n(9383).ABV,{DataView:n(1125).DataView})},162:(e,t,n)=>{n(8440)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},3834:(e,t,n)=>{n(8440)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},4821:(e,t,n)=>{n(8440)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},1303:(e,t,n)=>{n(8440)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},5368:(e,t,n)=>{n(8440)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},9103:(e,t,n)=>{n(8440)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},3318:(e,t,n)=>{n(8440)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},6964:(e,t,n)=>{n(8440)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},2152:(e,t,n)=>{n(8440)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},147:(e,t,n)=>{"use strict";var r,o=n(3816),i=n(50)(0),a=n(7234),l=n(4728),u=n(5345),s=n(3657),c=n(5286),f=n(1616),d=n(1616),p=!o.ActiveXObject&&"ActiveXObject"in o,h="WeakMap",v=l.getWeak,m=Object.isExtensible,g=s.ufstore,y=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(e){if(c(e)){var t=v(e);return!0===t?g(f(this,h)).get(e):t?t[this._i]:void 0}},set:function(e,t){return s.def(f(this,h),e,t)}},w=e.exports=n(5795)(h,y,b,s,!0,!0);d&&p&&(u((r=s.getConstructor(y,h)).prototype,b),l.NEED=!0,i(["delete","has","get","set"],(function(e){var t=w.prototype,n=t[e];a(t,e,(function(t,o){if(c(t)&&!m(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)}))})))},9192:(e,t,n)=>{"use strict";var r=n(3657),o=n(1616),i="WeakSet";n(5795)(i,(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,i),e,!0)}},r,!1,!0)},1268:(e,t,n)=>{"use strict";var r=n(2985),o=n(3325),i=n(508),a=n(875),l=n(4963),u=n(6886);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return l(e),t=a(r.length),n=u(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(7722)("flatMap")},2773:(e,t,n)=>{"use strict";var r=n(2985),o=n(9315)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(7722)("includes")},3276:(e,t,n)=>{var r=n(2985),o=n(1131)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},8351:(e,t,n)=>{var r=n(2985),o=n(7643),i=n(2110),a=n(8693),l=n(2811);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),u=a.f,s=o(r),c={},f=0;s.length>f;)void 0!==(n=u(r,t=s[f++]))&&l(c,t,n);return c}})},6409:(e,t,n)=>{var r=n(2985),o=n(1131)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},9865:(e,t,n)=>{"use strict";var r=n(2985),o=n(5645),i=n(3816),a=n(8364),l=n(94);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return l(t,e()).then((function(){return n}))}:e,n?function(n){return l(t,e()).then((function(){throw n}))}:e)}})},2770:(e,t,n)=>{"use strict";var r=n(2985),o=n(5442),i=n(575),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},1784:(e,t,n)=>{"use strict";var r=n(2985),o=n(5442),i=n(575),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},5869:(e,t,n)=>{"use strict";n(9599)("trimLeft",(function(e){return function(){return e(this,1)}}),"trimStart")},4325:(e,t,n)=>{"use strict";n(9599)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},9665:(e,t,n)=>{n(6074)("asyncIterator")},1181:(e,t,n)=>{for(var r=n(6997),o=n(7184),i=n(7234),a=n(3816),l=n(7728),u=n(2803),s=n(6314),c=s("iterator"),f=s("toStringTag"),d=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),v=0;v<h.length;v++){var m,g=h[v],y=p[g],b=a[g],w=b&&b.prototype;if(w&&(w[c]||l(w,c,d),w[f]||l(w,f,g),u[g]=d,y))for(m in r)w[m]||i(w,m,r[m],!0)}},4633:(e,t,n)=>{var r=n(2985),o=n(4193);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},2564:(e,t,n)=>{var r=n(3816),o=n(2985),i=n(575),a=[].slice,l=/MSIE .\./.test(i),u=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*l,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},6337:(e,t,n)=>{n(2564),n(4633),n(1181),e.exports=n(5645)},8287:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,'.Yn3g4aJKip-2Yx-AHmsyr:before{content:"";position:absolute;top:0;left:0;width:100%;height:100%;border-radius:10px;background:rgba(255,255,255,.5);cursor:wait}.Yn3g4aJKip-2Yx-AHmsyr:after{content:"";display:block;width:50px;height:50px;border-radius:50%;-webkit-animation:_3ba5Dhd54scpsDY1IQCx2Z .7s linear infinite;animation:_3ba5Dhd54scpsDY1IQCx2Z .7s linear infinite;border:5px solid #fff;box-sizing:border-box;box-shadow:0 0 12px rgba(0,0,0,.2);border-top-color:#146aec;cursor:wait}@-webkit-keyframes _3ba5Dhd54scpsDY1IQCx2Z{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes _3ba5Dhd54scpsDY1IQCx2Z{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}',"",{version:3,sources:["webpack://./src/components/Loader/Loader.module.scss"],names:[],mappings:"AACI,8BACI,UAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CAEA,kBAAA,CACA,+BAAA,CACA,WAAA,CAEJ,6BACI,UAAA,CACA,aAAA,CACA,UAAA,CACA,WAAA,CAEA,iBAAA,CACA,6DAAA,CACA,qDAAA,CACA,qBAAA,CAGA,qBAAA,CAEA,kCAAA,CACA,wBAAA,CACA,WAAA,CAIR,2CACI,GAKI,sBAAA,CAEJ,KAKI,wBAAA,CAAA,CAmCR,mCACI,GAKI,sBAAA,CAEJ,KAKI,wBAAA,CAAA",sourcesContent:[".loading {\r\n    &:before {\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        -webkit-border-radius: 10px;\r\n        border-radius: 10px;\r\n        background: rgba(255, 255, 255, 0.5);\r\n        cursor: wait;\r\n    }\r\n    &:after {\r\n        content: '';\r\n        display: block;\r\n        width: 50px;\r\n        height: 50px;\r\n        -webkit-border-radius: 50%;\r\n        border-radius: 50%;\r\n        -webkit-animation: spin 0.7s linear infinite;\r\n        animation: spin 0.7s linear infinite;\r\n        border: 5px solid #fff;\r\n        -webkit-box-sizing: border-box;\r\n        -moz-box-sizing: border-box;\r\n        box-sizing: border-box;\r\n        -webkit-box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);\r\n        box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);\r\n        border-top-color: #146aec;\r\n        cursor: wait;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes spin {\r\n    0% {\r\n        -moz-transform: rotate(0deg);\r\n        -ms-transform: rotate(0deg);\r\n        -webkit-transform: rotate(0deg);\r\n        -o-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        -moz-transform: rotate(360deg);\r\n        -ms-transform: rotate(360deg);\r\n        -webkit-transform: rotate(360deg);\r\n        -o-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n@-moz-keyframes spin {\r\n    0% {\r\n        -moz-transform: rotate(0deg);\r\n        -ms-transform: rotate(0deg);\r\n        -webkit-transform: rotate(0deg);\r\n        -o-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        -moz-transform: rotate(360deg);\r\n        -ms-transform: rotate(360deg);\r\n        -webkit-transform: rotate(360deg);\r\n        -o-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n@-o-keyframes spin {\r\n    0% {\r\n        -moz-transform: rotate(0deg);\r\n        -ms-transform: rotate(0deg);\r\n        -webkit-transform: rotate(0deg);\r\n        -o-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        -moz-transform: rotate(360deg);\r\n        -ms-transform: rotate(360deg);\r\n        -webkit-transform: rotate(360deg);\r\n        -o-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n@keyframes spin {\r\n    0% {\r\n        -moz-transform: rotate(0deg);\r\n        -ms-transform: rotate(0deg);\r\n        -webkit-transform: rotate(0deg);\r\n        -o-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n    100% {\r\n        -moz-transform: rotate(360deg);\r\n        -ms-transform: rotate(360deg);\r\n        -webkit-transform: rotate(360deg);\r\n        -o-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n"],sourceRoot:""}]),a.locals={loading:"Yn3g4aJKip-2Yx-AHmsyr",spin:"_3ba5Dhd54scpsDY1IQCx2Z"};const l=a},8533:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"._1QmXiyixc2HOxfqg_Hz642{display:flex;align-items:center;justify-content:center;width:100%;height:50px;margin:0 0 30px;padding:0 20px;line-height:50px;background:#fff7ed;border-radius:5px;font-weight:700;font-size:17px;color:#1a1a1a;box-sizing:border-box}.UYx4V3xUEFk8SQS4av9Vf{display:grid;grid-column-gap:30px;grid-row-gap:20px;grid-template-columns:repeat(auto-fill, 215px);justify-content:center;width:100%;margin-bottom:80px}.eeabtvTWQjoBpZe66kFqq{display:flex;flex-direction:column;align-items:center;width:215px;padding-top:40px;border-radius:10px;background:#f9f9fb;color:#333}.as5us8e9dRfnXzxsGnOae{max-width:80%;margin:20px 0 15px;font-weight:800;line-height:19px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}","",{version:3,sources:["webpack://./src/components/Results/Results.module.scss"],names:[],mappings:"AAAA,yBACI,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,kBAAA,CAEA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,aAAA,CAGA,qBAAA,CAEJ,uBACI,YAAA,CACA,oBAAA,CACA,iBAAA,CACA,8CAAA,CACA,sBAAA,CACA,UAAA,CACA,kBAAA,CACA,uBACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,WAAA,CACA,gBAAA,CAEA,kBAAA,CACA,kBAAA,CACA,UAAA,CACA,uBACI,aAAA,CACA,kBAAA,CACA,eAAA,CACA,gBAAA,CACA,sBAAA,CACA,kBAAA,CACA,eAAA",sourcesContent:[".found_number {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 50px;\r\n    margin: 0 0 30px;\r\n    padding: 0 20px;\r\n    line-height: 50px;\r\n    background: #fff7ed;\r\n    -webkit-border-radius: 5px;\r\n    border-radius: 5px;\r\n    font-weight: 700;\r\n    font-size: 17px;\r\n    color: #1a1a1a;\r\n    -webkit-box-sizing: border-box;\r\n    -moz-box-sizing: border-box;\r\n    box-sizing: border-box;\r\n}\r\n.results {\r\n    display: grid;\r\n    grid-column-gap: 30px;\r\n    grid-row-gap: 20px;\r\n    grid-template-columns: repeat(auto-fill, 215px);\r\n    justify-content: center;\r\n    width: 100%;\r\n    margin-bottom: 80px;\r\n    &_item {\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        width: 215px;\r\n        padding-top: 40px;\r\n        -webkit-border-radius: 10px;\r\n        border-radius: 10px;\r\n        background: #f9f9fb;\r\n        color: #333;\r\n        &_login {\r\n            max-width: 80%;\r\n            margin: 20px 0 15px;\r\n            font-weight: 800;\r\n            line-height: 19px;\r\n            text-overflow: ellipsis;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n        }\r\n    }\r\n}\r\n"],sourceRoot:""}]),a.locals={found_number:"_1QmXiyixc2HOxfqg_Hz642",results:"UYx4V3xUEFk8SQS4av9Vf",results_item:"eeabtvTWQjoBpZe66kFqq",results_item_login:"as5us8e9dRfnXzxsGnOae"};const l=a},3659:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i)()(o());a.push([e.id,"._3XfRFpWDtxZxomLvsVmHTY{display:flex;width:100%;margin:50px 0 30px}","",{version:3,sources:["webpack://./src/components/Search/Search.module.scss"],names:[],mappings:"AAAA,yBACI,YAAA,CACA,UAAA,CACA,kBAAA",sourcesContent:[".search {\r\n    display: flex;\r\n    width: 100%;\r\n    margin: 50px 0 30px;\r\n}\r\n"],sourceRoot:""}]),a.locals={search:"_3XfRFpWDtxZxomLvsVmHTY"};const l=a},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),s="/*# ".concat(u," */"),c=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(c).concat([s]).join("\n")}return[i].join("\n")}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),v=u(n),m=0;m<a.length;++m){var g=a[m];if(!(i[g]||r&&r[g]||v&&v[g]||l&&l[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,u=o(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(u[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,E=60106,k=60107,C=60108,A=60114,P=60109,O=60110,R=60112,_=60113,N=60120,T=60115,M=60116,I=60121,F=60128,L=60129,j=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;S=D("react.element"),E=D("react.portal"),k=D("react.fragment"),C=D("react.strict_mode"),A=D("react.profiler"),P=D("react.provider"),O=D("react.context"),R=D("react.forward_ref"),_=D("react.suspense"),N=D("react.suspense_list"),T=D("react.memo"),M=D("react.lazy"),I=D("react.block"),D("react.scope"),F=D("react.opaque.id"),L=D("react.debug_trace_mode"),j=D("react.offscreen"),z=D("react.legacy_hidden")}var B,W="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function V(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var $=!1;function H(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function q(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case E:return"Portal";case A:return"Profiler";case C:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case R:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case T:return K(e.type);case I:return K(e._render);case M:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function se(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,me=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ke(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,Pe=null,Oe=null;function Re(e){if(e=Zr(e)){if("function"!=typeof Ae)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),Ae(e.stateNode,e.type,t))}}function _e(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ne(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Te(e,t){return e(t)}function Me(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var Fe=Te,Le=!1,je=!1;function ze(){null===Pe&&null===Oe||(Ie(),Ne())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(f)try{var We={};Object.defineProperty(We,"passive",{get:function(){Be=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(ve){Be=!1}function Ue(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ve=!1,$e=null,He=!1,qe=null,Ke={onError:function(e){Ve=!0,$e=e}};function Qe(e,t,n,r,o,i,a,l,u){Ve=!1,$e=null,Ue.apply(Ke,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ye(e)!==e)throw Error(a(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Xe(o),e;if(i===r)return Xe(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Jr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function xt(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)mt(n),null===n.blockedOn&&ft.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},kt={},Ct={};function At(e){if(kt[e])return kt[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return kt[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Pt=At("animationend"),Ot=At("animationiteration"),Rt=At("animationstart"),_t=At("transitionend"),Nt=new Map,Tt=new Map,Mt=["abort","abort",Pt,"animationEnd",Ot,"animationIteration",Rt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",_t,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Tt.set(r,t),Nt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var Ft=8;function Lt(e){if(0!=(1&e))return Ft=15,1;if(0!=(2&e))return Ft=14,2;if(0!=(4&e))return Ft=13,4;var t=24&e;return 0!==t?(Ft=12,t):0!=(32&e)?(Ft=11,32):0!=(t=192&e)?(Ft=10,t):0!=(256&e)?(Ft=9,256):0!=(t=3584&e)?(Ft=8,t):0!=(4096&e)?(Ft=7,4096):0!=(t=4186112&e)?(Ft=6,t):0!=(t=62914560&e)?(Ft=5,t):67108864&e?(Ft=4,67108864):0!=(134217728&e)?(Ft=3,134217728):0!=(t=805306368&e)?(Ft=2,t):0!=(1073741824&e)?(Ft=1,1073741824):(Ft=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return Ft=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=Ft=15;else if(0!=(i=134217727&n)){var u=i&~a;0!==u?(r=Lt(u),o=Ft):0!=(l&=i)&&(r=Lt(l),o=Ft)}else 0!=(i=n&~a)?(r=Lt(i),o=Ft):0!==l&&(r=Lt(l),o=Ft);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Lt(t),o<=Ft)return t;Ft=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Dt(10,t):e;case 10:return 0===(e=Bt(192&~t))?Dt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Wt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Ht|0)|0},$t=Math.log,Ht=Math.LN2,qt=i.unstable_UserBlockingPriority,Kt=i.unstable_runWithPriority,Qt=!0;function Yt(e,t,n,r){Le||Ie();var o=Xt,i=Le;Le=!0;try{Me(o,e,t,n,r)}finally{(Le=i)||ze()}}function Gt(e,t,n,r){Kt(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=vt(at,e,t,n,r,o),!0;case"dragenter":return lt=vt(lt,e,t,n,r,o),!0;case"mouseover":return ut=vt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,vt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,vt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Ce(r);if(null!==(o=Jr(o))){var i=Ye(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ge(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),vn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:An,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),mn=ln(vn),gn=ln(o({},vn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xn=ln(o({},fn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function An(){return Cn}var Pn=ln(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:An,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),On=ln(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:An})),_n=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=ln(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Tn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Fn=f&&"TextEvent"in window&&!In,Ln=f&&(!Mn||In&&8<In&&11>=In),jn=String.fromCharCode(32),zn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function $n(e,t,n,r){_e(r),0<(t=Mr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Kn(e){Cr(e,0)}function Qn(e){if(X(eo(e)))return e}function Yn(e,t){if("change"===e)return t}var Gn=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;Gn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Hn&&(Hn.detachEvent("onpropertychange",tr),qn=Hn=null)}function tr(e){if("value"===e.propertyName&&Qn(qn)){var t=[];if($n(t,qn,e,Ce(e)),e=Kn,Le)e(t);else{Le=!0;try{Te(e,t)}finally{Le=!1,ze()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,(Hn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(qn)}function or(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,mr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==vr||vr!==J(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Mr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Mt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<wr.length;xr++)Tt.set(wr[xr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function kr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(Qe.apply(this,arguments),Ve){if(!Ve)throw Error(a(198));var c=$e;Ve=!1,$e=null,He||(He=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;kr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;kr(o,l,s),i=u}}}if(He)throw e=qe,He=!1,qe=null,e}function Ar(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(_r(t,e,2,!1),n.add(r))}var Pr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Pr]||(e[Pr]=!0,l.forEach((function(t){Er.has(t)||Rr(t,!1,e,null),Rr(t,!0,e,null)})))}function Rr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),_r(i,e,o,t),a.add(l))}function _r(e,t,n,r){var o=Tt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Gt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Jr(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(je)return e();je=!0;try{Fe(e,t,n)}finally{je=!1,ze()}}((function(){var r=i,o=Ce(n),a=[];e:{var l=Nt.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Pn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Rn;break;case Pt:case Ot:case Rt:u=bn;break;case _t:u=_n;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=De(h,d))&&c.push(Tr(h,v,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Jr(s)&&!s[Gr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Jr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(v,h+"leave",u,n,o)).target=f,l.relatedTarget=p,v=null,Jr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,v=c),f=v,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Ir(p))h++;for(p=0,v=d;v;v=Ir(v))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==u&&Fr(a,l,u,c,!1),null!==s&&null!==f&&Fr(a,f,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var m=Yn;else if(Vn(l))if(Gn)m=ir;else{m=rr;var g=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=or);switch(m&&(m=m(e,r))?$n(a,m,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?eo(r):window,e){case"focusin":(Vn(g)||"true"===g.contentEditable)&&(vr=g,mr=r,gr=null);break;case"focusout":gr=mr=vr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(a,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(a,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Dn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Wn=!0)),0<(g=Mr(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:g}),(y||null!==(y=Bn(n)))&&(b.data=y))),(y=Fn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(zn=!0,jn);case"textInput":return(e=t.data)===jn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Mn&&Dn(e,t)?(e=nn(),tn=en=Zt=null,Wn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Cr(a,t)}))}function Tr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=De(e,n))&&r.unshift(Tr(e,i,o)),null!=(i=De(e,t))&&r.push(Tr(e,i,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Fr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=De(n,i))&&a.unshift(Tr(n,u,l)):o||null!=(u=De(n,i))&&a.push(Tr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Lr(){}var jr=null,zr=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function $r(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,Kr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+Kr,Yr="__reactProps$"+Kr,Gr="__reactContainer$"+Kr,Xr="__reactEvents$"+Kr;function Jr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Qr]||e[Gr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[Yr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=io(uo),co=io(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=e.childContextTypes}function vo(){ao(co),ao(so)}function mo(e,t,n){if(so.current!==uo)throw Error(a(168));lo(so,t),lo(co,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,K(t)||"Unknown",i));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=go(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(so),lo(so,e)):ao(co),lo(co,n)}var wo=null,xo=null,So=i.unstable_runWithPriority,Eo=i.unstable_scheduleCallback,ko=i.unstable_cancelCallback,Co=i.unstable_shouldYield,Ao=i.unstable_requestPaint,Po=i.unstable_now,Oo=i.unstable_getCurrentPriorityLevel,Ro=i.unstable_ImmediatePriority,_o=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,To=i.unstable_LowPriority,Mo=i.unstable_IdlePriority,Io={},Fo=void 0!==Ao?Ao:function(){},Lo=null,jo=null,zo=!1,Do=Po(),Bo=1e4>Do?Po:function(){return Po()-Do};function Wo(){switch(Oo()){case Ro:return 99;case _o:return 98;case No:return 97;case To:return 96;case Mo:return 95;default:throw Error(a(332))}}function Uo(e){switch(e){case 99:return Ro;case 98:return _o;case 97:return No;case 96:return To;case 95:return Mo;default:throw Error(a(332))}}function Vo(e,t){return e=Uo(e),So(e,t)}function $o(e,t,n){return e=Uo(e),Eo(e,t,n)}function Ho(){if(null!==jo){var e=jo;jo=null,ko(e)}qo()}function qo(){if(!zo&&null!==Lo){zo=!0;var e=0;try{var t=Lo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Lo=null}catch(t){throw null!==Lo&&(Lo=Lo.slice(e+1)),Eo(Ro,Ho),t}finally{zo=!1}}}var Ko=x.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Yo=io(null),Go=null,Xo=null,Jo=null;function Zo(){Jo=Xo=Go=null}function ei(e){var t=Yo.current;ao(Yo),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){Go=e,Jo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ma=!0),e.firstContext=null)}function ri(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Go)throw Error(a(308));Xo=t,Go.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function li(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,l=0,f=c=s=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,v=a;switch(u=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=v.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Fl|=l,e.lanes=l,e.memoizedState=d}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var di=(new r.Component).refs;function pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=au(),o=lu(e),i=li(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=au(),o=lu(e),i=li(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=au(),r=lu(e),o=li(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),uu(e,r,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function mi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=ho(t)?fo:so.current,i=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function yi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=di,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=ho(t)?fo:so.current,o.context=po(e,i)),ci(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(pi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),ci(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var bi=Array.isArray;function wi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function xi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Si(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Du(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Vu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wi(e,t,n),r.return=e,r):((r=Bu(n.type,n.key,n.props,null,e.mode,r)).ref=wi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$u(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Wu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Bu(t.type,t.key,t.props,null,e.mode,n)).ref=wi(e,null,t),n.return=e,n;case E:return(t=$u(t,e.mode,n)).return=e,t}if(bi(t)||U(t))return(t=Wu(t,e.mode,n,null)).return=e,t;xi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===k?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(bi(n)||U(n))return null!==o?null:f(e,t,n,r,null);xi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===k?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(bi(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);xi(t,r)}return null}function v(o,a,l,u){for(var s=null,c=null,f=a,v=a=0,m=null;null!==f&&v<l.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(o,f,l[v],u);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,v),null===c?s=g:c.sibling=g,c=g,f=m}if(v===l.length)return n(o,f),s;if(null===f){for(;v<l.length;v++)null!==(f=d(o,l[v],u))&&(a=i(f,a,v),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);v<l.length;v++)null!==(m=h(f,o,v,l[v],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=i(m,a,v),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(o,e)})),s}function m(o,l,u,s){var c=U(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,v=l,m=l=0,g=null,y=u.next();null!==v&&!y.done;m++,y=u.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=p(o,v,y.value,s);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(o,v),l=i(b,l,m),null===f?c=b:f.sibling=b,f=b,v=g}if(y.done)return n(o,v),c;if(null===v){for(;!y.done;m++,y=u.next())null!==(y=d(o,y.value,s))&&(l=i(y,l,m),null===f?c=y:f.sibling=y,f=y);return c}for(v=r(o,v);!y.done;m++,y=u.next())null!==(y=h(v,o,m,y.value,s))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),l=i(y,l,m),null===f?c=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===k&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case S:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===k){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=wi(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===k?((r=Wu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Bu(i.type,i.key,i.props,null,e.mode,u)).ref=wi(e,r,i),u.return=e,e=u)}return l(e);case E:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$u(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Vu(i,e.mode,u)).return=e,e=r),l(e);if(bi(i))return v(e,r,i,u);if(U(i))return m(e,r,i,u);if(c&&xi(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,K(e.type)||"Component"))}return n(e,r)}}var Ei=Si(!0),ki=Si(!1),Ci={},Ai=io(Ci),Pi=io(Ci),Oi=io(Ci);function Ri(e){if(e===Ci)throw Error(a(174));return e}function _i(e,t){switch(lo(Oi,t),lo(Pi,e),lo(Ai,Ci),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Ai),lo(Ai,t)}function Ni(){ao(Ai),ao(Pi),ao(Oi)}function Ti(e){Ri(Oi.current);var t=Ri(Ai.current),n=pe(t,e.type);t!==n&&(lo(Pi,e),lo(Ai,n))}function Mi(e){Pi.current===e&&(ao(Ai),ao(Pi))}var Ii=io(0);function Fi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Li=null,ji=null,zi=!1;function Di(e,t){var n=ju(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Bi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Wi(e){if(zi){var t=ji;if(t){var n=t;if(!Bi(e,t)){if(!(t=$r(n.nextSibling))||!Bi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Li=e);Di(Li,n)}Li=e,ji=$r(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Li=e}}function Ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Li=e}function Vi(e){if(e!==Li)return!1;if(!zi)return Ui(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Br(t,e.memoizedProps))for(t=ji;t;)Di(e,t),t=$r(t.nextSibling);if(Ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ji=$r(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ji=null}}else ji=Li?$r(e.stateNode.nextSibling):null;return!0}function $i(){ji=Li=null,zi=!1}var Hi=[];function qi(){for(var e=0;e<Hi.length;e++)Hi[e]._workInProgressVersionPrimary=null;Hi.length=0}var Ki=x.ReactCurrentDispatcher,Qi=x.ReactCurrentBatchConfig,Yi=0,Gi=null,Xi=null,Ji=null,Zi=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(Yi=i,Gi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ki.current=null===e||null===e.memoizedState?Ra:_a,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Ji=Xi=null,t.updateQueue=null,Ki.current=Na,e=n(r,o)}while(ea)}if(Ki.current=Oa,t=null!==Xi&&null!==Xi.next,Yi=0,Ji=Xi=Gi=null,Zi=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ji?Gi.memoizedState=Ji=e:Ji=Ji.next=e,Ji}function ia(){if(null===Xi){var e=Gi.alternate;e=null!==e?e.memoizedState:null}else e=Xi.next;var t=null===Ji?Gi.memoizedState:Ji.next;if(null!==t)Ji=t,Xi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Xi=e).memoizedState,baseState:Xi.baseState,baseQueue:Xi.baseQueue,queue:Xi.queue,next:null},null===Ji?Gi.memoizedState=Ji=e:Ji=Ji.next=e}return Ji}function aa(e,t){return"function"==typeof t?t(e):t}function la(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Xi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.lane;if((Yi&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,Gi.lanes|=c,Fl|=c}s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,ar(r,t.memoizedState)||(Ma=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ar(i,t.memoizedState)||(Ma=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function sa(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Yi&e)===e)&&(t._workInProgressVersionPrimary=r,Hi.push(t))),e)return n(t._source);throw Hi.push(t),Error(a(350))}function ca(e,t,n,r){var o=Pl;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),u=Ki.current,s=u.useState((function(){return sa(o,t,n)})),c=s[1],f=s[0];s=Ji;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var m=Gi;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(l,e)){e=n(t._source),ar(f,e)||(c(e),e=lu(m),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-Vt(a),s=1<<u;r[u]|=e,a&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(m);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(v,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:f}).dispatch=c=Pa.bind(null,Gi,e),s.queue=e,s.baseQueue=null,f=sa(o,t,n),s.memoizedState=s.baseState=f),f}function fa(e,t,n){return ca(ia(),e,t,n)}function da(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Pa.bind(null,Gi,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Gi.updateQueue)?(t={lastEffect:null},Gi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},oa().memoizedState=e}function va(){return ia().memoizedState}function ma(e,t,n,r){var o=oa();Gi.flags|=e,o.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function ga(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var a=Xi.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,i,r)}Gi.flags|=e,o.memoizedState=pa(1|t,n,i,r)}function ya(e,t){return ma(516,4,e,t)}function ba(e,t){return ga(516,4,e,t)}function wa(e,t){return ga(4,2,e,t)}function xa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Sa(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,xa.bind(null,t,e),n)}function Ea(){}function ka(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Aa(e,t){var n=Wo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function Pa(e,t,n){var r=au(),o=lu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Gi||null!==a&&a===Gi)ea=Zi=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=a(l,n);if(i.eagerReducer=a,i.eagerState=u,ar(u,l))return}catch(e){}uu(e,o,r)}}var Oa={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Ra={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:ya,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,xa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Pa.bind(null,Gi,e),[r.memoizedState,e]},useRef:ha,useState:da,useDebugValue:Ea,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return ha(e=Aa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:F,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Gi.mode)&&(Gi.flags|=516,pa(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return da(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},_a={readContext:ri,useCallback:ka,useContext:ri,useEffect:ba,useImperativeHandle:Sa,useLayoutEffect:wa,useMemo:Ca,useReducer:la,useRef:va,useState:function(){return la(aa)},useDebugValue:Ea,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ba((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},Na={readContext:ri,useCallback:ka,useContext:ri,useEffect:ba,useImperativeHandle:Sa,useLayoutEffect:wa,useMemo:Ca,useReducer:ua,useRef:va,useState:function(){return ua(aa)},useDebugValue:Ea,useDeferredValue:function(e){var t=ua(aa),n=t[0],r=t[1];return ba((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(aa)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(aa)[0]},unstable_isNewReconciler:!1},Ta=x.ReactCurrentOwner,Ma=!1;function Ia(e,t,n,r){t.child=null===e?ki(t,null,n,r):Ei(t,e.child,n,r)}function Fa(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Ma?(t.flags|=1,Ia(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Za(e,t,o))}function La(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||zu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Za(e,t,i):(t.flags|=1,(e=Du(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,o,i){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Ma=!1,0==(i&o))return t.lanes=e.lanes,Za(e,t,i);0!=(16384&e.flags)&&(Ma=!0)}return Ba(e,t,n,r,i)}function za(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vu(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vu(0,e),null;t.memoizedState={baseLanes:0},vu(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,vu(0,r);return Ia(e,t,o,n),t.child}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ba(e,t,n,r,o){var i=ho(n)?fo:so.current;return i=po(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Ma?(t.flags|=1,Ia(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Za(e,t,o))}function Wa(e,t,n,r,o){if(ho(n)){var i=!0;yo(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mi(t,n,r),yi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;s="object"==typeof s&&null!==s?ri(s):po(t,s=ho(n)?fo:so.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&gi(t,a,r,s),oi=!1;var d=t.memoizedState;a.state=d,ci(t,r,a,o),u=t.memoizedState,l!==r||d!==u||co.current||oi?("function"==typeof c&&(pi(t,n,c,r),u=t.memoizedState),(l=oi||vi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Qo(t.type,l),a.props=s,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ri(u):po(t,u=ho(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&gi(t,a,r,u),oi=!1,d=t.memoizedState,a.state=d,ci(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||co.current||oi?("function"==typeof p&&(pi(t,n,p,r),h=t.memoizedState),(s=oi||vi(t,n,s,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ua(e,t,n,r,i,o)}function Ua(e,t,n,r,o,i){Da(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&bo(t,n,!1),Za(e,t,i);r=t.stateNode,Ta.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ei(t,e.child,null,i),t.child=Ei(t,null,l,i)):Ia(e,t,l,i),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),_i(e,t.containerInfo)}var $a,Ha,qa,Ka={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Ii.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),lo(Ii,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Ya(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ya(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,t.lanes=33554432,e):((n=Uu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Du(a,l),null!==e?r=Du(e,r):(r=Wu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ka,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Du(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ya(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Uu(t,o,0,null),n=Wu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ga(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Xa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Ja(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,n);else if(19===e.tag)Ga(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Fi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Fi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xa(t,!0,n,null,i,t.lastEffect);break;case"together":Xa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Za(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Du(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Du(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&vo(),null;case 3:return Ni(),ao(co),ao(so),qi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Mi(t);var i=Ri(Oi.current);if(n=t.type,null!==e&&null!=t.stateNode)Ha(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ri(Ai.current),Vi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Qr]=t,r[Yr]=l,n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Ar(Sr[e],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":ee(r,l),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ar("invalid",r);break;case"textarea":ue(r,l),Ar("invalid",r)}for(var s in Ee(n,l),e=null,l)l.hasOwnProperty(s)&&(i=l[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Ar("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Yr]=r,$a(e,t),t.stateNode=e,s=ke(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),i=r;break;case"iframe":case"object":case"embed":Ar("load",e),i=r;break;case"video":case"audio":for(i=0;i<Sr.length;i++)Ar(Sr[i],e);i=r;break;case"source":Ar("error",e),i=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),i=r;break;case"details":Ar("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Ar("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":ue(e,r),i=le(e,r),Ar("invalid",e);break;default:i=r}Ee(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?xe(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Ar("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Lr)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ri(Oi.current),Ri(Ai.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ao(Ii),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?0===Tl&&(Tl=3):(0!==Tl&&3!==Tl||(Tl=4),null===Pl||0==(134217727&Fl)&&0==(134217727&Ll)||du(Pl,Rl))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return ho(t.type)&&vo(),null;case 19:if(ao(Ii),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Tl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Fi(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(Ii,1&Ii.current|2),t.child}e=e.sibling}null!==r.tail&&Bo()>Bl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Fi(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Bo()-r.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Bo(),n.sibling=null,t=Ii.current,lo(Ii,l?1&t|2:1&t),n):null;case 23:case 24:return mu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),ao(co),ao(so),qi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Mi(e),null;case 13:return ao(Ii),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Ii),null;case 4:return Ni(),null;case 10:return ei(e),null;case 23:case 24:return mu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}$a=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ri(Ai.current);var a,l=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(f in Ee(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Ar("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===F?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},qa=function(e,t,n,r){n!==r&&(t.flags|=4)};var il="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=li(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$l||($l=!0,Hl=r),ol(0,t)},n}function ll(e,t,n){(n=li(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Mu(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(_u(n,e),Ru(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))_u(t,n);else{r=t;try{o()}catch(e){Mu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Mu(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(vl(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gl(e,n,t):yl(e,n,t)}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Lr));else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Yr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),ke(e,o),t=ke(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?xe(n,u):"dangerouslySetInnerHTML"===l?me(n,u):"children"===l?ge(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Dl=Bo(),dl(t.child,!0)),void xl(t);case 19:return void xl(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(a(163))}function xl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Fu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var El=Math.ceil,kl=x.ReactCurrentDispatcher,Cl=x.ReactCurrentOwner,Al=0,Pl=null,Ol=null,Rl=0,_l=0,Nl=io(0),Tl=0,Ml=null,Il=0,Fl=0,Ll=0,jl=0,zl=null,Dl=0,Bl=1/0;function Wl(){Bl=Bo()+500}var Ul,Vl=null,$l=!1,Hl=null,ql=null,Kl=!1,Ql=null,Yl=90,Gl=[],Xl=[],Jl=null,Zl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,iu=!1;function au(){return 0!=(48&Al)?Bo():-1!==tu?tu:tu=Bo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===nu&&(nu=Il),0!==Ko.transition){0!==ru&&(ru=null!==zl?zl.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Dt(0!=(4&Al)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Zl)throw Zl=0,eu=null,Error(a(185));if(null===(e=su(e,t)))return null;Ut(e,t,n),e===Pl&&(Ll|=t,4===Tl&&du(e,Rl));var r=Wo();1===t?0!=(8&Al)&&0==(48&Al)?pu(e):(cu(e,n),0===Al&&(Wl(),Ho())):(0==(4&Al)||98!==r&&99!==r||(null===Jl?Jl=new Set([e]):Jl.add(e)),cu(e,n)),zl=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Vt(l),s=1<<u,c=i[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Lt(s);var f=Ft;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=jt(e,e===Pl?Rl:0),t=Ft,0===r)null!==n&&(n!==Io&&ko(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&ko(n)}15===t?(n=pu.bind(null,e),null===Lo?(Lo=[n],jo=Eo(Ro,qo)):Lo.push(n),n=Io):n=14===t?$o(99,pu.bind(null,e)):$o(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&Al))throw Error(a(327));var t=e.callbackNode;if(Ou()&&e.callbackNode!==t)return null;var n=jt(e,e===Pl?Rl:0);if(0===n)return null;var r=n,o=Al;Al|=16;var i=bu();for(Pl===e&&Rl===r||(Wl(),gu(e,r));;)try{Su();break}catch(t){yu(e,t)}if(Zo(),kl.current=i,Al=o,null!==Ol?r=0:(Pl=null,Rl=0,r=Tl),0!=(Il&Ll))gu(e,0);else if(0!==r){if(2===r&&(Al|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=zt(e))&&(r=wu(e,n))),1===r)throw t=Ml,gu(e,0),du(e,n),cu(e,Bo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Cu(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=Dl+500-Bo())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){au(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Cu.bind(null,e),r);break}Cu(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Vt(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Bo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*El(n/1960))-n)){e.timeoutHandle=Wr(Cu.bind(null,e),n);break}Cu(e);break;case 5:Cu(e);break;default:throw Error(a(329))}}return cu(e,Bo()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~jl,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Al))throw Error(a(327));if(Ou(),e===Pl&&0!=(e.expiredLanes&Rl)){var t=Rl,n=wu(e,t);0!=(Il&Ll)&&(n=wu(e,t=jt(e,t)))}else n=wu(e,t=jt(e,0));if(0!==e.tag&&2===n&&(Al|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=zt(e))&&(n=wu(e,t))),1===n)throw n=Ml,gu(e,0),du(e,t),cu(e,Bo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cu(e),cu(e,Bo()),null}function hu(e,t){var n=Al;Al|=1;try{return e(t)}finally{0===(Al=n)&&(Wl(),Ho())}}function vu(e,t){lo(Nl,_l),_l|=t,Il|=t}function mu(){_l=Nl.current,ao(Nl)}function gu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ni(),ao(co),ao(so),qi();break;case 5:Mi(r);break;case 4:Ni();break;case 13:case 19:ao(Ii);break;case 10:ei(r);break;case 23:case 24:mu()}n=n.return}Pl=e,Ol=Du(e.current,null),Rl=_l=Il=t,Tl=0,Ml=null,jl=Ll=Fl=0}function yu(e,t){for(;;){var n=Ol;try{if(Zo(),Ki.current=Oa,Zi){for(var r=Gi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Zi=!1}if(Yi=0,Ji=Xi=Gi=null,ea=!1,Cl.current=null,null===n||null===n.return){Tl=1,Ml=t,Ol=null;break}e:{var i=e,a=n.return,l=n,u=t;if(t=Rl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Ii.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var g=new Set;g.add(s),d.updateQueue=g}else m.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=li(-1,1);y.tag=2,ui(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new il,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Iu.bind(null,i,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((K(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Tl&&(Tl=2),u=rl(u,l),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,si(d,al(0,i,t));break e;case 1:i=u;var x=d.type,S=d.stateNode;if(0==(64&d.flags)&&("function"==typeof x.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===ql||!ql.has(S)))){d.flags|=4096,t&=-t,d.lanes|=t,si(d,ll(d,i,t));break e}}d=d.return}while(null!==d)}ku(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function bu(){var e=kl.current;return kl.current=Oa,null===e?Oa:e}function wu(e,t){var n=Al;Al|=16;var r=bu();for(Pl===e&&Rl===t||gu(e,t);;)try{xu();break}catch(t){yu(e,t)}if(Zo(),Al=n,kl.current=r,null!==Ol)throw Error(a(261));return Pl=null,Rl=0,Tl}function xu(){for(;null!==Ol;)Eu(Ol)}function Su(){for(;null!==Ol&&!Co();)Eu(Ol)}function Eu(e){var t=Ul(e.alternate,e,_l);e.memoizedProps=e.pendingProps,null===t?ku(e):Ol=t,Cl.current=null}function ku(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,_l)))return void(Ol=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&_l)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Ol=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Tl&&(Tl=5)}function Cu(e){var t=Wo();return Vo(99,Au.bind(null,e,t)),null}function Au(e,t){do{Ou()}while(null!==Ql);if(0!=(48&Al))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<i;){var s=31-Vt(i),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,i&=~c}if(null!==Jl&&0==(24&r)&&Jl.has(e)&&Jl.delete(e),e===Pl&&(Ol=Pl=null,Rl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Al,Al|=32,Cl.current=null,jr=Qt,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,v=0,m=l,g=null;t:for(;;){for(var y;m!==u||0!==i&&3!==m.nodeType||(d=f+i),m!==s||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(y=m.firstChild);)g=m,m=y;for(;;){if(m===l)break t;if(g===u&&++h===i&&(d=f),g===s&&++v===c&&(p=f),null!==(y=m.nextSibling))break;g=(m=g).parentNode}m=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:l,selectionRange:u},Qt=!1,ou=null,iu=!1,Vl=r;do{try{Pu()}catch(e){if(null===Vl)throw Error(a(330));Mu(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);ou=null,Vl=r;do{try{for(l=e;null!==Vl;){var b=Vl.flags;if(16&b&&ge(Vl.stateNode,""),128&b){var w=Vl.alternate;if(null!==w){var x=w.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:ml(Vl),Vl.flags&=-3;break;case 6:ml(Vl),Vl.flags&=-3,wl(Vl.alternate,Vl);break;case 1024:Vl.flags&=-1025;break;case 1028:Vl.flags&=-1025,wl(Vl.alternate,Vl);break;case 4:wl(Vl.alternate,Vl);break;case 8:bl(l,u=Vl);var S=u.alternate;hl(u),null!==S&&hl(S)}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(a(330));Mu(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);if(x=zr,w=dr(),b=x.focusedElem,l=x.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(x=l.end)&&(x=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(x,b.value.length)):(x=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(x=x.getSelection(),u=b.textContent.length,S=Math.min(l.start,u),l=void 0===l.end?S:Math.min(l.end,u),!x.extend&&S>l&&(u=l,l=S,S=u),u=cr(b,S),i=cr(b,l),u&&i&&(1!==x.rangeCount||x.anchorNode!==u.node||x.anchorOffset!==u.offset||x.focusNode!==i.node||x.focusOffset!==i.offset)&&((w=w.createRange()).setStart(u.node,u.offset),x.removeAllRanges(),S>l?(x.addRange(w),x.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),x.addRange(w))))),w=[];for(x=b;x=x.parentNode;)1===x.nodeType&&w.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(x=w[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Qt=!!jr,zr=jr=null,e.current=n,Vl=r;do{try{for(b=e;null!==Vl;){var E=Vl.flags;if(36&E&&fl(b,Vl.alternate,Vl),128&E){w=void 0;var k=Vl.ref;if(null!==k){var C=Vl.stateNode;switch(Vl.tag){case 5:w=C;break;default:w=C}"function"==typeof k?k(w):k.current=w}}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(a(330));Mu(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);Vl=null,Fo(),Al=o}else e.current=n;if(Kl)Kl=!1,Ql=e,Yl=t;else for(Vl=r;null!==Vl;)t=Vl.nextEffect,Vl.nextEffect=null,8&Vl.flags&&((E=Vl).sibling=null,E.stateNode=null),Vl=t;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===eu?Zl++:(Zl=0,eu=e):Zl=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Bo()),$l)throw $l=!1,e=Hl,Hl=null,e;return 0!=(8&Al)||Ho(),null}function Pu(){for(;null!==Vl;){var e=Vl.alternate;iu||null===ou||(0!=(8&Vl.flags)?Ze(Vl,ou)&&(iu=!0):13===Vl.tag&&Sl(e,Vl)&&Ze(Vl,ou)&&(iu=!0));var t=Vl.flags;0!=(256&t)&&cl(e,Vl),0==(512&t)||Kl||(Kl=!0,$o(97,(function(){return Ou(),null}))),Vl=Vl.nextEffect}}function Ou(){if(90!==Yl){var e=97<Yl?97:Yl;return Yl=90,Vo(e,Nu)}return!1}function Ru(e,t){Gl.push(t,e),Kl||(Kl=!0,$o(97,(function(){return Ou(),null})))}function _u(e,t){Xl.push(t,e),Kl||(Kl=!0,$o(97,(function(){return Ou(),null})))}function Nu(){if(null===Ql)return!1;var e=Ql;if(Ql=null,0!=(48&Al))throw Error(a(331));var t=Al;Al|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));Mu(i,e)}}for(n=Gl,Gl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));Mu(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Al=t,Ho(),!0}function Tu(e,t,n){ui(e,t=al(0,t=rl(n,t),1)),t=au(),null!==(e=su(e,1))&&(Ut(e,1,t),cu(e,t))}function Mu(e,t){if(3===e.tag)Tu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Tu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=ll(n,e=rl(t,e),1);if(ui(n,o),o=au(),null!==(n=su(n,1)))Ut(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Iu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=au(),e.pingedLanes|=e.suspendedLanes&n,Pl===e&&(Rl&n)===n&&(4===Tl||3===Tl&&(62914560&Rl)===Rl&&500>Bo()-Dl?gu(e,0):jl|=n),cu(e,t)}function Fu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===nu&&(nu=Il),0===(t=Bt(62914560&~nu))&&(t=4194304))),n=au(),null!==(e=su(e,t))&&(Ut(e,t,n),cu(e,n))}function Lu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function ju(e,t,n,r){return new Lu(e,t,n,r)}function zu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Du(e,t){var n=e.alternate;return null===n?((n=ju(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)zu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Wu(n.children,o,i,t);case L:l=8,o|=16;break;case C:l=8,o|=1;break;case A:return(e=ju(12,n,t,8|o)).elementType=A,e.type=A,e.lanes=i,e;case _:return(e=ju(13,n,t,o)).type=_,e.elementType=_,e.lanes=i,e;case N:return(e=ju(19,n,t,o)).elementType=N,e.lanes=i,e;case j:return Uu(n,o,i,t);case z:return(e=ju(24,n,t,o)).elementType=z,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case O:l=9;break e;case R:l=11;break e;case T:l=14;break e;case M:l=16,r=null;break e;case I:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=ju(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Wu(e,t,n,r){return(e=ju(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){return(e=ju(23,e,r,t)).elementType=j,e.lanes=n,e}function Vu(e,t,n){return(e=ju(6,e,null,t)).lanes=n,e}function $u(e,t,n){return(t=ju(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Wt(0),this.expirationTimes=Wt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Wt(0),this.mutableSourceEagerHydrationData=null}function qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ku(e,t,n,r){var o=t.current,i=au(),l=lu(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(ho(s)){n=go(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=li(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),uu(o,l,i),l}function Qu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Gu(e,t){Yu(e,t),(e=e.alternate)&&Yu(e,t)}function Xu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hu(e,t,null!=n&&!0===n.hydrate),t=ju(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[Gr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Qu(a);l.call(e)}}Ku(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Qu(a);u.call(e)}}!function(e,t){var n=Al;Al&=-2,Al|=8;try{e(t)}finally{0===(Al=n)&&(Wl(),Ho())}}((function(){Ku(t,a,e,o)}))}return Qu(a)}Ul=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Ma=!0;else{if(0==(n&r)){switch(Ma=!1,t.tag){case 3:Va(t),$i();break;case 5:Ti(t);break;case 1:ho(t.type)&&yo(t);break;case 4:_i(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(lo(Ii,1&Ii.current),null!==(t=Za(e,t,n))?t.sibling:null);lo(Ii,1&Ii.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ja(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(Ii,Ii.current),r)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return Za(e,t,n)}Ma=0!=(16384&e.flags)}else Ma=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;yo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pi(t,r,l,e),o.updater=hi,t.stateNode=o,o._reactInternals=t,yi(t,r,e,n),t=Ua(null,t,r,!0,i,n)}else t.tag=0,Ia(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return zu(e)?1:0;if(null!=e){if((e=e.$$typeof)===R)return 11;if(e===T)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=Ba(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=Fa(null,t,o,e,n);break e;case 14:t=La(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===o)$i(),t=Za(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(ji=$r(t.stateNode.containerInfo.firstChild),Li=t,i=zi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Hi.push(i);for(n=ki(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(e,t,r,n),$i();t=t.child}return t;case 5:return Ti(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,Br(r,o)?l=null:null!==i&&Br(r,i)&&(t.flags|=16),Da(e,t),Ia(e,t,l,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return Qa(e,t,n);case 4:return _i(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ei(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(lo(Yo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0==(i=ar(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!co.current){t=Za(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=li(-1,n&-n)).tag=2,ui(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ti(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ia(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,Ia(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),La(e,t,o,i=Qo(o.type,i),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,yo(t)):e=!1,ni(t,n),mi(t,r,o),yi(t,r,o,n),Ua(null,t,r,!0,e,n);case 19:return Ja(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},Xu.prototype.render=function(e){Ku(e,this._internalRoot,null,null)},Xu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ku(null,e,null,(function(){t[Gr]=null}))},et=function(e){13===e.tag&&(uu(e,4,au()),Gu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,au()),Gu(e,67108864))},nt=function(e){if(13===e.tag){var t=au(),n=lu(e);uu(e,n,t),Gu(e,n)}},rt=function(e,t){return t()},Ae=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Te=hu,Me=function(e,t,n,r,o){var i=Al;Al|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Al=i)&&(Wl(),Ho())}},Ie=function(){0==(49&Al)&&(function(){if(null!==Jl){var e=Jl;Jl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Bo())}))}Ho()}(),Ou())},Fe=function(e,t){var n=Al;Al|=2;try{return e(t)}finally{0===(Al=n)&&(Wl(),Ho())}};var es={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},ts={bundleType:es.bundleType,version:es.version,rendererPackageName:es.rendererPackageName,rendererConfig:es.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:es.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ns=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ns.isDisabled&&ns.supportsFiber)try{wo=ns.inject(ts),xo=ns}catch(ve){}}t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(a(200));return qu(e,t,null,n)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.render=function(e,t,n){if(!Ju(t))throw Error(a(200));return Zu(null,e,t,!1,n)},t.unstable_batchedUpdates=hu},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case m:case v:case u:return e;default:return t}}case o:return t}}}function S(e){return x(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=m,t.Memo=v,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||x(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===d},t.isFragment=function(e){return x(e)===i},t.isLazy=function(e){return x(e)===m},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===a},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===v||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=x},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},6585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:(e,t,n)=>{var r=n(6585);e.exports=function e(t,n,o){return r(n)||(o=n||o,n=[]),o=o||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var o=[],i=0;i<t.length;i++)o.push(e(t[i],n,r).source);return c(new RegExp("(?:"+o.join("|")+")",f(r)),n)}(t,n,o):function(e,t,n){return d(i(e,n),t,n)}(t,n,o)},e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var h=e[a],v=n[2],m=n[3],g=n[4],y=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=v&&null!=h&&h!==v,S="+"===b||"*"===b,E="?"===b||"*"===b,k=n[2]||c,C=g||y;r.push({name:m||i++,prefix:v||"",delimiter:k,optional:E,repeat:S,partial:x,asterisk:!!w,pattern:C?s(C):w?".*":"[^"+u(k)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var b=y.prototype=new g;b.constructor=y,r(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},x=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+A(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(k(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+A(l=e[s],s);u+=P(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,n,c=r+A(l,s++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function N(){var e=_.current;if(null===e)throw Error(p(321));return e}var T={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)x.call(t,c)&&!S.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new O(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return _()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=C(a,n);if(l){if(l===v)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(e,t,n);if("normal"===u.type){if(r=n.done?h:d,u.arg===v)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=h,n.method="throw",n.arg=u.arg)}}}(e,n,a),i}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={};function m(){}function g(){}function y(){}var b={};b[i]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(R([])));x&&x!==n&&r.call(x,i)&&(b=x);var S=y.prototype=m.prototype=Object.create(b);function E(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,i,a,l){var u=c(e[o],e,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,a,l)}),(function(e){n("throw",e,a,l)})):t.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return n("throw",e,a,l)}))}l(u.arg)}var o;this._invoke=function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=c(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function R(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:_}}function _(){return{value:t,done:!0}}return g.prototype=S.constructor=y,y.constructor=g,g.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},E(k.prototype),k.prototype[a]=function(){return this},e.AsyncIterator=k,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new k(s(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},E(S),u(S,l,"Generator"),S[i]=function(){return this},S.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=R,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return l.type="throw",l.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],l=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:R(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,x=w.port2;w.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+y;try{m(!0,e)?x.postMessage(null):(v=!1,m=null)}catch(e){throw x.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,x.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>C(a,n))void 0!==u&&0>C(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],P=[],O=1,R=null,_=3,N=!1,T=!1,M=!1;function I(e){for(var t=E(P);null!==t;){if(null===t.callback)k(P);else{if(!(t.startTime<=e))break;k(P),t.sortIndex=t.expirationTime,S(A,t)}t=E(P)}}function F(e){if(M=!1,I(e),!T)if(null!==E(A))T=!0,n(L);else{var t=E(P);null!==t&&r(F,t.startTime-e)}}function L(e,n){T=!1,M&&(M=!1,o()),N=!0;var i=_;try{for(I(n),R=E(A);null!==R&&(!(R.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=R.callback;if("function"==typeof a){R.callback=null,_=R.priorityLevel;var l=a(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?R.callback=l:R===E(A)&&k(A),I(n)}else k(A);R=E(A)}if(null!==R)var u=!0;else{var s=E(P);null!==s&&r(F,s.startTime-n),u=!1}return u}finally{R=null,_=i,N=!1}}var j=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){T||N||(T=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return E(A)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var n=_;_=t;try{return e()}finally{_=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=j,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=_;_=e;try{return t()}finally{_=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>l?(e.sortIndex=a,S(P,e),null===E(A)&&e===E(P)&&(M?o():M=!0,r(F,a-l))):(e.sortIndex=u,S(A,e),T||N||(T=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=_;return function(){var n=_;_=t;try{return e.apply(this,arguments)}finally{_=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],o=0;o<e.length;o++){var l=e[o],u=t.base?l[0]+t.base:l[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var f=a(c),d={css:l[1],media:l[2],sourceMap:l[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:c,updater:v(d,t),references:1}),r.push(c)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var s,c=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function v(e,t){var n,r,o;if(t.singleton){var i=h++;n=p||(p=u(t)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=u(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var u=l(e,t),s=0;s<n.length;s++){var c=a(n[s]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=u}}}},7121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";n(1983);var e,t=(e=n(115))&&e.__esModule?e:{default:e};t.default._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),t.default._babelPolyfill=!0})(),(()=>{"use strict";var e=n(7294),t=n(3935),r=n(3379),o=n.n(r),i=n(8533);o()(i.Z,{insert:"head",singleton:!1});const a=i.Z.locals||{};function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function s(e,t){if(null==e)return{};var n,r,o=u(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=n(5697),f=n.n(c);function d(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=d(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function p(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=d(e))&&(r&&(r+=" "),r+=t);return r}function h(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}function v(e){if("string"!=typeof e)throw new Error(h(7));return e.charAt(0).toUpperCase()+e.slice(1)}var m=n(8679),g=n.n(m),y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const b="object"===("undefined"==typeof window?"undefined":y(window))&&"object"===("undefined"==typeof document?"undefined":y(document))&&9===document.nodeType;function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return t&&w(e.prototype,t),n&&w(e,n),e}function S(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var k={}.constructor;function C(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(C);if(e.constructor!==k)return e;var t={};for(var n in e)t[n]=C(e[n]);return t}function A(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=C(t);return r.plugins.onCreateRule(e,o,n)||(e[0],null)}var P=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},O=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=P(e[r]," ");else n=P(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function R(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function _(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=""+R(s+": "+O(c)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+R(f+": "+O(d)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+R(p+": "+O(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),R(e+" {"+r,--i)+R("}",i)):r}var N=/([[\].#*$><+~=|^:(),"'`\s])/g,T="undefined"!=typeof CSS&&CSS.escape,M=function(e){return T?T(e):e.replace(N,"\\$1")},I=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),F=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,u=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=u(E(E(o)),l),o.selectorText="."+M(o.id)),o}S(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=O(n))}return e},n.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?l({},e,{allowEmpty:!0}):e;return _(this.selectorText,this.style,n)},x(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;n&&t&&(t.setSelector(n,e)||t.replaceRule(n,this))}},get:function(){return this.selectorText}}]),t}(I),L={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new F(e,t,n)}},j={indent:1,children:!0},z=/@([\w-]+)/,D=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(z);for(var o in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new ue(l({},n,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=j),null==e.indent&&(e.indent=j.indent),null==e.children&&(e.children=j.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),B=/@media|@supports\s+/,W={onCreateRule:function(e,t,n){return B.test(e)?new D(e,t,n):null}},U={indent:1,children:!0},V=/@keyframes\s+([\w-]+)/,$=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(V);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var o=n.scoped,i=n.sheet,a=n.generateId;for(var u in this.id=!1===o?this.name:M(a(this,i)),this.rules=new ue(l({},n,{parent:this})),t)this.rules.add(u,t[u],l({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=U),null==e.indent&&(e.indent=U.indent),null==e.children&&(e.children=U.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),H=/@keyframes\s+/,q=/\$([\w-]+)/g,K=function(e,t){return"string"==typeof e?e.replace(q,(function(e,n){return n in t?t[n]:e})):e},Q=function(e,t,n){var r=e[t],o=K(r,n);o!==r&&(e[t]=o)},Y={onCreateRule:function(e,t,n){return"string"==typeof e&&H.test(e)?new $(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&Q(e,"animation-name",n.keyframes),"animation"in e&&Q(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return K(e,r.keyframes);default:return e}}},G=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return S(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=t&&t.options.link?l({},e,{allowEmpty:!0}):e;return _(this.key,this.style,n)},t}(I),X={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new G(e,t,n):null}},J=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=_(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return _(this.at,this.style,e)},e}(),Z=/@font-face/,ee={onCreateRule:function(e,t,n){return Z.test(e)?new J(e,t,n):null}},te=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return _(this.key,this.style,e)},e}(),ne={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new te(e,t,n):null}},re=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),oe={"@charset":!0,"@import":!0,"@namespace":!0},ie=[L,W,Y,X,ee,ne,{onCreateRule:function(e,t,n){return e in oe?new re(e,t,n):null}}],ae={process:!0},le={force:!0,process:!0},ue=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,o=r.parent,i=r.sheet,a=r.jss,u=r.Renderer,s=r.generateId,c=r.scoped,f=l({classes:this.classes,parent:o,sheet:i,jss:a,Renderer:u,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+M(this.classes[d]));var p=A(d,t,f);if(!p)return null;this.register(p);var h=void 0===f.index?this.index.length:f.index;return this.index.splice(h,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof F?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof $&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof F?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof $&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=ae);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(i.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var s in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,le)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,le)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),se=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=l({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new ue(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),ce=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),fe=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=u(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},x(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),de="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),pe="2f1acc6c3a606b082e5eef5e54414ffb";null==de[pe]&&(de[pe]=0);var he=de[pe]++,ve=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+he+o+t:i+n.key+"-"+he+(o?"-"+o:"")+"-"+t}},me=function(e){var t;return function(){return t||(t=e()),t}},ge=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ye=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=O(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},be=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},we=function(e,t){return e.selectorText=t,e.selectorText===t},xe=me((function(){return document.querySelector("head")}));var Se=me((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),Ee=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[n]},ke=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},Ce=function(){function e(e){this.getPropertyValue=ge,this.setProperty=ye,this.removeProperty=be,this.setSelector=we,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&fe.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=Se();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=function(e){var t=fe.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=xe(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else xe().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=ke(n,t);if(!1===(o=Ee(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var l=ke(n,t),u=Ee(n,a,l);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,l,u),u)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof se&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),Ae=0,Pe=function(){function e(e){this.id=Ae++,this.version="10.5.0",this.plugins=new ce,this.options={id:{minify:!1},createGenerateId:ve,Renderer:b?Ce:null,plugins:[]},this.generateId=ve({minify:!1});for(var t=0;t<ie.length;t++)this.plugins.use(ie[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=l({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===fe.index?0:fe.index+1);var r=new se(e,l({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),fe.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=l({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var o=A(e,t,r);return o&&this.plugins.onProcessRule(o),o},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function Oe(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=Oe(r);i&&(t||(t={}),t[n]=i)}}return t}var Re="object"==typeof CSS&&null!=CSS&&"number"in CSS,_e=function(e){return new Pe(e)};function Ne(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=l({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}_e();const Te=function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},Me=function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},Ie=function(e,t,n){e.get(t).delete(n)},Fe=e.createContext(null);function Le(){return e.useContext(Fe)}const je="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var ze=["checked","disabled","error","focused","focusVisible","required","expanded","selected"],De=Date.now(),Be="fnValues"+De,We="fnStyle"+ ++De;var Ue="@global",Ve="@global ",$e=function(){function e(e,t,n){for(var r in this.type="global",this.at=Ue,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new ue(l({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),He=function(){function e(e,t,n){this.type="global",this.at=Ue,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(Ve.length);this.rule=n.jss.createRule(r,t,l({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),qe=/\s*,\s*/g;function Ke(e,t){for(var n=e.split(qe),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Qe=/\s*,\s*/g,Ye=/&/g,Ge=/\$([\w-]+)/g;var Xe=/[A-Z]/g,Je=/^ms-/,Ze={};function et(e){return"-"+e.toLowerCase()}const tt=function(e){if(Ze.hasOwnProperty(e))return Ze[e];var t=e.replace(Xe,et);return Ze[e]=Je.test(t)?"-"+t:t};function nt(e){var t={};for(var n in e)t[0===n.indexOf("--")?n:tt(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(nt):t.fallbacks=nt(e.fallbacks)),t}var rt=Re&&CSS?CSS.px:"px",ot=Re&&CSS?CSS.ms:"ms",it=Re&&CSS?CSS.percent:"%";function at(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var lt=at({"animation-delay":ot,"animation-duration":ot,"background-position":rt,"background-position-x":rt,"background-position-y":rt,"background-size":rt,border:rt,"border-bottom":rt,"border-bottom-left-radius":rt,"border-bottom-right-radius":rt,"border-bottom-width":rt,"border-left":rt,"border-left-width":rt,"border-radius":rt,"border-right":rt,"border-right-width":rt,"border-top":rt,"border-top-left-radius":rt,"border-top-right-radius":rt,"border-top-width":rt,"border-width":rt,"border-block":rt,"border-block-end":rt,"border-block-end-width":rt,"border-block-start":rt,"border-block-start-width":rt,"border-block-width":rt,"border-inline":rt,"border-inline-end":rt,"border-inline-end-width":rt,"border-inline-start":rt,"border-inline-start-width":rt,"border-inline-width":rt,"border-start-start-radius":rt,"border-start-end-radius":rt,"border-end-start-radius":rt,"border-end-end-radius":rt,margin:rt,"margin-bottom":rt,"margin-left":rt,"margin-right":rt,"margin-top":rt,"margin-block":rt,"margin-block-end":rt,"margin-block-start":rt,"margin-inline":rt,"margin-inline-end":rt,"margin-inline-start":rt,padding:rt,"padding-bottom":rt,"padding-left":rt,"padding-right":rt,"padding-top":rt,"padding-block":rt,"padding-block-end":rt,"padding-block-start":rt,"padding-inline":rt,"padding-inline-end":rt,"padding-inline-start":rt,"mask-position-x":rt,"mask-position-y":rt,"mask-size":rt,height:rt,width:rt,"min-height":rt,"max-height":rt,"min-width":rt,"max-width":rt,bottom:rt,left:rt,top:rt,right:rt,inset:rt,"inset-block":rt,"inset-block-end":rt,"inset-block-start":rt,"inset-inline":rt,"inset-inline-end":rt,"inset-inline-start":rt,"box-shadow":rt,"text-shadow":rt,"column-gap":rt,"column-rule":rt,"column-rule-width":rt,"column-width":rt,"font-size":rt,"font-size-delta":rt,"letter-spacing":rt,"text-indent":rt,"text-stroke":rt,"text-stroke-width":rt,"word-spacing":rt,motion:rt,"motion-offset":rt,outline:rt,"outline-offset":rt,"outline-width":rt,perspective:rt,"perspective-origin-x":it,"perspective-origin-y":it,"transform-origin":it,"transform-origin-x":it,"transform-origin-y":it,"transform-origin-z":it,"transition-delay":ot,"transition-duration":ot,"vertical-align":rt,"flex-basis":rt,"shape-margin":rt,size:rt,gap:rt,grid:rt,"grid-gap":rt,"grid-row-gap":rt,"grid-column-gap":rt,"grid-template-rows":rt,"grid-template-columns":rt,"grid-auto-rows":rt,"grid-auto-columns":rt,"box-shadow-x":rt,"box-shadow-y":rt,"box-shadow-blur":rt,"box-shadow-spread":rt,"font-line-height":rt,"text-shadow-x":rt,"text-shadow-y":rt,"text-shadow-blur":rt});function ut(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=ut(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=ut(o,t[o],n);else for(var i in t)t[i]=ut(e+"-"+i,t[i],n);else if("number"==typeof t){var a=n[e]||lt[e];return!a||0===t&&a===rt?t.toString():"function"==typeof a?a(t).toString():""+t+a}return t}function st(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ct(e,t){if(e){if("string"==typeof e)return st(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?st(e,t):void 0}}function ft(e){return function(e){if(Array.isArray(e))return st(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||ct(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var dt="",pt="",ht="",vt="",mt=b&&"ontouchstart"in document.documentElement;if(b){var gt={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},yt=document.createElement("p").style;for(var bt in gt)if(bt+"Transform"in yt){dt=bt,pt=gt[bt];break}"Webkit"===dt&&"msHyphens"in yt&&(dt="ms",pt=gt.ms,vt="edge"),"Webkit"===dt&&"-apple-trailing-word"in yt&&(ht="apple")}var wt=dt,xt=pt,St=ht,Et=vt,kt=mt,Ct={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===wt?"-webkit-"+e:xt+e)}},At={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===wt?xt+"print-"+e:e)}},Pt=/[-\s]+(.)?/g;function Ot(e,t){return t?t.toUpperCase():""}function Rt(e){return e.replace(Pt,Ot)}function _t(e){return Rt("-"+e)}var Nt,Tt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===wt){var n="mask-image";if(Rt(n)in t)return e;if(wt+_t(n)in t)return xt+e}return e}},Mt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==St||kt?e:xt+e)}},It={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:xt+e)}},Ft={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:xt+e)}},Lt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===wt||"ms"===wt&&"edge"!==Et?xt+e:e)}},jt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===wt||"ms"===wt||"apple"===St?xt+e:e)}},zt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===wt?"WebkitColumn"+_t(e)in t&&xt+"column-"+e:"Moz"===wt&&"page"+_t(e)in t&&"page-"+e)}},Dt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===wt)return e;var n=e.replace("-inline","");return wt+_t(n)in t&&xt+n}},Bt={supportedProperty:function(e,t){return Rt(e)in t&&e}},Wt={supportedProperty:function(e,t){var n=_t(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:wt+n in t?xt+e:"Webkit"!==wt&&"Webkit"+n in t&&"-webkit-"+e}},Ut={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===wt?""+xt+e:e)}},Vt={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===wt?xt+"scroll-chaining":e)}},$t={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Ht={supportedProperty:function(e,t){var n=$t[e];return!!n&&wt+_t(n)in t&&xt+n}},qt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Kt=Object.keys(qt),Qt=function(e){return xt+e},Yt=[Ct,At,Tt,Mt,It,Ft,Lt,jt,zt,Dt,Bt,Wt,Ut,Vt,Ht,{supportedProperty:function(e,t,n){var r=n.multiple;if(Kt.indexOf(e)>-1){var o=qt[e];if(!Array.isArray(o))return wt+_t(o)in t&&xt+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(wt+_t(o[0])in t))return!1;return o.map(Qt)}return!1}}],Gt=Yt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Xt=Yt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,ft(t.noPrefill)),e}),[]),Jt={};if(b){Nt=document.createElement("p");var Zt=window.getComputedStyle(document.documentElement,"");for(var en in Zt)isNaN(en)||(Jt[Zt[en]]=Zt[en]);Xt.forEach((function(e){return delete Jt[e]}))}function tn(e,t){if(void 0===t&&(t={}),!Nt)return e;if(null!=Jt[e])return Jt[e];"transition"!==e&&"transform"!==e||(t[e]=e in Nt.style);for(var n=0;n<Gt.length&&(Jt[e]=Gt[n](e,Nt.style,t),!Jt[e]);n++);try{Nt.style[e]=""}catch(e){return!1}return Jt[e]}var nn,rn={},on={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},an=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function ln(e,t,n){return"var"===t?"var":"all"===t?"all":"all"===n?", all":(t?tn(t):", "+tn(n))||t||n}function un(e,t){var n=t;if(!nn||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=rn[r])return rn[r];try{nn.style[e]=n}catch(e){return rn[r]=!1,!1}if(on[e])n=n.replace(an,ln);else if(""===nn.style[e]&&("-ms-flex"===(n=xt+n)&&(nn.style[e]="-ms-flexbox"),nn.style[e]=n,""===nn.style[e]))return rn[r]=!1,!1;return nn.style[e]="",rn[r]=n,rn[r]}b&&(nn=document.createElement("p"));var sn,cn=_e({plugins:[{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=A(e,{},n);return r[We]=t,r},onProcessStyle:function(e,t){if(Be in t||We in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Be]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[We];i&&(o.style=i(e)||{});var a=o[Be];if(a)for(var l in a)o.prop(l,a[l](e),r)}},{onCreateRule:function(e,t,n){if(!e)return null;if(e===Ue)return new $e(e,t,n);if("@"===e[0]&&e.substr(0,Ve.length)===Ve)return new He(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,o=r?r[Ue]:null;if(o){for(var i in o)t.addRule(i,o[i],l({},n,{selector:Ke(i,e.selector)}));delete r[Ue]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var o in r)if("@"===o[0]&&o.substr(0,Ue.length)===Ue){var i=Ke(o.substr(Ue.length),e.selector);t.addRule(i,r[o],l({},n,{selector:i})),delete r[o]}}(e,t))}},function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(Qe),r=e.split(Qe),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(Ye,a):a+" "+u}return o}function n(e,t,n){if(n)return l({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var o=l({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete o.name,o}return{onProcessStyle:function(r,o,i){if("style"!==o.type)return r;var a,u,s=o,c=s.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(a=n(s,c,a),d){var h=t(f,s.selector);u||(u=e(c,i)),h=h.replace(Ge,u),c.addRule(h,r[f],l({},a,{selector:h}))}else p&&c.addRule(f,{},a).addRule(s.key,r[f],{selector:s.selector});delete r[f]}}return r}}}(),{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=nt(e[t]);return e}return nt(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=tt(t);return t===r?e:(n.prop(r,e),null)}},function(e){void 0===e&&(e={});var t=at(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=ut(r,e[r],t);return e},onChangeValue:function(e,n){return ut(n,e,t)}}}(),"undefined"==typeof window?null:function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=tn(n);i&&i!==n&&(o=!0);var a=!1,l=un(i,O(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===wt?e:"@"+xt+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return un(t,O(e))||e}}}(),(sn=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length},{onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n={},r=Object.keys(e).sort(sn),o=0;o<r.length;o++)n[r[o]]=e[r[o]];return n}})]}),fn={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),u=0,s=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==ze.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[je]&&""===a?"".concat(i,"-").concat(s()):i}return"".concat(l).concat(o).concat(s())}}(),jss:cn,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},dn=e.createContext(fn),pn=-1e9;function hn(){return pn+=1}function vn(e){return(vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function mn(e){return e&&"object"===vn(e)&&e.constructor===Object}function gn(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},r=n.clone?l({},e):e;return mn(e)&&mn(t)&&Object.keys(t).forEach((function(o){"__proto__"!==o&&(mn(t[o])&&o in e?r[o]=gn(e[o],t[o],n):r[o]=t[o])})),r}function yn(e){var t="function"==typeof e;return{create:function(n,r){var o;try{o=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return o;var i=n.overrides[r],a=l({},o);return Object.keys(i).forEach((function(e){a[e]=gn(a[e],i[e])})),a},options:{}}}const bn={};function wn(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=Ne({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function xn(e,t){var n=e.state,r=e.theme,o=e.stylesOptions,i=e.stylesCreator,a=e.name;if(!o.disableGeneration){var u=Me(o.sheetsManager,i,r);u||(u={refs:0,staticSheet:null,dynamicStyles:null},Te(o.sheetsManager,i,r,u));var s=l({},i.options,o,{theme:r,flip:"boolean"==typeof o.flip?o.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=o.sheetsRegistry;if(0===u.refs){var f;o.sheetsCache&&(f=Me(o.sheetsCache,i,r));var d=i.create(r,a);f||((f=o.jss.createStyleSheet(d,l({link:!1},s))).attach(),o.sheetsCache&&Te(o.sheetsCache,i,r,f)),c&&c.add(f),u.staticSheet=f,u.dynamicStyles=Oe(d)}if(u.dynamicStyles){var p=o.jss.createStyleSheet(u.dynamicStyles,l({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=Ne({baseClasses:u.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function Sn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function En(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=Me(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(Ie(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function kn(t,n){var r,o=e.useRef([]),i=e.useMemo((function(){return{}}),n);o.current!==i&&(o.current=i,r=t()),e.useEffect((function(){return function(){r&&r()}}),[i])}function Cn(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.name,o=n.classNamePrefix,i=n.Component,a=n.defaultTheme,u=void 0===a?bn:a,c=s(n,["name","classNamePrefix","Component","defaultTheme"]),f=yn(t),d=r||o||"makeStyles";f.options={index:hn(),name:r,meta:d,classNamePrefix:d};var p=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Le()||u,o=l({},e.useContext(dn),c),a=e.useRef(),s=e.useRef();kn((function(){var e={name:r,state:{},stylesCreator:f,stylesOptions:o,theme:n};return xn(e,t),s.current=!1,a.current=e,function(){En(e)}}),[n,f]),e.useEffect((function(){s.current&&Sn(a.current,t),s.current=!0}));var d=wn(a.current,t.classes,i);return d};return p}function An(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}var Pn=["xs","sm","md","lg","xl"];function On(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,o=void 0===r?"px":r,i=e.step,a=void 0===i?5:i,u=s(e,["values","unit","step"]);function c(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(o,")")}function f(e,t){var r=Pn.indexOf(t);return r===Pn.length-1?c(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(o,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[Pn[r+1]]?n[Pn[r+1]]:t)-a/100).concat(o,")")}return l({keys:Pn,values:n,up:c,down:function(e){var t=Pn.indexOf(e)+1,r=n[Pn[t]];return t===Pn.length?c("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-a/100).concat(o,")")},between:f,only:function(e){return f(e,e)},width:function(e){return n[e]}},u)}function Rn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _n(e,t,n){var r;return l({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return l({paddingLeft:t(2),paddingRight:t(2)},n,Rn({},e.up("sm"),l({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},Rn(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),Rn(r,e.up("sm"),{minHeight:64}),r)},n)}const Nn={black:"#000",white:"#fff"},Tn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},Mn="#7986cb",In="#3f51b5",Fn="#303f9f",Ln="#ff4081",jn="#f50057",zn="#c51162",Dn="#e57373",Bn="#f44336",Wn="#d32f2f",Un="#ffb74d",Vn="#ff9800",$n="#f57c00",Hn="#64b5f6",qn="#2196f3",Kn="#1976d2",Qn="#81c784",Yn="#4caf50",Gn="#388e3c";function Xn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function Jn(e){if(e.type)return e;if("#"===e.charAt(0))return Jn(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(h(3,e));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function Zn(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function er(e){var t="hsl"===(e=Jn(e)).type?Jn(function(e){var t=(e=Jn(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-i*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",u=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",u.push(t[3])),Zn({type:l,values:u})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function tr(e,t){return e=Jn(e),t=Xn(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,Zn(e)}var nr={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Nn.white,default:Tn[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},rr={text:{primary:Nn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:Tn[800],default:"#303030"},action:{active:Nn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function or(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=Jn(e),t=Xn(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return Zn(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=Jn(e),t=Xn(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return Zn(e)}(e.main,i)))}function ir(e){var t=e.primary,n=void 0===t?{light:Mn,main:In,dark:Fn}:t,r=e.secondary,o=void 0===r?{light:Ln,main:jn,dark:zn}:r,i=e.error,a=void 0===i?{light:Dn,main:Bn,dark:Wn}:i,u=e.warning,c=void 0===u?{light:Un,main:Vn,dark:$n}:u,f=e.info,d=void 0===f?{light:Hn,main:qn,dark:Kn}:f,p=e.success,v=void 0===p?{light:Qn,main:Yn,dark:Gn}:p,m=e.type,g=void 0===m?"light":m,y=e.contrastThreshold,b=void 0===y?3:y,w=e.tonalOffset,x=void 0===w?.2:w,S=s(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function E(e){return function(e,t){var n=er(e),r=er(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,rr.text.primary)>=b?rr.text.primary:nr.text.primary}var k=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=l({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error(h(4,t));if("string"!=typeof e.main)throw new Error(h(5,JSON.stringify(e.main)));return or(e,"light",n,x),or(e,"dark",r,x),e.contrastText||(e.contrastText=E(e.main)),e},C={dark:rr,light:nr};return gn(l({common:Nn,type:g,primary:k(n),secondary:k(o,"A400","A200","A700"),error:k(a),warning:k(c),info:k(d),success:k(v),grey:Tn,contrastThreshold:b,getContrastText:E,augmentColor:k,tonalOffset:x},C[g]),S)}function ar(e){return Math.round(1e5*e)/1e5}var lr={textTransform:"uppercase"},ur='"Roboto", "Helvetica", "Arial", sans-serif';function sr(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,o=void 0===r?ur:r,i=n.fontSize,a=void 0===i?14:i,u=n.fontWeightLight,c=void 0===u?300:u,f=n.fontWeightRegular,d=void 0===f?400:f,p=n.fontWeightMedium,h=void 0===p?500:p,v=n.fontWeightBold,m=void 0===v?700:v,g=n.htmlFontSize,y=void 0===g?16:g,b=n.allVariants,w=n.pxToRem,x=s(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]),S=a/14,E=w||function(e){return"".concat(e/y*S,"rem")},k=function(e,t,n,r,i){return l({fontFamily:o,fontWeight:e,fontSize:E(t),lineHeight:n},o===ur?{letterSpacing:"".concat(ar(r/t),"em")}:{},i,b)},C={h1:k(c,96,1.167,-1.5),h2:k(c,60,1.2,-.5),h3:k(d,48,1.167,0),h4:k(d,34,1.235,.25),h5:k(d,24,1.334,0),h6:k(h,20,1.6,.15),subtitle1:k(d,16,1.75,.15),subtitle2:k(h,14,1.57,.1),body1:k(d,16,1.5,.15),body2:k(d,14,1.43,.15),button:k(h,14,1.75,.4,lr),caption:k(d,12,1.66,.4),overline:k(d,12,2.66,1,lr)};return gn(l({htmlFontSize:y,pxToRem:E,round:ar,fontFamily:o,fontSize:a,fontWeightLight:c,fontWeightRegular:d,fontWeightMedium:h,fontWeightBold:m},C),x,{clone:!1})}function cr(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const fr=["none",cr(0,2,1,-1,0,1,1,0,0,1,3,0),cr(0,3,1,-2,0,2,2,0,0,1,5,0),cr(0,3,3,-2,0,3,4,0,0,1,8,0),cr(0,2,4,-1,0,4,5,0,0,1,10,0),cr(0,3,5,-1,0,5,8,0,0,1,14,0),cr(0,3,5,-1,0,6,10,0,0,1,18,0),cr(0,4,5,-2,0,7,10,1,0,2,16,1),cr(0,5,5,-3,0,8,10,1,0,3,14,2),cr(0,5,6,-3,0,9,12,1,0,3,16,2),cr(0,6,6,-3,0,10,14,1,0,4,18,3),cr(0,6,7,-4,0,11,15,1,0,4,20,3),cr(0,7,8,-4,0,12,17,2,0,5,22,4),cr(0,7,8,-4,0,13,19,2,0,5,24,4),cr(0,7,9,-4,0,14,21,2,0,5,26,4),cr(0,8,9,-5,0,15,22,2,0,6,28,5),cr(0,8,10,-5,0,16,24,2,0,6,30,5),cr(0,8,11,-5,0,17,26,2,0,6,32,5),cr(0,9,11,-5,0,18,28,2,0,7,34,6),cr(0,9,12,-6,0,19,29,2,0,7,36,6),cr(0,10,13,-6,0,20,31,3,0,8,38,7),cr(0,10,13,-6,0,21,33,3,0,8,40,7),cr(0,10,14,-6,0,22,35,3,0,8,42,7),cr(0,11,14,-7,0,23,36,3,0,9,44,8),cr(0,11,15,-7,0,24,38,3,0,9,46,8)],dr={borderRadius:4};function pr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||ct(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var hr={xs:0,sm:600,md:960,lg:1280,xl:1920},vr={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(hr[e],"px)")}};const mr=function(e,t){return t?gn(e,t,{clone:!1}):e};var gr={m:"margin",p:"padding"},yr={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},br={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},wr=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=function(e){if(e.length>2){if(!br[e])return[e];e=br[e]}var t=pr(e.split(""),2),n=t[0],r=t[1],o=gr[n],i=yr[r]||"";return Array.isArray(i)?i.map((function(e){return o+e})):[o+i]}(e)),t[e]}}(),xr=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function Sr(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function Er(e){var t=Sr(e.theme);return Object.keys(e).map((function(n){if(-1===xr.indexOf(n))return null;var r=function(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}(wr(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||vr;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===vn(t)){var o=e.theme.breakpoints||vr;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(mr,{})}function kr(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=Sr({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}Er.propTypes={},Er.filterProps=xr;var Cr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Ar={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Pr(e){return"".concat(Math.round(e),"ms")}const Or={easing:Cr,duration:Ar,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?Ar.standard:n,o=t.easing,i=void 0===o?Cr.easeInOut:o,a=t.delay,l=void 0===a?0:a;return s(t,["duration","easing","delay"]),(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof r?r:Pr(r)," ").concat(i," ").concat("string"==typeof l?l:Pr(l))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}},Rr={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},_r=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,o=void 0===r?{}:r,i=e.palette,a=void 0===i?{}:i,l=e.spacing,u=e.typography,c=void 0===u?{}:u,f=s(e,["breakpoints","mixins","palette","spacing","typography"]),d=ir(a),p=On(n),h=kr(l),v=gn({breakpoints:p,direction:"ltr",mixins:_n(p,h,o),overrides:{},palette:d,props:{},shadows:fr,typography:sr(d,c),spacing:h,shape:dr,transitions:Or,zIndex:Rr},f),m=arguments.length,g=new Array(m>1?m-1:0),y=1;y<m;y++)g[y-1]=arguments[y];return g.reduce((function(e,t){return gn(e,t)}),v)}(),Nr=function(t,n){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(r){var o=n.defaultTheme,i=n.withTheme,a=void 0!==i&&i,u=n.name,c=s(n,["defaultTheme","withTheme","name"]),f=u,d=Cn(t,l({defaultTheme:o,Component:r,name:u||r.displayName,classNamePrefix:f},c)),p=e.forwardRef((function(t,n){t.classes;var i,c=t.innerRef,f=s(t,["classes","innerRef"]),p=d(l({},r.defaultProps,t)),h=f;return("string"==typeof u||a)&&(i=Le()||o,u&&(h=An({theme:i,name:u,props:f})),a&&!h.theme&&(h.theme=i)),e.createElement(r,l({ref:c||n,classes:p},h))}));return g()(p,r),p}}(t,l({defaultTheme:_r},n))};var Tr=!0,Mr=!1,Ir=null,Fr={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Lr(e){e.metaKey||e.altKey||e.ctrlKey||(Tr=!0)}function jr(){Tr=!1}function zr(){"hidden"===this.visibilityState&&Mr&&(Tr=!0)}function Dr(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return Tr||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!Fr[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function Br(){Mr=!0,window.clearTimeout(Ir),Ir=window.setTimeout((function(){Mr=!1}),100)}function Wr(){return{isFocusVisible:Dr,onBlurVisible:Br,ref:e.useCallback((function(e){var n,r=t.findDOMNode(e);null!=r&&((n=r.ownerDocument).addEventListener("keydown",Lr,!0),n.addEventListener("mousedown",jr,!0),n.addEventListener("pointerdown",jr,!0),n.addEventListener("touchstart",jr,!0),n.addEventListener("visibilitychange",zr,!0))}),[])}}function Ur(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Vr(t,n){return e.useMemo((function(){return null==t&&null==n?null:function(e){Ur(t,e),Ur(n,e)}}),[t,n])}var $r={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},Hr=e.forwardRef((function(t,n){var r=t.align,o=void 0===r?"inherit":r,i=t.classes,a=t.className,u=t.color,c=void 0===u?"initial":u,f=t.component,d=t.display,h=void 0===d?"initial":d,m=t.gutterBottom,g=void 0!==m&&m,y=t.noWrap,b=void 0!==y&&y,w=t.paragraph,x=void 0!==w&&w,S=t.variant,E=void 0===S?"body1":S,k=t.variantMapping,C=void 0===k?$r:k,A=s(t,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),P=f||(x?"p":C[E]||$r[E])||"span";return e.createElement(P,l({className:p(i.root,a,"inherit"!==E&&i[E],"initial"!==c&&i["color".concat(v(c))],b&&i.noWrap,g&&i.gutterBottom,x&&i.paragraph,"inherit"!==o&&i["align".concat(v(o))],"initial"!==h&&i["display".concat(v(h))]),ref:n},A))}));const qr=Nr((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(Hr);var Kr=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.color,a=void 0===i?"primary":i,u=t.component,c=void 0===u?"a":u,f=t.onBlur,d=t.onFocus,h=t.TypographyClasses,m=t.underline,g=void 0===m?"hover":m,y=t.variant,b=void 0===y?"inherit":y,w=s(t,["classes","className","color","component","onBlur","onFocus","TypographyClasses","underline","variant"]),x=Wr(),S=x.isFocusVisible,E=x.onBlurVisible,k=x.ref,C=e.useState(!1),A=C[0],P=C[1],O=Vr(n,k);return e.createElement(qr,l({className:p(r.root,r["underline".concat(v(g))],o,A&&r.focusVisible,"button"===c&&r.button),classes:h,color:a,component:c,onBlur:function(e){A&&(E(),P(!1)),f&&f(e)},onFocus:function(e){S(e)&&P(!0),d&&d(e)},ref:O,variant:b},w))}));const Qr=Nr({root:{},underlineNone:{textDecoration:"none"},underlineHover:{textDecoration:"none","&:hover":{textDecoration:"underline"}},underlineAlways:{textDecoration:"underline"},button:{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none","&::-moz-focus-inner":{borderStyle:"none"},"&$focusVisible":{outline:"auto"}},focusVisible:{}},{name:"MuiLink"})(Kr);function Yr(e,t){var n={};return Object.keys(e).forEach((function(r){-1===t.indexOf(r)&&(n[r]=e[r])})),n}const Gr=function(t){var n=function(t){return function(n){var r,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=o.name,a=s(o,["name"]),u=i,c=Cn("function"==typeof n?function(e){return{root:function(t){return n(l({theme:e},t))}}}:{root:n},l({Component:t,name:i||t.displayName,classNamePrefix:u},a));n.filterProps&&(r=n.filterProps,delete n.filterProps),n.propTypes&&(n.propTypes,delete n.propTypes);var f=e.forwardRef((function(n,o){var i=n.children,a=n.className,u=n.clone,f=n.component,d=s(n,["children","className","clone","component"]),h=p(c(n).root,a),v=d;if(r&&(v=Yr(v,r)),u)return e.cloneElement(i,l({className:p(i.props.className,h)},v));if("function"==typeof i)return i(l({className:h},v));var m=f||t;return e.createElement(m,l({ref:o,className:h},v),i)}));return g()(f,t),f}}(t);return function(e,t){return n(e,l({defaultTheme:_r},t))}};var Xr=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=t.color,u=void 0===a?"inherit":a,c=t.component,f=void 0===c?"svg":c,d=t.fontSize,h=void 0===d?"default":d,m=t.htmlColor,g=t.titleAccess,y=t.viewBox,b=void 0===y?"0 0 24 24":y,w=s(t,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return e.createElement(f,l({className:p(o.root,i,"inherit"!==u&&o["color".concat(v(u))],"default"!==h&&o["fontSize".concat(v(h))]),focusable:"false",viewBox:b,color:m,"aria-hidden":!g||void 0,role:g?"img":void 0,ref:n},w),r,g?e.createElement("title",null,g):null)}));Xr.muiName="SvgIcon";const Jr=Nr((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(Xr);function Zr(t,n){var r=function(n,r){return e.createElement(Jr,l({ref:r},n),t)};return r.muiName=Jr.muiName,e.memo(e.forwardRef(r))}const eo=Zr(e.createElement("path",{d:"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"}));var to=e.forwardRef((function(t,n){var r,o=t.alt,i=t.children,a=t.classes,u=t.className,c=t.component,f=void 0===c?"div":c,d=t.imgProps,h=t.sizes,v=t.src,m=t.srcSet,g=t.variant,y=void 0===g?"circle":g,b=s(t,["alt","children","classes","className","component","imgProps","sizes","src","srcSet","variant"]),w=function(t){var n=t.src,r=t.srcSet,o=e.useState(!1),i=o[0],a=o[1];return e.useEffect((function(){if(n||r){a(!1);var e=!0,t=new Image;return t.src=n,t.srcSet=r,t.onload=function(){e&&a("loaded")},t.onerror=function(){e&&a("error")},function(){e=!1}}}),[n,r]),i}({src:v,srcSet:m}),x=v||m,S=x&&"error"!==w;return r=S?e.createElement("img",l({alt:o,src:v,srcSet:m,sizes:h,className:a.img},d)):null!=i?i:x&&o?o[0]:e.createElement(eo,{className:a.fallback}),e.createElement(f,l({className:p(a.root,a.system,a[y],u,!S&&a.colorDefault),ref:n},b),r)}));const no=Nr((function(e){return{root:{position:"relative",display:"flex",alignItems:"center",justifyContent:"center",flexShrink:0,width:40,height:40,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(20),lineHeight:1,borderRadius:"50%",overflow:"hidden",userSelect:"none"},colorDefault:{color:e.palette.background.default,backgroundColor:"light"===e.palette.type?e.palette.grey[400]:e.palette.grey[600]},circle:{},circular:{},rounded:{borderRadius:e.shape.borderRadius},square:{borderRadius:0},img:{width:"100%",height:"100%",textAlign:"center",objectFit:"cover",color:"transparent",textIndent:1e4},fallback:{width:"75%",height:"75%"}}}),{name:"MuiAvatar"})(to);var ro=Gr(Qr)({width:"100%",height:42,background:"#146aec",borderRadius:"0 0 10px 10px",color:"white",fontSize:15,fontWeight:600,lineHeight:"42px",boxShadow:"0 1px 1px rgba(20, 106, 236, 0.15)",textDecoration:"none",border:"none",outline:"none",cursor:"pointer",textAlign:"center","&:hover, &:active":{background:"#0047b1",textDecoration:"none"}}),oo=Gr(no)({width:100,height:100}),io=function(t){var n=t.users,r=localStorage.getItem("lastSearchValue");return e.createElement(e.Fragment,null,e.createElement("div",{className:a.found_number},n.length>0?"We found ".concat(n.length," users for your request ").concat(r?"'".concat(r,"'"):""):"You can find any GitHub user you want"),e.createElement("div",{className:a.results},n.map((function(t){return e.createElement("div",{key:t.id,className:a.results_item},e.createElement(oo,{alt:t.login,src:t.avatar_url}),e.createElement("div",{className:a.results_item_login},t.login),e.createElement(ro,{href:t.html_url},"Follow"))}))))};io.propTypes={users:f().array.isRequired};var ao=(0,e.createContext)(),lo=n(8287);o()(lo.Z,{insert:"head",singleton:!1});const uo=lo.Z.locals||{};var so=function(){return e.createElement("div",{className:uo.loading})},co=n(3659);o()(co.Z,{insert:"head",singleton:!1});const fo=co.Z.locals||{};var po="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;function ho(t){var n=e.useRef(t);return po((function(){n.current=t})),e.useCallback((function(){return n.current.apply(void 0,arguments)}),[])}const vo=e.createContext(null);function mo(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function go(e,t,n){return null!=n[t]?n[t]:e.props[t]}function yo(t,n,r){var o=mo(t.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(n,o);return Object.keys(i).forEach((function(a){var l=i[a];if((0,e.isValidElement)(l)){var u=a in n,s=a in o,c=n[a],f=(0,e.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&(0,e.isValidElement)(c)&&(i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:go(l,"exit",t),enter:go(l,"enter",t)})):i[a]=(0,e.cloneElement)(l,{in:!1}):i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:go(l,"exit",t),enter:go(l,"enter",t)})}})),i}var bo=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},wo=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(E(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}S(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=t,o=a,mo(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:go(t,"appear",r),enter:go(t,"enter",r),exit:go(t,"exit",r)})}))):yo(t,i,a),firstRender:!1}},r.handleExited=function(e,t){var n=mo(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=l({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=u(t,["component","childFactory"]),i=this.state.contextValue,a=bo(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(vo.Provider,{value:i},a):e.createElement(vo.Provider,{value:i},e.createElement(n,o,a))},n}(e.Component);wo.propTypes={},wo.defaultProps={component:"div",childFactory:function(e){return e}};const xo=wo;var So="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const Eo=function(t){var n=t.classes,r=t.pulsate,o=void 0!==r&&r,i=t.rippleX,a=t.rippleY,l=t.rippleSize,u=t.in,s=t.onExited,c=void 0===s?function(){}:s,f=t.timeout,d=e.useState(!1),h=d[0],v=d[1],m=p(n.ripple,n.rippleVisible,o&&n.ripplePulsate),g={width:l,height:l,top:-l/2+a,left:-l/2+i},y=p(n.child,h&&n.childLeaving,o&&n.childPulsate),b=ho(c);return So((function(){if(!u){v(!0);var e=setTimeout(b,f);return function(){clearTimeout(e)}}}),[b,u,f]),e.createElement("span",{className:m,style:g},e.createElement("span",{className:y}))};var ko=e.forwardRef((function(t,n){var r=t.center,o=void 0!==r&&r,i=t.classes,a=t.className,u=s(t,["center","classes","className"]),c=e.useState([]),f=c[0],d=c[1],h=e.useRef(0),v=e.useRef(null);e.useEffect((function(){v.current&&(v.current(),v.current=null)}),[f]);var m=e.useRef(!1),g=e.useRef(null),y=e.useRef(null),b=e.useRef(null);e.useEffect((function(){return function(){clearTimeout(g.current)}}),[]);var w=e.useCallback((function(t){var n=t.pulsate,r=t.rippleX,o=t.rippleY,a=t.rippleSize,l=t.cb;d((function(t){return[].concat(ft(t),[e.createElement(Eo,{key:h.current,classes:i,timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:a})])})),h.current+=1,v.current=l}),[i]),x=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,i=void 0!==r&&r,a=t.center,l=void 0===a?o||t.pulsate:a,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&m.current)m.current=!1;else{"touchstart"===e.type&&(m.current=!0);var c,f,d,p=s?null:b.current,h=p?p.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(h.width/2),f=Math.round(h.height/2);else{var v=e.touches?e.touches[0]:e,x=v.clientX,S=v.clientY;c=Math.round(x-h.left),f=Math.round(S-h.top)}if(l)(d=Math.sqrt((2*Math.pow(h.width,2)+Math.pow(h.height,2))/3))%2==0&&(d+=1);else{var E=2*Math.max(Math.abs((p?p.clientWidth:0)-c),c)+2,k=2*Math.max(Math.abs((p?p.clientHeight:0)-f),f)+2;d=Math.sqrt(Math.pow(E,2)+Math.pow(k,2))}e.touches?null===y.current&&(y.current=function(){w({pulsate:i,rippleX:c,rippleY:f,rippleSize:d,cb:n})},g.current=setTimeout((function(){y.current&&(y.current(),y.current=null)}),80)):w({pulsate:i,rippleX:c,rippleY:f,rippleSize:d,cb:n})}}),[o,w]),S=e.useCallback((function(){x({},{pulsate:!0})}),[x]),E=e.useCallback((function(e,t){if(clearTimeout(g.current),"touchend"===e.type&&y.current)return e.persist(),y.current(),y.current=null,void(g.current=setTimeout((function(){E(e,t)})));y.current=null,d((function(e){return e.length>0?e.slice(1):e})),v.current=t}),[]);return e.useImperativeHandle(n,(function(){return{pulsate:S,start:x,stop:E}}),[S,x,E]),e.createElement("span",l({className:p(i.root,a),ref:b},u),e.createElement(xo,{component:null,exit:!0},f))}));const Co=Nr((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(e.memo(ko));var Ao=e.forwardRef((function(n,r){var o=n.action,i=n.buttonRef,a=n.centerRipple,u=void 0!==a&&a,c=n.children,f=n.classes,d=n.className,h=n.component,v=void 0===h?"button":h,m=n.disabled,g=void 0!==m&&m,y=n.disableRipple,b=void 0!==y&&y,w=n.disableTouchRipple,x=void 0!==w&&w,S=n.focusRipple,E=void 0!==S&&S,k=n.focusVisibleClassName,C=n.onBlur,A=n.onClick,P=n.onFocus,O=n.onFocusVisible,R=n.onKeyDown,_=n.onKeyUp,N=n.onMouseDown,T=n.onMouseLeave,M=n.onMouseUp,I=n.onTouchEnd,F=n.onTouchMove,L=n.onTouchStart,j=n.onDragLeave,z=n.tabIndex,D=void 0===z?0:z,B=n.TouchRippleProps,W=n.type,U=void 0===W?"button":W,V=s(n,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),$=e.useRef(null),H=e.useRef(null),q=e.useState(!1),K=q[0],Q=q[1];g&&K&&Q(!1);var Y=Wr(),G=Y.isFocusVisible,X=Y.onBlurVisible,J=Y.ref;function Z(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:x;return ho((function(r){return t&&t(r),!n&&H.current&&H.current[e](r),!0}))}e.useImperativeHandle(o,(function(){return{focusVisible:function(){Q(!0),$.current.focus()}}}),[]),e.useEffect((function(){K&&E&&!b&&H.current.pulsate()}),[b,E,K]);var ee=Z("start",N),te=Z("stop",j),ne=Z("stop",M),re=Z("stop",(function(e){K&&e.preventDefault(),T&&T(e)})),oe=Z("start",L),ie=Z("stop",I),ae=Z("stop",F),le=Z("stop",(function(e){K&&(X(e),Q(!1)),C&&C(e)}),!1),ue=ho((function(e){$.current||($.current=e.currentTarget),G(e)&&(Q(!0),O&&O(e)),P&&P(e)})),se=function(){var e=t.findDOMNode($.current);return v&&"button"!==v&&!("A"===e.tagName&&e.href)},ce=e.useRef(!1),fe=ho((function(e){E&&!ce.current&&K&&H.current&&" "===e.key&&(ce.current=!0,e.persist(),H.current.stop(e,(function(){H.current.start(e)}))),e.target===e.currentTarget&&se()&&" "===e.key&&e.preventDefault(),R&&R(e),e.target===e.currentTarget&&se()&&"Enter"===e.key&&!g&&(e.preventDefault(),A&&A(e))})),de=ho((function(e){E&&" "===e.key&&H.current&&K&&!e.defaultPrevented&&(ce.current=!1,e.persist(),H.current.stop(e,(function(){H.current.pulsate(e)}))),_&&_(e),A&&e.target===e.currentTarget&&se()&&" "===e.key&&!e.defaultPrevented&&A(e)})),pe=v;"button"===pe&&V.href&&(pe="a");var he={};"button"===pe?(he.type=U,he.disabled=g):("a"===pe&&V.href||(he.role="button"),he["aria-disabled"]=g);var ve=Vr(i,r),me=Vr(J,$),ge=Vr(ve,me),ye=e.useState(!1),be=ye[0],we=ye[1];e.useEffect((function(){we(!0)}),[]);var xe=be&&!b&&!g;return e.createElement(pe,l({className:p(f.root,d,K&&[f.focusVisible,k],g&&f.disabled),onBlur:le,onClick:A,onFocus:ue,onKeyDown:fe,onKeyUp:de,onMouseDown:ee,onMouseLeave:re,onMouseUp:ne,onDragLeave:te,onTouchEnd:ie,onTouchMove:ae,onTouchStart:oe,ref:ge,tabIndex:g?-1:D},he,V),c,xe?e.createElement(Co,l({ref:H,center:u},B)):null)}));const Po=Nr({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Ao);var Oo=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=t.color,u=void 0===a?"default":a,c=t.component,f=void 0===c?"button":c,d=t.disabled,h=void 0!==d&&d,m=t.disableElevation,g=void 0!==m&&m,y=t.disableFocusRipple,b=void 0!==y&&y,w=t.endIcon,x=t.focusVisibleClassName,S=t.fullWidth,E=void 0!==S&&S,k=t.size,C=void 0===k?"medium":k,A=t.startIcon,P=t.type,O=void 0===P?"button":P,R=t.variant,_=void 0===R?"text":R,N=s(t,["children","classes","className","color","component","disabled","disableElevation","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),T=A&&e.createElement("span",{className:p(o.startIcon,o["iconSize".concat(v(C))])},A),M=w&&e.createElement("span",{className:p(o.endIcon,o["iconSize".concat(v(C))])},w);return e.createElement(Po,l({className:p(o.root,o[_],i,"inherit"===u?o.colorInherit:"default"!==u&&o["".concat(_).concat(v(u))],"medium"!==C&&[o["".concat(_,"Size").concat(v(C))],o["size".concat(v(C))]],g&&o.disableElevation,h&&o.disabled,E&&o.fullWidth),component:f,disabled:h,focusRipple:!b,focusVisibleClassName:p(o.focusVisible,x),ref:n,type:O},N),e.createElement("span",{className:o.label},T,r,M))}));const Ro=Nr((function(e){return{root:l({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:tr(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:tr(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:tr(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabledBackground)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(tr(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:tr(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(tr(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:tr(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},disableElevation:{boxShadow:"none","&:hover":{boxShadow:"none"},"&$focusVisible":{boxShadow:"none"},"&:active":{boxShadow:"none"},"&$disabled":{boxShadow:"none"}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4,"&$iconSizeSmall":{marginLeft:-2}},endIcon:{display:"inherit",marginRight:-4,marginLeft:8,"&$iconSizeSmall":{marginRight:-2}},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(Oo);var _o=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.color,a=void 0===i?"inherit":i,u=t.component,c=void 0===u?"span":u,f=t.fontSize,d=void 0===f?"default":f,h=s(t,["classes","className","color","component","fontSize"]);return e.createElement(c,l({className:p("material-icons",r.root,o,"inherit"!==a&&r["color".concat(v(a))],"default"!==d&&r["fontSize".concat(v(d))]),"aria-hidden":!0,ref:n},h))}));_o.muiName="Icon";const No=Nr((function(e){return{root:{userSelect:"none",fontSize:e.typography.pxToRem(24),width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(36)}}}),{name:"MuiIcon"})(_o);function To(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e}),{})}var Mo=e.createContext();const Io=Mo;function Fo(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,l=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}function Lo(e,t){return parseInt(e[t],10)||0}var jo="undefined"!=typeof window?e.useLayoutEffect:e.useEffect,zo={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"};const Do=e.forwardRef((function(t,n){var r=t.onChange,o=t.rows,i=t.rowsMax,a=t.rowsMin,u=void 0===a?1:a,c=t.style,f=t.value,d=s(t,["onChange","rows","rowsMax","rowsMin","style","value"]),p=o||u,h=e.useRef(null!=f).current,v=e.useRef(null),m=Vr(n,v),g=e.useRef(null),y=e.useRef(0),b=e.useState({}),w=b[0],x=b[1],S=e.useCallback((function(){var e=v.current,n=window.getComputedStyle(e),r=g.current;r.style.width=n.width,r.value=e.value||t.placeholder||"x","\n"===r.value.slice(-1)&&(r.value+=" ");var o=n["box-sizing"],a=Lo(n,"padding-bottom")+Lo(n,"padding-top"),l=Lo(n,"border-bottom-width")+Lo(n,"border-top-width"),u=r.scrollHeight-a;r.value="x";var s=r.scrollHeight-a,c=u;p&&(c=Math.max(Number(p)*s,c)),i&&(c=Math.min(Number(i)*s,c));var f=(c=Math.max(c,s))+("border-box"===o?a+l:0),d=Math.abs(c-u)<=1;x((function(e){return y.current<20&&(f>0&&Math.abs((e.outerHeightStyle||0)-f)>1||e.overflow!==d)?(y.current+=1,{overflow:d,outerHeightStyle:f}):e}))}),[i,p,t.placeholder]);return e.useEffect((function(){var e=Fo((function(){y.current=0,S()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[S]),jo((function(){S()})),e.useEffect((function(){y.current=0}),[f]),e.createElement(e.Fragment,null,e.createElement("textarea",l({value:f,onChange:function(e){y.current=0,h||S(),r&&r(e)},ref:m,rows:p,style:l({height:w.outerHeightStyle,overflow:w.overflow?"hidden":null},c)},d)),e.createElement("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:g,tabIndex:-1,style:l({},zo,c)}))}));function Bo(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}function Wo(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(Bo(e.value)&&""!==e.value||t&&Bo(e.defaultValue)&&""!==e.defaultValue)}var Uo="undefined"==typeof window?e.useEffect:e.useLayoutEffect,Vo=e.forwardRef((function(t,n){var r=t["aria-describedby"],o=t.autoComplete,i=t.autoFocus,a=t.classes,u=t.className,c=(t.color,t.defaultValue),f=t.disabled,d=t.endAdornment,m=(t.error,t.fullWidth),g=void 0!==m&&m,y=t.id,b=t.inputComponent,w=void 0===b?"input":b,x=t.inputProps,S=void 0===x?{}:x,E=t.inputRef,k=(t.margin,t.multiline),C=void 0!==k&&k,A=t.name,P=t.onBlur,O=t.onChange,R=t.onClick,_=t.onFocus,N=t.onKeyDown,T=t.onKeyUp,M=t.placeholder,I=t.readOnly,F=t.renderSuffix,L=t.rows,j=t.rowsMax,z=t.rowsMin,D=t.startAdornment,B=t.type,W=void 0===B?"text":B,U=t.value,V=s(t,["aria-describedby","autoComplete","autoFocus","classes","className","color","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","rowsMin","startAdornment","type","value"]),$=null!=S.value?S.value:U,H=e.useRef(null!=$).current,q=e.useRef(),K=e.useCallback((function(e){}),[]),Q=Vr(S.ref,K),Y=Vr(E,Q),G=Vr(q,Y),X=e.useState(!1),J=X[0],Z=X[1],ee=e.useContext(Mo),te=To({props:t,muiFormControl:ee,states:["color","disabled","error","hiddenLabel","margin","required","filled"]});te.focused=ee?ee.focused:J,e.useEffect((function(){!ee&&f&&J&&(Z(!1),P&&P())}),[ee,f,J,P]);var ne=ee&&ee.onFilled,re=ee&&ee.onEmpty,oe=e.useCallback((function(e){Wo(e)?ne&&ne():re&&re()}),[ne,re]);Uo((function(){H&&oe({value:$})}),[$,oe,H]),e.useEffect((function(){oe(q.current)}),[]);var ie=w,ae=l({},S,{ref:G});return"string"!=typeof ie?ae=l({inputRef:G,type:W},ae,{ref:null}):C?!L||j||z?(ae=l({rows:L,rowsMax:j},ae),ie=Do):ie="textarea":ae=l({type:W},ae),e.useEffect((function(){ee&&ee.setAdornedStart(Boolean(D))}),[ee,D]),e.createElement("div",l({className:p(a.root,a["color".concat(v(te.color||"primary"))],u,te.disabled&&a.disabled,te.error&&a.error,g&&a.fullWidth,te.focused&&a.focused,ee&&a.formControl,C&&a.multiline,D&&a.adornedStart,d&&a.adornedEnd,"dense"===te.margin&&a.marginDense),onClick:function(e){q.current&&e.currentTarget===e.target&&q.current.focus(),R&&R(e)},ref:n},V),D,e.createElement(Io.Provider,{value:null},e.createElement(ie,l({"aria-invalid":te.error,"aria-describedby":r,autoComplete:o,autoFocus:i,defaultValue:c,disabled:te.disabled,id:y,onAnimationStart:function(e){oe("mui-auto-fill-cancel"===e.animationName?q.current:{value:"x"})},name:A,placeholder:M,readOnly:I,required:te.required,rows:L,value:$,onKeyDown:N,onKeyUp:T},ae,{className:p(a.input,S.className,te.disabled&&a.disabled,C&&a.inputMultiline,te.hiddenLabel&&a.inputHiddenLabel,D&&a.inputAdornedStart,d&&a.inputAdornedEnd,"search"===W&&a.inputTypeSearch,"dense"===te.margin&&a.inputMarginDense),onBlur:function(e){P&&P(e),S.onBlur&&S.onBlur(e),ee&&ee.onBlur?ee.onBlur(e):Z(!1)},onChange:function(e){if(!H){var t=e.target||q.current;if(null==t)throw new Error(h(1));oe({value:t.value})}for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];S.onChange&&S.onChange.apply(S,[e].concat(r)),O&&O.apply(void 0,[e].concat(r))},onFocus:function(e){te.disabled?e.stopPropagation():(_&&_(e),S.onFocus&&S.onFocus(e),ee&&ee.onFocus?ee.onFocus(e):Z(!0))}}))),d,F?F(l({},te,{startAdornment:D})):null)}));const $o=Nr((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},o={opacity:t?.42:.5};return{"@global":{"@keyframes mui-auto-fill":{},"@keyframes mui-auto-fill-cancel":{}},root:l({},e.typography.body1,{color:e.palette.text.primary,lineHeight:"1.1876em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}}),formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},colorSecondary:{},fullWidth:{width:"100%"},input:{font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1876em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},inputMarginDense:{paddingTop:3},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(Vo);var Ho=e.forwardRef((function(t,n){var r=t.disableUnderline,o=t.classes,i=t.fullWidth,a=void 0!==i&&i,u=t.inputComponent,c=void 0===u?"input":u,f=t.multiline,d=void 0!==f&&f,h=t.type,v=void 0===h?"text":h,m=s(t,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return e.createElement($o,l({classes:l({},o,{root:p(o.root,!r&&o.underline),underline:null}),fullWidth:a,inputComponent:c,multiline:d,ref:n,type:v},m))}));Ho.muiName="Input";const qo=Nr((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(t),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(t)}},"&$disabled:before":{borderBottomStyle:"dotted"}},error:{},marginDense:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputTypeSearch:{}}}),{name:"MuiInput"})(Ho);var Ko=e.forwardRef((function(t,n){var r=t.disableUnderline,o=t.classes,i=t.fullWidth,a=void 0!==i&&i,u=t.inputComponent,c=void 0===u?"input":u,f=t.multiline,d=void 0!==f&&f,h=t.type,v=void 0===h?"text":h,m=s(t,["disableUnderline","classes","fullWidth","inputComponent","multiline","type"]);return e.createElement($o,l({classes:l({},o,{root:p(o.root,!r&&o.underline),underline:null}),fullWidth:a,inputComponent:c,multiline:d,ref:n,type:v},m))}));Ko.muiName="Input";const Qo=Nr((function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},colorSecondary:{"&$underline:after":{borderBottomColor:e.palette.secondary.main}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary.main),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottomStyle:"dotted"}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},marginDense:{},multiline:{padding:"27px 12px 10px","&$marginDense":{paddingTop:23,paddingBottom:6}},input:{padding:"27px 12px 10px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},inputMarginDense:{paddingTop:23,paddingBottom:6},inputHiddenLabel:{paddingTop:18,paddingBottom:19,"&$inputMarginDense":{paddingTop:10,paddingBottom:11}},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiFilledInput"})(Ko);function Yo(){return Le()||_r}var Go=e.forwardRef((function(t,n){t.children;var r=t.classes,o=t.className,i=t.label,a=t.labelWidth,u=t.notched,c=t.style,f=s(t,["children","classes","className","label","labelWidth","notched","style"]),d="rtl"===Yo().direction?"right":"left";if(void 0!==i)return e.createElement("fieldset",l({"aria-hidden":!0,className:p(r.root,o),ref:n,style:c},f),e.createElement("legend",{className:p(r.legendLabelled,u&&r.legendNotched)},i?e.createElement("span",null,i):e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})));var h=a>0?.75*a+8:.01;return e.createElement("fieldset",l({"aria-hidden":!0,style:l(Rn({},"padding".concat(v(d)),8),c),className:p(r.root,o),ref:n},f),e.createElement("legend",{className:r.legend,style:{width:u?h:.01}},e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}));const Xo=Nr((function(e){return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden"},legend:{textAlign:"left",padding:0,lineHeight:"11px",transition:e.transitions.create("width",{duration:150,easing:e.transitions.easing.easeOut})},legendLabelled:{display:"block",width:"auto",textAlign:"left",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:e.transitions.create("max-width",{duration:50,easing:e.transitions.easing.easeOut}),"& > span":{paddingLeft:5,paddingRight:5,display:"inline-block"}},legendNotched:{maxWidth:1e3,transition:e.transitions.create("max-width",{duration:100,easing:e.transitions.easing.easeOut,delay:50})}}}),{name:"PrivateNotchedOutline"})(Go);var Jo=e.forwardRef((function(t,n){var r=t.classes,o=t.fullWidth,i=void 0!==o&&o,a=t.inputComponent,u=void 0===a?"input":a,c=t.label,f=t.labelWidth,d=void 0===f?0:f,h=t.multiline,v=void 0!==h&&h,m=t.notched,g=t.type,y=void 0===g?"text":g,b=s(t,["classes","fullWidth","inputComponent","label","labelWidth","multiline","notched","type"]);return e.createElement($o,l({renderSuffix:function(t){return e.createElement(Xo,{className:r.notchedOutline,label:c,labelWidth:d,notched:void 0!==m?m:Boolean(t.startAdornment||t.filled||t.focused)})},classes:l({},r,{root:p(r.root,r.underline),notchedOutline:null}),fullWidth:i,inputComponent:u,multiline:v,ref:n,type:y},b))}));Jo.muiName="Input";const Zo=Nr((function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative",borderRadius:e.shape.borderRadius,"&:hover $notchedOutline":{borderColor:e.palette.text.primary},"@media (hover: none)":{"&:hover $notchedOutline":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},colorSecondary:{"&$focused $notchedOutline":{borderColor:e.palette.secondary.main}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},marginDense:{},multiline:{padding:"18.5px 14px","&$marginDense":{paddingTop:10.5,paddingBottom:10.5}},notchedOutline:{borderColor:t},input:{padding:"18.5px 14px","&:-webkit-autofill":{WebkitBoxShadow:"light"===e.palette.type?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:"light"===e.palette.type?null:"#fff",caretColor:"light"===e.palette.type?null:"#fff",borderRadius:"inherit"}},inputMarginDense:{paddingTop:10.5,paddingBottom:10.5},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}}),{name:"MuiOutlinedInput"})(Jo);function ei(){return e.useContext(Io)}var ti=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=(t.color,t.component),u=void 0===a?"label":a,c=(t.disabled,t.error,t.filled,t.focused,t.required,s(t,["children","classes","className","color","component","disabled","error","filled","focused","required"])),f=To({props:t,muiFormControl:ei(),states:["color","required","focused","disabled","error","filled"]});return e.createElement(u,l({className:p(o.root,o["color".concat(v(f.color||"primary"))],i,f.disabled&&o.disabled,f.error&&o.error,f.filled&&o.filled,f.focused&&o.focused,f.required&&o.required),ref:n},c),r,f.required&&e.createElement("span",{"aria-hidden":!0,className:p(o.asterisk,f.error&&o.error)}," ","*"))}));const ni=Nr((function(e){return{root:l({color:e.palette.text.secondary},e.typography.body1,{lineHeight:1,padding:0,"&$focused":{color:e.palette.primary.main},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),colorSecondary:{"&$focused":{color:e.palette.secondary.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}}),{name:"MuiFormLabel"})(ti);var ri=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.disableAnimation,a=void 0!==i&&i,u=(t.margin,t.shrink),c=(t.variant,s(t,["classes","className","disableAnimation","margin","shrink","variant"])),f=ei(),d=u;void 0===d&&f&&(d=f.filled||f.focused||f.adornedStart);var h=To({props:t,muiFormControl:f,states:["margin","variant"]});return e.createElement(ni,l({"data-shrink":d,className:p(r.root,o,f&&r.formControl,!a&&r.animated,d&&r.shrink,"dense"===h.margin&&r.marginDense,{filled:r.filled,outlined:r.outlined}[h.variant]),classes:{focused:r.focused,disabled:r.disabled,error:r.error,required:r.required,asterisk:r.asterisk},ref:n},c))}));const oi=Nr((function(e){return{root:{display:"block",transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},asterisk:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 20px) scale(1)","&$marginDense":{transform:"translate(12px, 17px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 20px) scale(1)","&$marginDense":{transform:"translate(14px, 12px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}}),{name:"MuiInputLabel"})(ri);function ii(t,n){return e.isValidElement(t)&&-1!==n.indexOf(t.type.muiName)}var ai=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=t.color,u=void 0===a?"primary":a,c=t.component,f=void 0===c?"div":c,d=t.disabled,h=void 0!==d&&d,m=t.error,g=void 0!==m&&m,y=t.fullWidth,b=void 0!==y&&y,w=t.focused,x=t.hiddenLabel,S=void 0!==x&&x,E=t.margin,k=void 0===E?"none":E,C=t.required,A=void 0!==C&&C,P=t.size,O=t.variant,R=void 0===O?"standard":O,_=s(t,["children","classes","className","color","component","disabled","error","fullWidth","focused","hiddenLabel","margin","required","size","variant"]),N=e.useState((function(){var t=!1;return r&&e.Children.forEach(r,(function(e){if(ii(e,["Input","Select"])){var n=ii(e,["Select"])?e.props.input:e;n&&n.props.startAdornment&&(t=!0)}})),t})),T=N[0],M=N[1],I=e.useState((function(){var t=!1;return r&&e.Children.forEach(r,(function(e){ii(e,["Input","Select"])&&Wo(e.props,!0)&&(t=!0)})),t})),F=I[0],L=I[1],j=e.useState(!1),z=j[0],D=j[1],B=void 0!==w?w:z;h&&B&&D(!1);var W=e.useCallback((function(){L(!0)}),[]),U={adornedStart:T,setAdornedStart:M,color:u,disabled:h,error:g,filled:F,focused:B,fullWidth:b,hiddenLabel:S,margin:("small"===P?"dense":void 0)||k,onBlur:function(){D(!1)},onEmpty:e.useCallback((function(){L(!1)}),[]),onFilled:W,onFocus:function(){D(!0)},registerEffect:void 0,required:A,variant:R};return e.createElement(Io.Provider,{value:U},e.createElement(f,l({className:p(o.root,i,"none"!==k&&o["margin".concat(v(k))],b&&o.fullWidth),ref:n},_),r))}));const li=Nr({root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}},{name:"MuiFormControl"})(ai);var ui=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=t.component,u=void 0===a?"p":a,c=(t.disabled,t.error,t.filled,t.focused,t.margin,t.required,t.variant,s(t,["children","classes","className","component","disabled","error","filled","focused","margin","required","variant"])),f=To({props:t,muiFormControl:ei(),states:["variant","margin","disabled","error","filled","focused","required"]});return e.createElement(u,l({className:p(o.root,("filled"===f.variant||"outlined"===f.variant)&&o.contained,i,f.disabled&&o.disabled,f.error&&o.error,f.filled&&o.filled,f.focused&&o.focused,f.required&&o.required,"dense"===f.margin&&o.marginDense),ref:n},c)," "===r?e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):r)}));const si=Nr((function(e){return{root:l({color:e.palette.text.secondary},e.typography.caption,{textAlign:"left",marginTop:3,margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}}),error:{},disabled:{},marginDense:{marginTop:4},contained:{marginLeft:14,marginRight:14},focused:{},filled:{},required:{}}}),{name:"MuiFormHelperText"})(ui);var ci=n(9864);function fi(e){return e&&e.ownerDocument||document}function di(e){return fi(e).defaultView||window}function pi(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}var hi="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;const vi=e.forwardRef((function(n,r){var o=n.children,i=n.container,a=n.disablePortal,l=void 0!==a&&a,u=n.onRendered,s=e.useState(null),c=s[0],f=s[1],d=Vr(e.isValidElement(o)?o.ref:null,r);return hi((function(){l||f(function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(i)||document.body)}),[i,l]),hi((function(){if(c&&!l)return Ur(r,c),function(){Ur(r,null)}}),[r,c,l]),hi((function(){u&&(c||l)&&u()}),[u,c,l]),l?e.isValidElement(o)?e.cloneElement(o,{ref:d}):o:c?t.createPortal(o,c):c}));function mi(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function gi(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function yi(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function bi(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=[t,n].concat(ft(r)),a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&gi(e,o)}))}function wi(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}var xi=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return x(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&gi(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);bi(t,e.mountNode,e.modalRef,r,!0);var o=wi(this.containers,(function(e){return e.container===t}));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=wi(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=function(e,t){var n,r=[],o=[],i=e.container;if(!t.disableScrollLock){if(function(e){var t=fi(e);return t.body===e?di(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(i)){var a=mi();r.push({value:i.style.paddingRight,key:"padding-right",el:i}),i.style["padding-right"]="".concat(yi(i)+a,"px"),n=fi(i).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){o.push(e.style.paddingRight),e.style.paddingRight="".concat(yi(e)+a,"px")}))}var l=i.parentElement,u="HTML"===l.nodeName&&"scroll"===window.getComputedStyle(l)["overflow-y"]?l:i;r.push({value:u.style.overflow,key:"overflow",el:u}),u.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){o[t]?e.style.paddingRight=o[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=wi(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&gi(e.modalRef,!0),bi(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var o=r.modals[r.modals.length-1];o.modalRef&&gi(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();const Si=function(n){var r=n.children,o=n.disableAutoFocus,i=void 0!==o&&o,a=n.disableEnforceFocus,l=void 0!==a&&a,u=n.disableRestoreFocus,s=void 0!==u&&u,c=n.getDoc,f=n.isEnabled,d=n.open,p=e.useRef(),h=e.useRef(null),v=e.useRef(null),m=e.useRef(),g=e.useRef(null),y=e.useCallback((function(e){g.current=t.findDOMNode(e)}),[]),b=Vr(r.ref,y),w=e.useRef();return e.useEffect((function(){w.current=d}),[d]),!w.current&&d&&"undefined"!=typeof window&&(m.current=c().activeElement),e.useEffect((function(){if(d){var e=fi(g.current);i||!g.current||g.current.contains(e.activeElement)||(g.current.hasAttribute("tabIndex")||g.current.setAttribute("tabIndex",-1),g.current.focus());var t=function(){null!==g.current&&(e.hasFocus()&&!l&&f()&&!p.current?g.current&&!g.current.contains(e.activeElement)&&g.current.focus():p.current=!1)},n=function(t){!l&&f()&&9===t.keyCode&&e.activeElement===g.current&&(p.current=!0,t.shiftKey?v.current.focus():h.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var r=setInterval((function(){t()}),50);return function(){clearInterval(r),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),s||(m.current&&m.current.focus&&m.current.focus(),m.current=null)}}}),[i,l,s,f,d]),e.createElement(e.Fragment,null,e.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelStart"}),e.cloneElement(r,{ref:b}),e.createElement("div",{tabIndex:0,ref:v,"data-test":"sentinelEnd"}))};var Ei={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}};const ki=e.forwardRef((function(t,n){var r=t.invisible,o=void 0!==r&&r,i=t.open,a=s(t,["invisible","open"]);return i?e.createElement("div",l({"aria-hidden":!0,ref:n},a,{style:l({},Ei.root,o?Ei.invisible:{},a.style)})):null}));var Ci=new xi;const Ai=e.forwardRef((function(n,r){var o=Le(),i=An({name:"MuiModal",props:l({},n),theme:o}),a=i.BackdropComponent,u=void 0===a?ki:a,c=i.BackdropProps,f=i.children,d=i.closeAfterTransition,p=void 0!==d&&d,h=i.container,v=i.disableAutoFocus,m=void 0!==v&&v,g=i.disableBackdropClick,y=void 0!==g&&g,b=i.disableEnforceFocus,w=void 0!==b&&b,x=i.disableEscapeKeyDown,S=void 0!==x&&x,E=i.disablePortal,k=void 0!==E&&E,C=i.disableRestoreFocus,A=void 0!==C&&C,P=i.disableScrollLock,O=void 0!==P&&P,R=i.hideBackdrop,_=void 0!==R&&R,N=i.keepMounted,T=void 0!==N&&N,M=i.manager,I=void 0===M?Ci:M,F=i.onBackdropClick,L=i.onClose,j=i.onEscapeKeyDown,z=i.onRendered,D=i.open,B=s(i,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),W=e.useState(!0),U=W[0],V=W[1],$=e.useRef({}),H=e.useRef(null),q=e.useRef(null),K=Vr(q,r),Q=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(i),Y=function(){return fi(H.current)},G=function(){return $.current.modalRef=q.current,$.current.mountNode=H.current,$.current},X=function(){I.mount(G(),{disableScrollLock:O}),q.current.scrollTop=0},J=ho((function(){var e=function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(h)||Y().body;I.add(G(),e),q.current&&X()})),Z=e.useCallback((function(){return I.isTopModal(G())}),[I]),ee=ho((function(e){H.current=e,e&&(z&&z(),D&&Z()?X():gi(q.current,!0))})),te=e.useCallback((function(){I.remove(G())}),[I]);if(e.useEffect((function(){return function(){te()}}),[te]),e.useEffect((function(){D?J():Q&&p||te()}),[D,te,Q,p,J]),!T&&!D&&(!Q||U))return null;var ne=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(o||{zIndex:Rr}),re={};return void 0===f.props.tabIndex&&(re.tabIndex=f.props.tabIndex||"-1"),Q&&(re.onEnter=pi((function(){V(!1)}),f.props.onEnter),re.onExited=pi((function(){V(!0),p&&te()}),f.props.onExited)),e.createElement(vi,{ref:ee,container:h,disablePortal:k},e.createElement("div",l({ref:K,onKeyDown:function(e){"Escape"===e.key&&Z()&&(j&&j(e),S||(e.stopPropagation(),L&&L(e,"escapeKeyDown")))},role:"presentation"},B,{style:l({},ne.root,!D&&U?ne.hidden:{},B.style)}),_?null:e.createElement(u,l({open:D,onClick:function(e){e.target===e.currentTarget&&(F&&F(e),!y&&L&&L(e,"backdropClick"))}},c)),e.createElement(Si,{disableEnforceFocus:w,disableAutoFocus:m,disableRestoreFocus:A,getDoc:Y,isEnabled:Z,open:D},e.cloneElement(f,re))))}));var Pi="unmounted",Oi="exited",Ri="entering",_i="entered",Ni="exiting",Ti=function(n){function r(e,t){var r;r=n.call(this,e,t)||this;var o,i=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?i?(o=Oi,r.appearStatus=Ri):o=_i:o=e.unmountOnExit||e.mountOnEnter?Pi:Oi,r.state={status:o},r.nextCallback=null,r}S(r,n),r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Pi?{status:Oi}:null};var o=r.prototype;return o.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},o.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ri&&n!==_i&&(t=Ri):n!==Ri&&n!==_i||(t=Ni)}this.updateStatus(!1,t)},o.componentWillUnmount=function(){this.cancelNextCallback()},o.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},o.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===Ri?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===Oi&&this.setState({status:Pi})},o.performEnter=function(e){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:e,i=this.props.nodeRef?[o]:[t.findDOMNode(this),o],a=i[0],l=i[1],u=this.getTimeouts(),s=o?u.appear:u.enter;e||r?(this.props.onEnter(a,l),this.safeSetState({status:Ri},(function(){n.props.onEntering(a,l),n.onTransitionEnd(s,(function(){n.safeSetState({status:_i},(function(){n.props.onEntered(a,l)}))}))}))):this.safeSetState({status:_i},(function(){n.props.onEntered(a)}))},o.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:t.findDOMNode(this);n?(this.props.onExit(o),this.safeSetState({status:Ni},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:Oi},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:Oi},(function(){e.props.onExited(o)}))},o.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},o.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},o.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},o.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],a=i[0],l=i[1];this.props.addEndListener(a,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},o.render=function(){var t=this.state.status;if(t===Pi)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,u(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(vo.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},r}(e.Component);function Mi(){}Ti.contextType=vo,Ti.propTypes={},Ti.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Mi,onEntering:Mi,onEntered:Mi,onExit:Mi,onExiting:Mi,onExited:Mi},Ti.UNMOUNTED=Pi,Ti.EXITED=Oi,Ti.ENTERING=Ri,Ti.ENTERED=_i,Ti.EXITING=Ni;const Ii=Ti;function Fi(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}function Li(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var ji={entering:{opacity:1,transform:Li(1)},entered:{opacity:1,transform:"none"}},zi=e.forwardRef((function(t,n){var r=t.children,o=t.disableStrictModeCompat,i=void 0!==o&&o,a=t.in,u=t.onEnter,c=t.onEntered,f=t.onEntering,d=t.onExit,p=t.onExited,h=t.onExiting,v=t.style,m=t.timeout,g=void 0===m?"auto":m,y=t.TransitionComponent,b=void 0===y?Ii:y,w=s(t,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),x=e.useRef(),S=e.useRef(),E=Yo(),k=E.unstable_strictMode&&!i,C=e.useRef(null),A=Vr(r.ref,n),P=Vr(k?C:void 0,A),O=function(e){return function(t,n){if(e){var r=pr(k?[C.current,t]:[t,n],2),o=r[0],i=r[1];void 0===i?e(o):e(o,i)}}},R=O(f),_=O((function(e,t){!function(e){e.scrollTop}(e);var n,r=Fi({style:v,timeout:g},{mode:"enter"}),o=r.duration,i=r.delay;"auto"===g?(n=E.transitions.getAutoHeightDuration(e.clientHeight),S.current=n):n=o,e.style.transition=[E.transitions.create("opacity",{duration:n,delay:i}),E.transitions.create("transform",{duration:.666*n,delay:i})].join(","),u&&u(e,t)})),N=O(c),T=O(h),M=O((function(e){var t,n=Fi({style:v,timeout:g},{mode:"exit"}),r=n.duration,o=n.delay;"auto"===g?(t=E.transitions.getAutoHeightDuration(e.clientHeight),S.current=t):t=r,e.style.transition=[E.transitions.create("opacity",{duration:t,delay:o}),E.transitions.create("transform",{duration:.666*t,delay:o||.333*t})].join(","),e.style.opacity="0",e.style.transform=Li(.75),d&&d(e)})),I=O(p);return e.useEffect((function(){return function(){clearTimeout(x.current)}}),[]),e.createElement(b,l({appear:!0,in:a,nodeRef:k?C:void 0,onEnter:_,onEntered:N,onEntering:R,onExit:M,onExited:I,onExiting:T,addEndListener:function(e,t){var n=k?e:t;"auto"===g&&(x.current=setTimeout(n,S.current||0))},timeout:"auto"===g?null:g},w),(function(t,n){return e.cloneElement(r,l({style:l({opacity:0,transform:Li(.75),visibility:"exited"!==t||a?void 0:"hidden"},ji[t],v,r.props.style),ref:P},n))}))}));zi.muiSupportAuto=!0;const Di=zi;var Bi=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,a=void 0===i?"div":i,u=t.square,c=void 0!==u&&u,f=t.elevation,d=void 0===f?1:f,h=t.variant,v=void 0===h?"elevation":h,m=s(t,["classes","className","component","square","elevation","variant"]);return e.createElement(a,l({className:p(r.root,o,"outlined"===v?r.outlined:r["elevation".concat(d)],!c&&r.rounded),ref:n},m))}));const Wi=Nr((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),l({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(Bi);function Ui(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Vi(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function $i(e){return[e.horizontal,e.vertical].map((function(e){return"number"==typeof e?"".concat(e,"px"):e})).join(" ")}function Hi(e){return"function"==typeof e?e():e}var qi=e.forwardRef((function(n,r){var o=n.action,i=n.anchorEl,a=n.anchorOrigin,u=void 0===a?{vertical:"top",horizontal:"left"}:a,c=n.anchorPosition,f=n.anchorReference,d=void 0===f?"anchorEl":f,h=n.children,v=n.classes,m=n.className,g=n.container,y=n.elevation,b=void 0===y?8:y,w=n.getContentAnchorEl,x=n.marginThreshold,S=void 0===x?16:x,E=n.onEnter,k=n.onEntered,C=n.onEntering,A=n.onExit,P=n.onExited,O=n.onExiting,R=n.open,_=n.PaperProps,N=void 0===_?{}:_,T=n.transformOrigin,M=void 0===T?{vertical:"top",horizontal:"left"}:T,I=n.TransitionComponent,F=void 0===I?Di:I,L=n.transitionDuration,j=void 0===L?"auto":L,z=n.TransitionProps,D=void 0===z?{}:z,B=s(n,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","className","container","elevation","getContentAnchorEl","marginThreshold","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),W=e.useRef(),U=e.useCallback((function(e){if("anchorPosition"===d)return c;var t=Hi(i),n=(t&&1===t.nodeType?t:fi(W.current).body).getBoundingClientRect(),r=0===e?u.vertical:"center";return{top:n.top+Ui(n,r),left:n.left+Vi(n,u.horizontal)}}),[i,u.horizontal,u.vertical,c,d]),V=e.useCallback((function(e){var t=0;if(w&&"anchorEl"===d){var n=w(e);if(n&&e.contains(n)){var r=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentElement).scrollTop;return r}(e,n);t=n.offsetTop+n.clientHeight/2-r||0}}return t}),[u.vertical,d,w]),$=e.useCallback((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return{vertical:Ui(e,M.vertical)+t,horizontal:Vi(e,M.horizontal)}}),[M.horizontal,M.vertical]),H=e.useCallback((function(e){var t=V(e),n={width:e.offsetWidth,height:e.offsetHeight},r=$(n,t);if("none"===d)return{top:null,left:null,transformOrigin:$i(r)};var o=U(t),a=o.top-r.vertical,l=o.left-r.horizontal,u=a+n.height,s=l+n.width,c=di(Hi(i)),f=c.innerHeight-S,p=c.innerWidth-S;if(a<S){var h=a-S;a-=h,r.vertical+=h}else if(u>f){var v=u-f;a-=v,r.vertical+=v}if(l<S){var m=l-S;l-=m,r.horizontal+=m}else if(s>p){var g=s-p;l-=g,r.horizontal+=g}return{top:"".concat(Math.round(a),"px"),left:"".concat(Math.round(l),"px"),transformOrigin:$i(r)}}),[i,d,U,V,$,S]),q=e.useCallback((function(){var e=W.current;if(e){var t=H(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin}}),[H]),K=e.useCallback((function(e){W.current=t.findDOMNode(e)}),[]);e.useEffect((function(){R&&q()})),e.useImperativeHandle(o,(function(){return R?{updatePosition:function(){q()}}:null}),[R,q]),e.useEffect((function(){if(R){var e=Fo((function(){q()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[R,q]);var Q=j;"auto"!==j||F.muiSupportAuto||(Q=void 0);var Y=g||(i?fi(Hi(i)).body:void 0);return e.createElement(Ai,l({container:Y,open:R,ref:r,BackdropProps:{invisible:!0},className:p(v.root,m)},B),e.createElement(F,l({appear:!0,in:R,onEnter:E,onEntered:k,onExit:A,onExited:P,onExiting:O,timeout:Q},D,{onEntering:pi((function(e,t){C&&C(e,t),q()}),D.onEntering)}),e.createElement(Wi,l({elevation:b,ref:K},N,{className:p(v.paper,N.className)}),h)))}));const Ki=Nr({root:{},paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}},{name:"MuiPopover"})(qi),Qi=e.createContext({});var Yi=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=t.component,u=void 0===a?"ul":a,c=t.dense,f=void 0!==c&&c,d=t.disablePadding,h=void 0!==d&&d,v=t.subheader,m=s(t,["children","classes","className","component","dense","disablePadding","subheader"]),g=e.useMemo((function(){return{dense:f}}),[f]);return e.createElement(Qi.Provider,{value:g},e.createElement(u,l({className:p(o.root,i,f&&o.dense,!h&&o.padding,v&&o.subheader),ref:n},m),v,r))}));const Gi=Nr({root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{},subheader:{paddingTop:0}},{name:"MuiList"})(Yi);function Xi(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function Ji(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function Zi(e,t){if(void 0===t)return!0;var n=e.innerText;return void 0===n&&(n=e.textContent),0!==(n=n.trim().toLowerCase()).length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function ea(e,t,n,r,o,i){for(var a=!1,l=o(e,t,!!t&&n);l;){if(l===e.firstChild){if(a)return;a=!0}var u=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&Zi(l,i)&&!u)return void l.focus();l=o(e,l,n)}}var ta="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const na=e.forwardRef((function(n,r){var o=n.actions,i=n.autoFocus,a=void 0!==i&&i,u=n.autoFocusItem,c=void 0!==u&&u,f=n.children,d=n.className,p=n.disabledItemsFocusable,h=void 0!==p&&p,v=n.disableListWrap,m=void 0!==v&&v,g=n.onKeyDown,y=n.variant,b=void 0===y?"selectedMenu":y,w=s(n,["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"]),x=e.useRef(null),S=e.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});ta((function(){a&&x.current.focus()}),[a]),e.useImperativeHandle(o,(function(){return{adjustStyleForScrollbar:function(e,t){var n=!x.current.style.width;if(e.clientHeight<x.current.clientHeight&&n){var r="".concat(mi(),"px");x.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=r,x.current.style.width="calc(100% + ".concat(r,")")}return x.current}}}),[]);var E=Vr(e.useCallback((function(e){x.current=t.findDOMNode(e)}),[]),r),k=-1;e.Children.forEach(f,(function(t,n){e.isValidElement(t)&&(t.props.disabled||("selectedMenu"===b&&t.props.selected||-1===k)&&(k=n))}));var C=e.Children.map(f,(function(t,n){if(n===k){var r={};return c&&(r.autoFocus=!0),void 0===t.props.tabIndex&&"selectedMenu"===b&&(r.tabIndex=0),e.cloneElement(t,r)}return t}));return e.createElement(Gi,l({role:"menu",ref:E,className:d,onKeyDown:function(e){var t=x.current,n=e.key,r=fi(t).activeElement;if("ArrowDown"===n)e.preventDefault(),ea(t,r,m,h,Xi);else if("ArrowUp"===n)e.preventDefault(),ea(t,r,m,h,Ji);else if("Home"===n)e.preventDefault(),ea(t,null,m,h,Xi);else if("End"===n)e.preventDefault(),ea(t,null,m,h,Ji);else if(1===n.length){var o=S.current,i=n.toLowerCase(),a=performance.now();o.keys.length>0&&(a-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&i!==o.keys[0]&&(o.repeating=!1)),o.lastTime=a,o.keys.push(i);var l=r&&!o.repeating&&Zi(r,o);o.previousKeyMatched&&(l||ea(t,r,!1,h,Xi,o))?e.preventDefault():o.previousKeyMatched=!1}g&&g(e)},tabIndex:a?0:-1},w),C)}));var ra={vertical:"top",horizontal:"right"},oa={vertical:"top",horizontal:"left"},ia=e.forwardRef((function(n,r){var o=n.autoFocus,i=void 0===o||o,a=n.children,u=n.classes,c=n.disableAutoFocusItem,f=void 0!==c&&c,d=n.MenuListProps,h=void 0===d?{}:d,v=n.onClose,m=n.onEntering,g=n.open,y=n.PaperProps,b=void 0===y?{}:y,w=n.PopoverClasses,x=n.transitionDuration,S=void 0===x?"auto":x,E=n.variant,k=void 0===E?"selectedMenu":E,C=s(n,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","variant"]),A=Yo(),P=i&&!f&&g,O=e.useRef(null),R=e.useRef(null),_=-1;e.Children.map(a,(function(t,n){e.isValidElement(t)&&(t.props.disabled||("menu"!==k&&t.props.selected||-1===_)&&(_=n))}));var N=e.Children.map(a,(function(n,r){return r===_?e.cloneElement(n,{ref:function(e){R.current=t.findDOMNode(e),Ur(n.ref,e)}}):n}));return e.createElement(Ki,l({getContentAnchorEl:function(){return R.current},classes:w,onClose:v,onEntering:function(e,t){O.current&&O.current.adjustStyleForScrollbar(e,A),m&&m(e,t)},anchorOrigin:"rtl"===A.direction?ra:oa,transformOrigin:"rtl"===A.direction?ra:oa,PaperProps:l({},b,{classes:l({},b.classes,{root:u.paper})}),open:g,ref:r,transitionDuration:S},C),e.createElement(na,l({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),v&&v(e,"tabKeyDown"))},actions:O,autoFocus:i&&(-1===_||f),autoFocusItem:P,variant:k},h,{className:p(u.list,h.className)}),N))}));const aa=Nr({paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}},{name:"MuiMenu"})(ia);function la(e,t){return"object"===vn(t)&&null!==t?e===t:String(e)===String(t)}const ua=e.forwardRef((function(t,n){var r=t["aria-label"],o=t.autoFocus,i=t.autoWidth,a=t.children,u=t.classes,c=t.className,f=t.defaultValue,d=t.disabled,m=t.displayEmpty,g=t.IconComponent,y=t.inputRef,b=t.labelId,w=t.MenuProps,x=void 0===w?{}:w,S=t.multiple,E=t.name,k=t.onBlur,C=t.onChange,A=t.onClose,P=t.onFocus,O=t.onOpen,R=t.open,_=t.readOnly,N=t.renderValue,T=t.SelectDisplayProps,M=void 0===T?{}:T,I=t.tabIndex,F=(t.type,t.value),L=t.variant,j=void 0===L?"standard":L,z=s(t,["aria-label","autoFocus","autoWidth","children","classes","className","defaultValue","disabled","displayEmpty","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"]),D=pr(function(t){var n=t.controlled,r=t.default,o=e.useRef(void 0!==n).current,i=e.useState(r),a=i[0],l=i[1];return[o?n:a,e.useCallback((function(e){o||l(e)}),[])]}({controlled:F,default:f,name:"Select"}),2),B=D[0],W=D[1],U=e.useRef(null),V=e.useState(null),$=V[0],H=V[1],q=e.useRef(null!=R).current,K=e.useState(),Q=K[0],Y=K[1],G=e.useState(!1),X=G[0],J=G[1],Z=Vr(n,y);e.useImperativeHandle(Z,(function(){return{focus:function(){$.focus()},node:U.current,value:B}}),[$,B]),e.useEffect((function(){o&&$&&$.focus()}),[o,$]),e.useEffect((function(){if($){var e=fi($).getElementById(b);if(e){var t=function(){getSelection().isCollapsed&&$.focus()};return e.addEventListener("click",t),function(){e.removeEventListener("click",t)}}}}),[b,$]);var ee,te,ne=function(e,t){e?O&&O(t):A&&A(t),q||(Y(i?null:$.clientWidth),J(e))},re=e.Children.toArray(a),oe=function(e){return function(t){var n;if(S||ne(!1,t),S){n=Array.isArray(B)?B.slice():[];var r=B.indexOf(e.props.value);-1===r?n.push(e.props.value):n.splice(r,1)}else n=e.props.value;e.props.onClick&&e.props.onClick(t),B!==n&&(W(n),C&&(t.persist(),Object.defineProperty(t,"target",{writable:!0,value:{value:n,name:E}}),C(t,e)))}},ie=null!==$&&(q?R:X);delete z["aria-invalid"];var ae=[],le=!1;(Wo({value:B})||m)&&(N?ee=N(B):le=!0);var ue=re.map((function(t){if(!e.isValidElement(t))return null;var n;if(S){if(!Array.isArray(B))throw new Error(h(2));(n=B.some((function(e){return la(e,t.props.value)})))&&le&&ae.push(t.props.children)}else(n=la(B,t.props.value))&&le&&(te=t.props.children);return e.cloneElement(t,{"aria-selected":n?"true":void 0,onClick:oe(t),onKeyUp:function(e){" "===e.key&&e.preventDefault(),t.props.onKeyUp&&t.props.onKeyUp(e)},role:"option",selected:n,value:void 0,"data-value":t.props.value})}));le&&(ee=S?ae.join(", "):te);var se,ce=Q;!i&&q&&$&&(ce=$.clientWidth),se=void 0!==I?I:d?null:0;var fe=M.id||(E?"mui-component-select-".concat(E):void 0);return e.createElement(e.Fragment,null,e.createElement("div",l({className:p(u.root,u.select,u.selectMenu,u[j],c,d&&u.disabled),ref:H,tabIndex:se,role:"button","aria-disabled":d?"true":void 0,"aria-expanded":ie?"true":void 0,"aria-haspopup":"listbox","aria-label":r,"aria-labelledby":[b,fe].filter(Boolean).join(" ")||void 0,onKeyDown:function(e){_||-1!==[" ","ArrowUp","ArrowDown","Enter"].indexOf(e.key)&&(e.preventDefault(),ne(!0,e))},onMouseDown:d||_?null:function(e){0===e.button&&(e.preventDefault(),$.focus(),ne(!0,e))},onBlur:function(e){!ie&&k&&(e.persist(),Object.defineProperty(e,"target",{writable:!0,value:{value:B,name:E}}),k(e))},onFocus:P},M,{id:fe}),function(e){return null==e||"string"==typeof e&&!e.trim()}(ee)?e.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}}):ee),e.createElement("input",l({value:Array.isArray(B)?B.join(","):B,name:E,ref:U,"aria-hidden":!0,onChange:function(e){var t=re.map((function(e){return e.props.value})).indexOf(e.target.value);if(-1!==t){var n=re[t];W(n.props.value),C&&C(e,n)}},tabIndex:-1,className:u.nativeInput,autoFocus:o},z)),e.createElement(g,{className:p(u.icon,u["icon".concat(v(j))],ie&&u.iconOpen,d&&u.disabled)}),e.createElement(aa,l({id:"menu-".concat(E||""),anchorEl:$,open:ie,onClose:function(e){ne(!1,e)}},x,{MenuListProps:l({"aria-labelledby":b,role:"listbox",disableListWrap:!0},x.MenuListProps),PaperProps:l({},x.PaperProps,{style:l({minWidth:ce},null!=x.PaperProps?x.PaperProps.style:null)})}),ue))})),sa=Zr(e.createElement("path",{d:"M7 10l5 5 5-5z"})),ca=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.disabled,a=t.IconComponent,u=t.inputRef,c=t.variant,f=void 0===c?"standard":c,d=s(t,["classes","className","disabled","IconComponent","inputRef","variant"]);return e.createElement(e.Fragment,null,e.createElement("select",l({className:p(r.root,r.select,r[f],o,i&&r.disabled),disabled:i,ref:u||n},d)),t.multiple?null:e.createElement(a,{className:p(r.icon,r["icon".concat(v(f))],i&&r.disabled)}))}));var fa=function(e){return{root:{},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",borderRadius:0,minWidth:16,cursor:"pointer","&:focus":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:e.palette.background.paper},"&&":{paddingRight:24}},filled:{"&&":{paddingRight:32}},outlined:{borderRadius:e.shape.borderRadius,"&&":{paddingRight:32}},selectMenu:{height:"auto",minHeight:"1.1876em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",pointerEvents:"none",color:e.palette.action.active,"&$disabled":{color:e.palette.action.disabled}},iconOpen:{transform:"rotate(180deg)"},iconFilled:{right:7},iconOutlined:{right:7},nativeInput:{bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%"}}},da=e.createElement(qo,null),pa=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.IconComponent,a=void 0===i?sa:i,u=t.input,c=void 0===u?da:u,f=t.inputProps,d=(t.variant,s(t,["children","classes","IconComponent","input","inputProps","variant"])),p=To({props:t,muiFormControl:ei(),states:["variant"]});return e.cloneElement(c,l({inputComponent:ca,inputProps:l({children:r,classes:o,IconComponent:a,variant:p.variant,type:void 0},f,c?c.props.inputProps:{}),ref:n},d))}));pa.muiName="Select",Nr(fa,{name:"MuiNativeSelect"})(pa);var ha=fa,va=e.createElement(qo,null),ma=e.createElement(Qo,null),ga=e.forwardRef((function t(n,r){var o=n.autoWidth,i=void 0!==o&&o,a=n.children,u=n.classes,c=n.displayEmpty,f=void 0!==c&&c,d=n.IconComponent,p=void 0===d?sa:d,h=n.id,v=n.input,m=n.inputProps,g=n.label,y=n.labelId,b=n.labelWidth,w=void 0===b?0:b,x=n.MenuProps,S=n.multiple,E=void 0!==S&&S,k=n.native,C=void 0!==k&&k,A=n.onClose,P=n.onOpen,O=n.open,R=n.renderValue,_=n.SelectDisplayProps,N=n.variant,T=void 0===N?"standard":N,M=s(n,["autoWidth","children","classes","displayEmpty","IconComponent","id","input","inputProps","label","labelId","labelWidth","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"]),I=C?ca:ua,F=To({props:n,muiFormControl:ei(),states:["variant"]}).variant||T,L=v||{standard:va,outlined:e.createElement(Zo,{label:g,labelWidth:w}),filled:ma}[F];return e.cloneElement(L,l({inputComponent:I,inputProps:l({children:a,IconComponent:p,variant:F,type:void 0,multiple:E},C?{id:h}:{autoWidth:i,displayEmpty:f,labelId:y,MenuProps:x,onClose:A,onOpen:P,open:O,renderValue:R,SelectDisplayProps:l({id:h},_)},m,{classes:m?Ne({baseClasses:u,newClasses:m.classes,Component:t}):u},v?v.props.inputProps:{}),ref:r},M))}));ga.muiName="Select";const ya=Nr(ha,{name:"MuiSelect"})(ga);var ba={standard:qo,filled:Qo,outlined:Zo},wa=e.forwardRef((function(t,n){var r=t.autoComplete,o=t.autoFocus,i=void 0!==o&&o,a=t.children,u=t.classes,c=t.className,f=t.color,d=void 0===f?"primary":f,h=t.defaultValue,v=t.disabled,m=void 0!==v&&v,g=t.error,y=void 0!==g&&g,b=t.FormHelperTextProps,w=t.fullWidth,x=void 0!==w&&w,S=t.helperText,E=t.hiddenLabel,k=t.id,C=t.InputLabelProps,A=t.inputProps,P=t.InputProps,O=t.inputRef,R=t.label,_=t.multiline,N=void 0!==_&&_,T=t.name,M=t.onBlur,I=t.onChange,F=t.onFocus,L=t.placeholder,j=t.required,z=void 0!==j&&j,D=t.rows,B=t.rowsMax,W=t.select,U=void 0!==W&&W,V=t.SelectProps,$=t.type,H=t.value,q=t.variant,K=void 0===q?"standard":q,Q=s(t,["autoComplete","autoFocus","children","classes","className","color","defaultValue","disabled","error","FormHelperTextProps","fullWidth","helperText","hiddenLabel","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]),Y={};if("outlined"===K&&(C&&void 0!==C.shrink&&(Y.notched=C.shrink),R)){var G,X=null!==(G=null==C?void 0:C.required)&&void 0!==G?G:z;Y.label=e.createElement(e.Fragment,null,R,X&&" *")}U&&(V&&V.native||(Y.id=void 0),Y["aria-describedby"]=void 0);var J=S&&k?"".concat(k,"-helper-text"):void 0,Z=R&&k?"".concat(k,"-label"):void 0,ee=ba[K],te=e.createElement(ee,l({"aria-describedby":J,autoComplete:r,autoFocus:i,defaultValue:h,fullWidth:x,multiline:N,name:T,rows:D,rowsMax:B,type:$,value:H,id:k,inputRef:O,onBlur:M,onChange:I,onFocus:F,placeholder:L,inputProps:A},Y,P));return e.createElement(li,l({className:p(u.root,c),disabled:m,error:y,fullWidth:x,hiddenLabel:E,ref:n,required:z,color:d,variant:K},Q),R&&e.createElement(oi,l({htmlFor:k,id:Z},C),R),U?e.createElement(ya,l({"aria-describedby":J,id:k,labelId:Z,value:H,input:te},V),a):te,S&&e.createElement(si,l({id:J},b),S))}));const xa=Nr({root:{}},{name:"MuiTextField"})(wa);var Sa=e.createContext(null),Ea=function(e){e()},ka=function(){return Ea},Ca={notify:function(){}},Aa=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=Ca,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=ka(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=Ca)},e}();const Pa=function(t){var n=t.store,r=t.context,o=t.children,i=(0,e.useMemo)((function(){var e=new Aa(n);return e.onStateChange=e.notifyNestedSubs,{store:n,subscription:e}}),[n]),a=(0,e.useMemo)((function(){return n.getState()}),[n]);(0,e.useEffect)((function(){var e=i.subscription;return e.trySubscribe(),a!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var l=r||Sa;return e.createElement(l.Provider,{value:i},o)};var Oa="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect,Ra=[],_a=[null,null];function Na(e,t){var n=e[1];return[t.payload,n+1]}function Ta(e,t,n){Oa((function(){return e.apply(void 0,t)}),n)}function Ma(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function Ia(e,t,n,r,o,i,a,l,u,s){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||u():(i.current=e,l.current=e,a.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var Fa=function(){return[null,0]};function La(t,n){void 0===n&&(n={});var r=n,o=r.getDisplayName,i=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,a=r.methodName,s=void 0===a?"connectAdvanced":a,c=r.renderCountProp,f=void 0===c?void 0:c,d=r.shouldHandleStateChanges,p=void 0===d||d,h=r.storeKey,v=void 0===h?"store":h,m=(r.withRef,r.forwardRef),y=void 0!==m&&m,b=r.context,w=void 0===b?Sa:b,x=u(r,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),S=w;return function(n){var r=n.displayName||n.name||"Component",o=i(r),a=l({},x,{getDisplayName:i,methodName:s,renderCountProp:f,shouldHandleStateChanges:p,storeKey:v,displayName:o,wrappedComponentName:r,WrappedComponent:n}),c=x.pure,d=c?e.useMemo:function(e){return e()};function h(r){var o=(0,e.useMemo)((function(){var e=r.reactReduxForwardedRef,t=u(r,["reactReduxForwardedRef"]);return[r.context,e,t]}),[r]),i=o[0],s=o[1],c=o[2],f=(0,e.useMemo)((function(){return i&&i.Consumer&&(0,ci.isContextConsumer)(e.createElement(i.Consumer,null))?i:S}),[i,S]),h=(0,e.useContext)(f),v=Boolean(r.store)&&Boolean(r.store.getState)&&Boolean(r.store.dispatch);Boolean(h)&&Boolean(h.store);var m=v?r.store:h.store,g=(0,e.useMemo)((function(){return function(e){return t(e.dispatch,a)}(m)}),[m]),y=(0,e.useMemo)((function(){if(!p)return _a;var e=new Aa(m,v?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[m,v,h]),b=y[0],w=y[1],x=(0,e.useMemo)((function(){return v?h:l({},h,{subscription:b})}),[v,h,b]),E=(0,e.useReducer)(Na,Ra,Fa),k=E[0][0],C=E[1];if(k&&k.error)throw k.error;var A=(0,e.useRef)(),P=(0,e.useRef)(c),O=(0,e.useRef)(),R=(0,e.useRef)(!1),_=d((function(){return O.current&&c===P.current?O.current:g(m.getState(),c)}),[m,k,c]);Ta(Ma,[P,A,R,c,_,O,w]),Ta(Ia,[p,m,b,g,P,A,R,O,w,C],[m,b,g]);var N=(0,e.useMemo)((function(){return e.createElement(n,l({},_,{ref:s}))}),[s,n,_]);return(0,e.useMemo)((function(){return p?e.createElement(f.Provider,{value:x},N):N}),[f,N,x])}var m=c?e.memo(h):h;if(m.WrappedComponent=n,m.displayName=o,y){var b=e.forwardRef((function(t,n){return e.createElement(m,l({},t,{reactReduxForwardedRef:n}))}));return b.displayName=o,b.WrappedComponent=n,g()(b,n)}return g()(m,n)}}function ja(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function za(e,t){if(ja(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!ja(e[n[o]],t[n[o]]))return!1;return!0}var Da=n(7121),Ba=function(){return Math.random().toString(36).substring(7).split("").join(".")},Wa={INIT:"@@redux/INIT"+Ba(),REPLACE:"@@redux/REPLACE"+Ba(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Ba()}};function Ua(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Va(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function $a(e,t){return function(){return t(e.apply(this,arguments))}}function Ha(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function qa(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function Ka(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=qa(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=qa(o),o=r(t,n)),o},r}}const Qa=[function(e){return"function"==typeof e?Ka(e):void 0},function(e){return e?void 0:Ha((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?Ha((function(t){return function(e,t){if("function"==typeof e)return $a(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=$a(o,t))}return n}(e,t)})):void 0}],Ya=[function(e){return"function"==typeof e?Ka(e):void 0},function(e){return e?void 0:Ha((function(){return{}}))}];function Ga(e,t,n){return l({},n,e,t)}const Xa=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,l){var u=e(t,n,l);return a?o&&i(u,r)||(r=u):(a=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return Ga}}];function Ja(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function Za(e,t,n,r,o){var i,a,l,u,s,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,h){return p?function(o,p){var h,v,m=!f(p,a),g=!c(o,i);return i=o,a=p,m&&g?(l=e(i,a),t.dependsOnOwnProps&&(u=t(r,a)),s=n(l,u,a)):m?(e.dependsOnOwnProps&&(l=e(i,a)),t.dependsOnOwnProps&&(u=t(r,a)),s=n(l,u,a)):g?(h=e(i,a),v=!d(h,l),l=h,v&&(s=n(l,u,a)),s):s}(o,h):(l=e(i=o,a=h),u=t(r,a),s=n(l,u,a),p=!0,s)}}function el(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=u(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),l=r(e,i),s=o(e,i);return(i.pure?Za:Ja)(a,l,s,e,i)}function tl(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function nl(e,t){return e===t}function rl(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?La:n,o=t.mapStateToPropsFactories,i=void 0===o?Ya:o,a=t.mapDispatchToPropsFactories,s=void 0===a?Qa:a,c=t.mergePropsFactories,f=void 0===c?Xa:c,d=t.selectorFactory,p=void 0===d?el:d;return function(e,t,n,o){void 0===o&&(o={});var a=o,c=a.pure,d=void 0===c||c,h=a.areStatesEqual,v=void 0===h?nl:h,m=a.areOwnPropsEqual,g=void 0===m?za:m,y=a.areStatePropsEqual,b=void 0===y?za:y,w=a.areMergedPropsEqual,x=void 0===w?za:w,S=u(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=tl(e,i,"mapStateToProps"),k=tl(t,s,"mapDispatchToProps"),C=tl(n,f,"mergeProps");return r(p,l({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:k,initMergeProps:C,pure:d,areStatesEqual:v,areOwnPropsEqual:g,areStatePropsEqual:b,areMergedPropsEqual:x},S))}}const ol=rl();var il;function al(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ll(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ll(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ll(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}il=t.unstable_batchedUpdates,Ea=il;var ul=Gr(Ro)({background:"#e21e35",width:"15%",height:54,minWidth:110,borderRadius:"0 5px 5px 0",fontSize:15,fontWeight:600,letterSpacing:"0.005em",padding:"2px 0 0",boxShadow:"0 2px 1px #c20017","&:hover, &:active":{background:"#bf0016",boxShadow:"0 2px 1px #9e0012"},"& .MuiButton-label":{fontWeight:600}}),sl=Nr({root:{fontSize:17,color:"#333",fontWeight:600,borderRadius:"5px 0 0 5px","& .MuiOutlinedInput-root":{borderRadius:"5px 0 0 5px"}}})(xa);const cl=ol((function(e){return{searchValue:e.searchValue}}),{setSearchValue:function(e){return{type:"SET_SEARCH_VALUE",payload:{value:e}}}})((function(){var t=al((0,e.useState)(""),2),n=t[0],r=t[1],o=al((0,e.useState)(""),2),i=o[0],a=o[1],l=(0,e.useContext)(ao),u=l.loading,s=l.users,c=l.fetchUsers;return(0,e.useEffect)((function(){var e=JSON.parse(localStorage.getItem("cashedUsers"));e&&a(e)}),[]),e.createElement(e.Fragment,null,e.createElement("form",{className:fo.search,onSubmit:function(e){e.preventDefault(),n.trim()&&(c(n),r(""))},noValidate:!0,autoComplete:"off"},e.createElement(sl,{id:"outlined-search",label:"Find a user",type:"search",variant:"outlined",value:n,onChange:function(e){return r(e.target.value)},fullWidth:!0}),e.createElement(ul,{variant:"contained",color:"secondary",type:"submit"},e.createElement(No,null,"search"),"Search")),u?e.createElement(so,null):e.createElement(io,{users:s.length>0?s:i||[]}))}));var fl,dl="SHOW_LOADER",pl="FETCH_USERS";function hl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hl(Object(n),!0).forEach((function(t){ml(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ml(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var gl=(ml(fl={},dl,(function(e){return vl(vl({},e),{},{loading:!0})})),ml(fl,pl,(function(e,t){var n=t.payload;return vl(vl({},e),{},{users:n,loading:!1})})),ml(fl,"DEFAULT",(function(e){return e})),fl),yl=function(e,t){return(gl[t.type]||gl.DEFAULT)(e,t)};"undefined"==typeof window||!window.document||window.document.createElement;var bl=1073741823,wl="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function xl(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const Sl=e.createContext||function(t,n){var r,o,i="__create-react-context-"+function(){var e="__global_unique_id__";return wl[e]=(wl[e]||0)+1}()+"__",a=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=xl(t.props.value),t}S(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[i]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?t=0:(t="function"==typeof n?n(r,o):bl,0!=(t|=0)&&this.emitter.set(e.value,t))}var i,a},r.render=function(){return this.props.children},t}(e.Component);a.childContextTypes=((r={})[i]=f().object.isRequired,r);var l=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}S(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?bl:t},r.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?bl:e},r.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},r.getValue=function(){return this.context[i]?this.context[i].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return l.contextTypes=((o={})[i]=f().object,o),{Provider:a,Consumer:l}};n(9658);var El=function(e){var t=Sl();return t.displayName="Router-History",t}(),kl=function(e){var t=Sl();return t.displayName="Router",t}();e.Component;e.Component,e.Component;e.Component,e.Component,e.Component;var Cl=e.useContext;function Al(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Al(Object(n),!0).forEach((function(t){Ol(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Al(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ol(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Rl(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function _l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Nl=function(t){var n,r,o=t.children,i=Cl(El),a=(n=(0,e.useReducer)(yl,{users:[],loading:!1}),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,t){if(e){if("string"==typeof e)return _l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_l(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),l=a[0],u=a[1],s=function(){return u({type:dl})},c=function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var n,r,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return s(),e.prev=1,e.next=4,fetch("https://api.github.com/search/users?q=".concat(t));case 4:return n=e.sent,e.next=7,n.json();case 7:r=e.sent,o=r.items.map((function(e){return Pl({},e)})),localStorage.setItem("cashedUsers",JSON.stringify(o)),localStorage.setItem("lastSearchValue",t),i.push({pathname:"/",search:"?search=".concat(t)}),u({type:pl,payload:o}),e.next=18;break;case 15:throw e.prev=15,e.t0=e.catch(1),new Error("Oops, something went wrong");case 18:case"end":return e.stop()}}),e,null,[[1,15]])})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Rl(i,r,o,a,l,"next",e)}function l(e){Rl(i,r,o,a,l,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}();return e.createElement(ao.Provider,{value:{showLoader:s,fetchUsers:c,loading:l.loading,users:l.users}},o)};Nl.propTypes={children:f().node.isRequired};const Tl=function(){return e.createElement(Nl,null,e.createElement("div",{className:"app_container"},e.createElement(cl,null)))},Ml=n.p+"c8007a9fb185cb152ee65d4f3057b51f.png";var Il=Gr(qr)({margin:"50px 0 40px"}),Fl=Gr(no)({width:100,height:100}),Ll=function(){return e.createElement("div",{className:"app_container"},e.createElement(Il,null,"GitHub Users App – a simple application that allows you to find any github user quickly and effortlessly. Try it now 😈"),e.createElement(Fl,{alt:"github icon",src:Ml}))};const jl=function(){return e.createElement(e.Fragment,null,e.createElement(Tl,null),e.createElement(Ll,null))};function zl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Dl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zl(Object(n),!0).forEach((function(t){Bl(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Bl(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Wl={searchValue:""},Ul=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,a=n,l=[],u=l,s=!1;function c(){u===l&&(u=l.slice())}function f(){if(s)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(s)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),u.push(e),function(){if(t){if(s)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=u.indexOf(e);u.splice(n,1),l=null}}}function p(e){if(!Ua(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(s)throw new Error("Reducers may not dispatch actions.");try{s=!0,a=i(a,e)}finally{s=!1}for(var t=l=u,n=0;n<t.length;n++)(0,t[n])();return e}function h(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,p({type:Wa.REPLACE})}function v(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[Da.Z]=function(){return this},e}return p({type:Wa.INIT}),(o={dispatch:p,subscribe:d,getState:f,replaceReducer:h})[Da.Z]=v,o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Wa.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:Wa.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+Wa.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},l=0;l<a.length;l++){var u=a[l],s=n[u],c=e[u],f=s(c,t);if(void 0===f){var d=Va(u,t);throw new Error(d)}o[u]=f,r=r||f!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}({searchValue:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Wl,t=arguments.length>1?arguments[1]:void 0,n=t.type,r=t.payload;switch(n){case"SET_SEARCH_VALUE":return Dl(Dl({},e),{},{searchValue:r});default:return e}}})),Vl=document.getElementById("root");t.render(e.createElement(Pa,{store:Ul},e.createElement(jl,null)),Vl)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvbm9Db25mbGljdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZXM2L2luZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3RyaW0tZW5kLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9jb21wb25lbnRzL0xvYWRlci9Mb2FkZXIubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9jb21wb25lbnRzL1Jlc3VsdHMvUmVzdWx0cy5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaC5tb2R1bGUuc2NzcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2dvZGVsLXRhc2svd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2dvZGVsLXRhc2svd2VicGFjay9ydW50aW1lL2hhcm1vbnkgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9nb2RlbC10YXNrL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9jb21wb25lbnRzL1Jlc3VsdHMvUmVzdWx0cy5tb2R1bGUuc2Nzcz80ZmFkIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm0uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXNtL2Zvcm1hdE11aUVycm9yTWVzc2FnZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2pzcy9kaXN0L2pzcy5lc20uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tZXJnZUNsYXNzZXMvbWVyZ2VDbGFzc2VzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tdWx0aUtleVN0b3JlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vdXNlVGhlbWUvVGhlbWVDb250ZXh0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vdXNlVGhlbWUvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1uZXN0ZWQvZGlzdC9qc3MtcGx1Z2luLW5lc3RlZC5lc20uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC9kaXN0L2pzcy1wbHVnaW4tZGVmYXVsdC11bml0LmVzbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5TGlrZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9kZWVwbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL2dldFN0eWxlc0NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2luZGlnby5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFwZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL3NwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9tZW1vaXplLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy90cmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9kZWZhdWx0VGhlbWUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vd2l0aFN0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3NldFJlZi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VGb3JrUmVmLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9MaW5rL0xpbmsuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9zdHlsZWQvc3R5bGVkLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zdHlsZWQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vaW50ZXJuYWwvc3ZnLWljb25zL1BlcnNvbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9BdmF0YXIvQXZhdGFyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvY29tcG9uZW50cy9SZXN1bHRzL1Jlc3VsdHMuanN4Iiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvY29udGV4dC9yZXN1bHRzQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzcz9hZWU3Iiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvY29tcG9uZW50cy9Mb2FkZXIvTG9hZGVyLmpzeCIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaC5tb2R1bGUuc2Nzcz9mMGU0Iiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXBDb250ZXh0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbi9CdXR0b24uanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSWNvbi9JY29uLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RleHRhcmVhQXV0b3NpemUvVGV4dGFyZWFBdXRvc2l6ZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSW5wdXRCYXNlL0lucHV0QmFzZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dC9JbnB1dC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9GaWxsZWRJbnB1dC9GaWxsZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vT3V0bGluZWRJbnB1dC9Ob3RjaGVkT3V0bGluZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9PdXRsaW5lZElucHV0L091dGxpbmVkSW5wdXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUxhYmVsL0Zvcm1MYWJlbC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dExhYmVsL0lucHV0TGFiZWwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0Zvcm1IZWxwZXJUZXh0L0Zvcm1IZWxwZXJUZXh0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvb3duZXJXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BvcnRhbC9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZ2V0U2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Nb2RhbC9Nb2RhbE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9VbnN0YWJsZV9UcmFwRm9jdXMvVW5zdGFibGVfVHJhcEZvY3VzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL1NpbXBsZUJhY2tkcm9wLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS90cmFuc2l0aW9ucy91dGlscy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Hcm93L0dyb3cuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9wb3Zlci9Qb3BvdmVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0xpc3QvTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTGlzdC9MaXN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01lbnVMaXN0L01lbnVMaXN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01lbnUvTWVudS5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TZWxlY3QvU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTmF0aXZlU2VsZWN0L05hdGl2ZVNlbGVjdC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TZWxlY3QvU2VsZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1RleHRGaWVsZC9UZXh0RmllbGQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvY29tcG9uZW50cy9TZWFyY2gvU2VhcmNoLmpzeCIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vc3JjL2FjdGlvbnMvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vc3JjL2NvbnRleHQvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9jb250ZXh0L3Jlc3VsdHNSZWR1Y2VyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9nb2RlbC10YXNrLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvY29udGV4dC9yZXN1bHRzU3RhdGUuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9jb21wb25lbnRzL0hvbWUvSG9tZS5qc3giLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9pY29ucy9naXRodWIucG5nIiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvY29tcG9uZW50cy9BYm91dC9BYm91dC5qc3giLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9jb21wb25lbnRzL0FwcC9BcHAuanN4Iiwid2VicGFjazovL2dvZGVsLXRhc2svLi9zcmMvcmVkdWNlcnMvcm9vdFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vZ29kZWwtdGFzay8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXQiLCJUeXBlRXJyb3IiLCJpc09iamVjdCIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiYSIsImNhbGwiLCJiIiwiYyIsImFwcGx5IiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsImdsb2JhbCIsImN0eCIsImhpZGUiLCJoYXMiLCIkZXhwb3J0IiwidHlwZSIsIm5hbWUiLCJzb3VyY2UiLCJrZXkiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJ0YXJnZXQiLCJDIiwidGhpcyIsIkZ1bmN0aW9uIiwidmlydHVhbCIsIlIiLCJVIiwiZXhlYyIsImUiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImhhc093blByb3BlcnR5IiwiZFAiLCJjcmVhdGVEZXNjIiwib2JqZWN0IiwidmFsdWUiLCJmIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIkF0dHJpYnV0ZXMiLCJiaXRtYXAiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWwiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJjb2YiLCJtc2ciLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJBcnJheSIsInByb3RvdHlwZSIsImF0IiwiaW5kZXgiLCJ1bmljb2RlIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsInRvT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwidG9MZW5ndGgiLCJjb3B5V2l0aGluIiwic3RhcnQiLCJsZW4iLCJ0byIsImZyb20iLCJlbmQiLCJjb3VudCIsIm1pbiIsImluYyIsImFMZW4iLCJlbmRQb3MiLCJ0b0lPYmplY3QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJJT2JqZWN0IiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjcmVhdGUiLCJjYWxsYmFja2ZuIiwicmVzIiwicmVzdWx0IiwicHVzaCIsIm1lbW8iLCJpc1JpZ2h0IiwiaSIsImlzQXJyYXkiLCJTUEVDSUVTIiwib3JpZ2luYWwiLCJjb25zdHJ1Y3RvciIsInNwZWNpZXNDb25zdHJ1Y3RvciIsImludm9rZSIsImFycmF5U2xpY2UiLCJzbGljZSIsImZhY3RvcmllcyIsImNvbnN0cnVjdCIsImFyZ3MiLCJuIiwiam9pbiIsImJpbmQiLCJwYXJ0QXJncyIsImJvdW5kIiwiY29uY2F0IiwiVEFHIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsImZvck9mIiwiJGl0ZXJEZWZpbmUiLCJzdGVwIiwic2V0U3BlY2llcyIsIkRFU0NSSVBUT1JTIiwiZmFzdEtleSIsInZhbGlkYXRlIiwiU0laRSIsImdldEVudHJ5IiwiZW50cnkiLCJfaSIsIl9mIiwiayIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIk5BTUUiLCJBRERFUiIsIml0ZXJhYmxlIiwiX3QiLCJfbCIsImNsZWFyIiwiZGF0YSIsInIiLCJwIiwibmV4dCIsInByZXYiLCJmb3JFYWNoIiwidiIsImRlZiIsInNldFN0cm9uZyIsIml0ZXJhdGVkIiwia2luZCIsIl9rIiwiZ2V0V2VhayIsImNyZWF0ZUFycmF5TWV0aG9kIiwiJGhhcyIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiaWQiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInN0b3JlIiwic2V0Iiwic3BsaWNlIiwidWZzdG9yZSIsInJlZGVmaW5lIiwibWV0YSIsImZhaWxzIiwiJGl0ZXJEZXRlY3QiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJCYXNlIiwicHJvdG8iLCJmaXhNZXRob2QiLCJLRVkiLCJlbnRyaWVzIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIml0ZXIiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiTkVFRCIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldFRpbWUiLCJEYXRlIiwiJHRvSVNPU3RyaW5nIiwidG9JU09TdHJpbmciLCJseiIsIm51bSIsIk5hTiIsImlzRmluaXRlIiwiUmFuZ2VFcnJvciIsImQiLCJ5IiwiZ2V0VVRDRnVsbFllYXIiLCJtIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicyIsImFicyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJOVU1CRVIiLCJoaW50Iiwic3BsaXQiLCJnZXRLZXlzIiwiZ09QUyIsInBJRSIsImdldFN5bWJvbHMiLCJzeW1ib2xzIiwiaXNFbnVtIiwiZXhwIiwiTUFUQ0giLCJyZSIsImRlZmluZWQiLCJ3a3MiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJyZXBsYWNlIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsImRvbmUiLCJzdHJmbiIsInJ4Zm4iLCJTdHJpbmciLCJSZWdFeHAiLCJzdHJpbmciLCJhcmciLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwic3RpY2t5IiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwibWFwRm4iLCJpc0FycmF5SXRlciIsImdldEl0ZXJGbiIsIkJSRUFLIiwiUkVUVVJOIiwiSVRFUkFUT1IiLCJpdGVyYXRvciIsIml0ZXJGbiIsImRvY3VtZW50RWxlbWVudCIsInNldFByb3RvdHlwZU9mIiwidW4iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkl0ZXJhdG9ycyIsImZsb29yIiwiaXNSZWdFeHAiLCJyZXQiLCJkZXNjcmlwdG9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJMSUJSQVJZIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsIktFWVMiLCJWQUxVRVMiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwidmFsdWVzIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCIkZXhwbTEiLCJleHBtMSIsIngiLCJzaWduIiwicG93IiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJJbmZpbml0eSIsImxvZzFwIiwibG9nIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3Iiwib25GcmVlemUiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsIlByb21pc2UiLCJpc05vZGUiLCJoZWFkIiwibGFzdCIsIm5vdGlmeSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJuYXZpZ2F0b3IiLCJzdGFuZGFsb25lIiwicmVzb2x2ZSIsInByb21pc2UiLCJ0aGVuIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiU3ltYm9sIiwiSyIsImoiLCJkUHMiLCJlbnVtQnVnS2V5cyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJpc0VudHJpZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIiRwYXJzZUZsb2F0IiwiJHRyaW0iLCJjaGFyQXQiLCIkcGFyc2VJbnQiLCJ3cyIsImhleCIsInJhZGl4IiwidGVzdCIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJTUkMiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJUUEwiLCJpc0Z1bmN0aW9uIiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiY2hlY2siLCJidWdneSIsIl9fcHJvdG9fXyIsInRhZyIsInN0YXQiLCJzaGFyZWQiLCJ1aWQiLCJTSEFSRUQiLCJtb2RlIiwiY29weXJpZ2h0IiwiRCIsIm1ldGhvZCIsInRvSW50ZWdlciIsInBvcyIsImwiLCJjaGFyQ29kZUF0Iiwic2VhcmNoU3RyaW5nIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJhdHRyaWJ1dGUiLCJwMSIsInRvTG93ZXJDYXNlIiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImNlaWwiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJtYXgiLCJudW1iZXIiLCJpc05hTiIsIiR0eXBlZCIsIiRidWZmZXIiLCJwcm9wZXJ0eURlc2MiLCJ0b0luZGV4IiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsIkFycmF5SXRlcmF0b3JzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJVaW50OEFycmF5IiwiQVJSQVlfQlVGRkVSIiwiU0hBUkVEX0JVRkZFUiIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5SW5jbHVkZXMiLCJhcnJheVZhbHVlcyIsImFycmF5S2V5cyIsImFycmF5RW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIldST05HX0xFTkdUSCIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0Iiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwibWFwZm4iLCJtYXBwaW5nIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwibWFwIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIlRBQyIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwibyIsImdldHRlciIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsIkxOMiIsIkJVRkZFUiIsIkJZVEVfTEVOR1RIIiwiQllURV9PRkZTRVQiLCIkQlVGRkVSIiwiJExFTkdUSCIsIiRPRkZTRVQiLCJwYWNrSUVFRTc1NCIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJUeXBlZCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMiLCJweCIsInJhbmRvbSIsInVzZXJBZ2VudCIsIndrc0V4dCIsIiRTeW1ib2wiLCJVU0VfU1lNQk9MIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kIiwiZm9yY2VkIiwiJGZvckVhY2giLCJTVFJJQ1QiLCJjcmVhdGVQcm9wZXJ0eSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsImFkZFRvVW5zY29wYWJsZXMiLCJBcmd1bWVudHMiLCIkcmVkdWNlIiwidXBUbyIsInNpemUiLCJjbG9uZWQiLCIkc29tZSIsIiRzb3J0IiwidG9KU09OIiwicHYiLCJUT19QUklNSVRJVkUiLCJEYXRlUHJvdG8iLCJJTlZBTElEX0RBVEUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiRlByb3RvIiwibmFtZVJFIiwic3Ryb25nIiwiTUFQIiwic3FydCIsIiRhY29zaCIsImFjb3NoIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsIkUiLCJ0YW5oIiwidHJ1bmMiLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwicGFyc2VJbnQiLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJwYXJzZUZsb2F0IiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJaRVJPIiwibXVsdGlwbHkiLCJjMiIsImRpdmlkZSIsIm51bVRvU3RyaW5nIiwidCIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieiIsIngyIiwiJGZhaWxzIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCIkZnJlZXplIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRQcm90b3R5cGVPZiIsIiRpc0V4dGVuc2libGUiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkc2VhbCIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJQUk9NSVNFIiwidmVyc2lvbnMiLCJ2OCIsIiRQcm9taXNlIiwiZW1wdHkiLCJVU0VfTkFUSVZFIiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXBhYmlsaXR5IiwiYWxsIiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsImdldFByb3RvIiwicmVjZWl2ZXIiLCJzZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImZsYWdzIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJNQVhfVUlOVDMyIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsImRlZmluZSIsImFkZCIsIiRhdCIsImNvZGVQb2ludEF0IiwiY29udGV4dCIsIkVORFNfV0lUSCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCJjb2xvciIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIklOQ0xVREVTIiwicG9pbnQiLCJ1cmwiLCJyYXciLCJjYWxsU2l0ZSIsInRwbCIsIlNUQVJUU19XSVRIIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiRkFJTFNfT05fUFJJTUlUSVZFUyIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJpbml0IiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwiV0VBS19NQVAiLCIkV2Vha01hcCIsIldFQUtfU0VUIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdE1hcCIsIiRpbmNsdWRlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIm9uRmluYWxseSIsIiRwYWQiLCJXRUJLSVRfQlVHIiwicGFkRW5kIiwicGFkU3RhcnQiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiJHRhc2siLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJsb2NhbHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiaXRlbSIsImNvbnRlbnQiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFycjIiLCJfaXRlbSIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfZSIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJFcnJvciIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJmdW5jIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnRUeXBlIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIm9hIiwicGEiLCJ0b1VwcGVyQ2FzZSIsInFhIiwibWEiLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsImZvciIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJoIiwiUWEiLCJfcmVuZGVyIiwiUmEiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsIm9wdGlvbnMiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ2YiIsIndiIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJ1YyIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwibG9jYWxlIiwid2hpY2giLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWmQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJuZXh0U2libGluZyIsIk1lIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIlliIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInBhc3NpdmUiLCJOYiIsInUiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJRIiwiamUiLCJjaGFyIiwia2UiLCJ1bnNoaWZ0IiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsInBmIiwiY2xlYXJUaW1lb3V0IiwicWYiLCJyZiIsInNmIiwicHJldmlvdXNTaWJsaW5nIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJGZiIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsIndnIiwieGciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkNvbXBvbmVudCIsInJlZnMiLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInN0YXRlIiwidXBkYXRlciIsIk5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiT2ciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIlBnIiwiUWciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUmciLCJTZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJUZyIsIlVnIiwiVmciLCJpbXBsZW1lbnRhdGlvbiIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiZGgiLCJlaCIsInRhZ05hbWUiLCJmaCIsImdoIiwiaGgiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJtZXNzYWdlIiwiTmkiLCJPaSIsIldlYWtNYXAiLCJQaSIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiZm9jdXMiLCJhaiIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJYaiIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJjaGVja0RDRSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhdGgiLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJvcHRpb25hbCIsInBhcnRpYWwiLCJhc3RlcmlzayIsInBhdHRlcm4iLCJhdHRhY2hLZXlzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJ0b2tlbnNUb1JlZ0V4cCIsInBhcnNlIiwic3RyaW5nVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsIlBBVEhfUkVHRVhQIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJtYXRjaGVzIiwib2JqIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsInNlbnNpdGl2ZSIsInN0cmljdCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJlc2NhcGUiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImRlZmF1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsInJ1bnRpbWUiLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJhd3JhcCIsImFzeW5jIiwicG9wIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwicGVyZm9ybWFuY2UiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsImRlbGF5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0IiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJCb29sZWFuIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJhcHBseVRvVGFnIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInJvb3QiLCJvYnNlcnZhYmxlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsImhtZCIsInByb3AiLCJzY3JpcHRVcmwiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiX2dsb2JhbCIsIl9iYWJlbFBvbHlmaWxsIiwid2FybiIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsInNvdXJjZVN5bWJvbEtleXMiLCJ0b1ZhbCIsIm1peCIsInRtcCIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsImNhcGl0YWxpemUiLCJfdHlwZW9mIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInBsYWluT2JqZWN0Q29uc3RydXJjdG9yIiwiY2xvbmVTdHlsZSIsIm5ld1N0eWxlIiwiY3JlYXRlUnVsZSIsImRlY2wiLCJqc3MiLCJkZWNsQ29weSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsImluZGVudCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJfcHJvcCIsIl92YWx1ZSIsIl9wcm9wMiIsIl92YWx1ZTIiLCJhbGxvd0VtcHR5IiwiZXNjYXBlUmVnZXgiLCJuYXRpdmVFc2NhcGUiLCJDU1MiLCJCYXNlU3R5bGVSdWxlIiwiaXNQcm9jZXNzZWQiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJzaGVldCIsIlJlbmRlcmVyIiwiZm9yY2UiLCJuZXdWYWx1ZSIsIm9uQ2hhbmdlVmFsdWUiLCJpc0VtcHR5IiwiaXNEZWZpbmVkIiwicmVtb3ZlUHJvcGVydHkiLCJhdHRhY2hlZCIsIlN0eWxlUnVsZSIsIl9CYXNlU3R5bGVSdWxlIiwiX3RoaXMiLCJzZWxlY3RvclRleHQiLCJzY29wZWQiLCJnZW5lcmF0ZUlkIiwiX3Byb3RvMiIsImFwcGx5VG8iLCJqc29uIiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsInN0eWxlcyIsInF1ZXJ5IiwicnVsZXMiLCJhdE1hdGNoIiwiUnVsZUxpc3QiLCJfcHJvdG8iLCJnZXRSdWxlIiwicnVsZSIsImFkZFJ1bGUiLCJvblByb2Nlc3NSdWxlIiwia2V5UmVnRXhwIiwicGx1Z2luQ29uZGl0aW9uYWxSdWxlIiwiZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxIiwibmFtZVJlZ0V4cCIsIktleWZyYW1lc1J1bGUiLCJmcmFtZXMiLCJuYW1lTWF0Y2giLCJrZXlSZWdFeHAkMSIsInJlZlJlZ0V4cCIsImZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUiLCJrZXlmcmFtZXMiLCJyZXBsYWNlUmVmIiwicmVmS2V5ZnJhbWUiLCJvblByb2Nlc3NTdHlsZSIsIktleWZyYW1lUnVsZSIsIl9sZW4iLCJfa2V5IiwicGx1Z2luS2V5ZnJhbWVSdWxlIiwiRm9udEZhY2VSdWxlIiwia2V5UmVnRXhwJDIiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwiY2xhc3NlcyIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInJlZ2lzdGVyIiwidW5yZWdpc3RlciIsInVwZGF0ZU9uZSIsIl90aGlzJG9wdGlvbnMyIiwic3R5bGVSdWxlIiwib25VcGRhdGUiLCJuZXh0VmFsdWUiLCJfbmV4dFZhbHVlIiwiX3ByZXZWYWx1ZSIsIlN0eWxlU2hlZXQiLCJkZXBsb3llZCIsImF0dGFjaCIsImRlcGxveSIsImRldGFjaCIsImluc2VydFJ1bGUiLCJhZGRSdWxlcyIsImFkZGVkIiwiZGVsZXRlUnVsZSIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiZXh0ZXJuYWwiLCJyZWdpc3RyeSIsIm9uUHJvY2Vzc1NoZWV0IiwicHJvY2Vzc2VkVmFsdWUiLCJ1c2UiLCJuZXdQbHVnaW4iLCJwbHVnaW4iLCJTaGVldHNSZWdpc3RyeSIsIl90ZW1wIiwiX3JlZiIsIm5zIiwiY3JlYXRlR2VuZXJhdGVJZCIsInJ1bGVDb3VudGVyIiwianNzSWQiLCJjbGFzc05hbWVQcmVmaXgiLCJtaW5pZnkiLCJtZW1vaXplIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNzc1J1bGUiLCJhdHRyaWJ1dGVTdHlsZU1hcCIsImdldEhlYWQiLCJnZXROb25jZSIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnRSdWxlIiwiY29udGFpbmVyIiwiYXBwZW5kUnVsZSIsImNzc1J1bGVzIiwiZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgiLCJtYXhJbmRleCIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsImNyZWF0ZVN0eWxlIiwiaW5zZXJ0aW9uUG9pbnQiLCJuZXh0Tm9kZSIsInJlZ2lzdHJ5JDEiLCJmaW5kSGlnaGVyU2hlZXQiLCJmaW5kSGlnaGVzdFNoZWV0IiwiY29tbWVudCIsImZpbmRDb21tZW50Tm9kZSIsImZpbmRQcmV2Tm9kZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImluc2VydFN0eWxlIiwiaW5zZXJ0UnVsZXMiLCJuYXRpdmVQYXJlbnQiLCJsYXRlc3ROYXRpdmVQYXJlbnQiLCJfaW5zZXJ0aW9uSW5kZXgiLCJyZWZDc3NSdWxlIiwicnVsZVN0ciIsImluc2VydGlvbkluZGV4IiwibmF0aXZlUnVsZSIsImdldFJ1bGVzIiwiaW5zdGFuY2VDb3VudGVyIiwiSnNzIiwic2V0dXAiLCJjcmVhdGVTdHlsZVNoZWV0IiwicmVtb3ZlU3R5bGVTaGVldCIsImdldER5bmFtaWNTdHlsZXMiLCJleHRyYWN0ZWQiLCJoYXNDU1NUT01TdXBwb3J0IiwibWVyZ2VDbGFzc2VzIiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwibmV4dENsYXNzZXMiLCJjYWNoZSIsImtleTEiLCJrZXkyIiwic3ViQ2FjaGUiLCJ1c2VUaGVtZSIsInBzZXVkb0NsYXNzZXMiLCJmblZhbHVlc05zIiwiZm5SdWxlTnMiLCJhdFByZWZpeCIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJHbG9iYWxQcmVmaXhlZFJ1bGUiLCJzZXBhcmF0b3JSZWdFeHAiLCJhZGRTY29wZSIsInNjb3BlIiwicGFyZW50UmVnRXhwIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJoTmFtZSIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwibXMiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJyZWdFeHAiLCJ1bml0cyIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJib3R0b20iLCJyaWdodCIsImluc2V0IiwibW90aW9uIiwib3V0bGluZSIsInBlcnNwZWN0aXZlIiwiZ2FwIiwiZ3JpZCIsIml0ZXJhdGUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwidW5pdCIsImpzIiwidmVuZG9yIiwiYnJvd3NlciIsImlzVG91Y2giLCJqc0Nzc01hcCIsIk1veiIsIldlYmtpdCIsImFwcGVhcmVuY2UiLCJub1ByZWZpbGwiLCJzdXBwb3J0ZWRQcm9wZXJ0eSIsImNvbG9yQWRqdXN0IiwidG9VcHBlciIsImNhbWVsaXplIiwicGFzY2FsaXplIiwibWFzayIsImxvbmdoYW5kIiwidGV4dE9yaWVudGF0aW9uIiwidHJhbnNmb3JtIiwid3JpdGluZ01vZGUiLCJ1c2VyU2VsZWN0IiwiYnJlYWtQcm9wc09sZCIsImlubGluZUxvZ2ljYWxPbGQiLCJuZXdQcm9wIiwidW5wcmVmaXhlZCIsInByZWZpeGVkIiwicGFzY2FsaXplZCIsInNjcm9sbFNuYXAiLCJvdmVyc2Nyb2xsQmVoYXZpb3IiLCJwcm9wTWFwIiwiZmxleDIwMTIiLCJwcm9wTWFwJDEiLCJwcm9wS2V5cyIsInByZWZpeENzcyIsInByb3BlcnR5RGV0ZWN0b3JzIiwiY29tcHV0ZWQiLCJnZXRDb21wdXRlZFN0eWxlIiwia2V5JDEiLCJlbCQxIiwiY2FjaGUkMSIsInRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidHJhbnNQcm9wc1JlZ0V4cCIsInByZWZpeFRyYW5zaXRpb25DYWxsYmFjayIsInAyIiwic3VwcG9ydGVkVmFsdWUiLCJwcm9wZXJ0eSIsInByZWZpeGVkVmFsdWUiLCJjYWNoZUtleSIsImZuVmFsdWVzIiwiZm5SdWxlIiwiaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZSIsImhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZSIsImdldFJlcGxhY2VSZWYiLCJyZXBsYWNlUGFyZW50UmVmcyIsIm5lc3RlZFByb3AiLCJwYXJlbnRQcm9wIiwicGFyZW50U2VsZWN0b3JzIiwibmVzdGVkU2VsZWN0b3JzIiwibmVzdGVkIiwiZ2V0T3B0aW9ucyIsInByZXZPcHRpb25zIiwibmVzdGluZ0xldmVsIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwiaHlwaGVuYXRlZFByb3AiLCJjYW1lbENhc2VkT3B0aW9ucyIsInByZWZpeFN0eWxlIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlJDEiLCJhdFJ1bGUiLCJzdXBwb3J0ZWRLZXlmcmFtZXMiLCJwcm9wMCIsInByb3AxIiwiZGVmYXVsdE9wdGlvbnMiLCJkaXNhYmxlR2VuZXJhdGlvbiIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiX29wdGlvbnMkZGlzYWJsZUdsb2JhIiwiZGlzYWJsZUdsb2JhbCIsIl9vcHRpb25zJHByb2R1Y3Rpb25QciIsInByb2R1Y3Rpb25QcmVmaXgiLCJfb3B0aW9ucyRzZWVkIiwic2VlZCIsInNlZWRQcmVmaXgiLCJnZXROZXh0Q291bnRlcklkIiwidGhlbWUiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c0NhY2hlIiwic2hlZXRzTWFuYWdlciIsInNoZWV0c1JlZ2lzdHJ5IiwiU3R5bGVzQ29udGV4dCIsImluZGV4Q291bnRlciIsImluY3JlbWVudCIsImlzUGxhaW5PYmplY3QiLCJkZWVwbWVyZ2UiLCJjbG9uZSIsImdldFN0eWxlc0NyZWF0b3IiLCJzdHlsZXNPckNyZWF0b3IiLCJ0aGVtaW5nRW5hYmxlZCIsIm92ZXJyaWRlcyIsInN0eWxlc1dpdGhPdmVycmlkZXMiLCJnZXRDbGFzc2VzIiwic3R5bGVzT3B0aW9ucyIsImNhY2hlQ2xhc3NlcyIsImxhc3RQcm9wIiwibGFzdEpTUyIsImdlbmVyYXRlIiwiX3JlZjIiLCJzdHlsZXNDcmVhdG9yIiwic2hlZXRNYW5hZ2VyIiwic3RhdGljU2hlZXQiLCJkeW5hbWljU3R5bGVzIiwiZmxpcCIsImRpcmVjdGlvbiIsInNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIiwiZHluYW1pY1NoZWV0IiwiX3JlZjMiLCJfcmVmNCIsInVzZVN5bmNocm9ub3VzRWZmZWN0IiwiY3VycmVudEtleSIsIm1ha2VTdHlsZXMiLCJjbGFzc05hbWVQcmVmaXhPcHRpb24iLCJfb3B0aW9ucyRkZWZhdWx0VGhlbWUiLCJkZWZhdWx0VGhlbWUiLCJzdHlsZXNPcHRpb25zMiIsInVzZVN0eWxlcyIsInNob3VsZFVwZGF0ZSIsImdldFRoZW1lUHJvcHMiLCJwYXJhbXMiLCJjcmVhdGVCcmVha3BvaW50cyIsImJyZWFrcG9pbnRzIiwiX2JyZWFrcG9pbnRzJHZhbHVlcyIsInhzIiwic20iLCJfYnJlYWtwb2ludHMkdW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwib3RoZXIiLCJ1cCIsImJldHdlZW4iLCJlbmRJbmRleCIsImRvd24iLCJ1cHBlcmJvdW5kIiwiX2RlZmluZVByb3BlcnR5IiwiY3JlYXRlTWl4aW5zIiwic3BhY2luZyIsIl90b29sYmFyIiwiZ3V0dGVycyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidG9vbGJhciIsIm1pbkhlaWdodCIsImJsYWNrIiwid2hpdGUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJjbGFtcCIsImRlY29tcG9zZUNvbG9yIiwiY29sb3JzIiwiaGV4VG9SZ2IiLCJtYXJrZXIiLCJyZWNvbXBvc2VDb2xvciIsImdldEx1bWluYW5jZSIsInJnYiIsImhzbFRvUmdiIiwiZmFkZSIsImxpZ2h0IiwicHJpbWFyeSIsInNlY29uZGFyeSIsImRpdmlkZXIiLCJiYWNrZ3JvdW5kIiwicGFwZXIiLCJhY3RpdmUiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkT3BhY2l0eSIsImRpc2FibGVkQmFja2dyb3VuZCIsImRpc2FibGVkT3BhY2l0eSIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50Iiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJjb2VmZmljaWVudCIsImxpZ2h0ZW4iLCJtYWluIiwiZGFya2VuIiwiY3JlYXRlUGFsZXR0ZSIsInBhbGV0dGUiLCJfcGFsZXR0ZSRwcmltYXJ5IiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BhbGV0dGUkZXJyb3IiLCJfcGFsZXR0ZSR3YXJuaW5nIiwid2FybmluZyIsIl9wYWxldHRlJGluZm8iLCJfcGFsZXR0ZSRzdWNjZXNzIiwic3VjY2VzcyIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiZm9yZWdyb3VuZCIsImx1bUEiLCJsdW1CIiwiZ2V0Q29udHJhc3RSYXRpbyIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJjb250cmFzdFRleHQiLCJ0eXBlcyIsImdyZXkiLCJjYXNlQWxsQ2FwcyIsInRleHRUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJ0eXBvZ3JhcGh5IiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJmb250U2l6ZSIsIl9yZWYkZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodExpZ2h0IiwiX3JlZiRmb250V2VpZ2h0UmVndWxhIiwiZm9udFdlaWdodFJlZ3VsYXIiLCJfcmVmJGZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0TWVkaXVtIiwiX3JlZiRmb250V2VpZ2h0Qm9sZCIsImZvbnRXZWlnaHRCb2xkIiwiX3JlZiRodG1sRm9udFNpemUiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0yIiwicHhUb1JlbSIsImNvZWYiLCJidWlsZFZhcmlhbnQiLCJsZXR0ZXJTcGFjaW5nIiwiY2FzaW5nIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiY3JlYXRlU2hhZG93IiwiYm9yZGVyUmFkaXVzIiwiX3NsaWNlZFRvQXJyYXkiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJwcm9wZXJ0aWVzIiwiZGlyZWN0aW9ucyIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiX3Byb3Akc3BsaXQyIiwiZGlyIiwic3BhY2luZ0tleXMiLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJ0aGVtZVNwYWNpbmciLCJ0cmFuc2Zvcm1lciIsInN0eWxlRnJvbVByb3BWYWx1ZSIsImNzc1Byb3BlcnRpZXMiLCJwcm9wVmFsdWUiLCJjc3NQcm9wZXJ0eSIsInRyYW5zZm9ybWVkIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwidGhlbWVCcmVha3BvaW50cyIsIl90aGVtZUJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsImhhbmRsZUJyZWFrcG9pbnRzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsImZpbHRlclByb3BzIiwiZWFzaW5nIiwiZWFzZUluT3V0IiwiZWFzZU91dCIsImVhc2VJbiIsInNoYXJwIiwiZHVyYXRpb24iLCJzaG9ydGVzdCIsInNob3J0ZXIiLCJzaG9ydCIsInN0YW5kYXJkIiwiY29tcGxleCIsImVudGVyaW5nU2NyZWVuIiwibGVhdmluZ1NjcmVlbiIsImZvcm1hdE1zIiwibWlsbGlzZWNvbmRzIiwiX29wdGlvbnMkZHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsIl9vcHRpb25zJGVhc2luZyIsImVhc2luZ09wdGlvbiIsIl9vcHRpb25zJGRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiY29uc3RhbnQiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJfb3B0aW9ucyRicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJfb3B0aW9ucyR0eXBvZ3JhcGh5IiwidHlwb2dyYXBoeUlucHV0IiwibXVpVGhlbWUiLCJzaGFkb3dzIiwidHJhbnNpdGlvbnMiLCJfb3B0aW9ucyR3aXRoVGhlbWUiLCJ3aXRoVGhlbWUiLCJXaXRoU3R5bGVzIiwiaW5uZXJSZWYiLCJtb3JlIiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsImhhbmRsZUtleURvd24iLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJpc0ZvY3VzVmlzaWJsZSIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsInVzZUlzRm9jdXNWaXNpYmxlIiwib25CbHVyVmlzaWJsZSIsImRvYyIsInNldFJlZiIsInVzZUZvcmtSZWYiLCJyZWZBIiwicmVmQiIsInJlZlZhbHVlIiwiZGVmYXVsdFZhcmlhbnRNYXBwaW5nIiwiVHlwb2dyYXBoeSIsIl9wcm9wcyRhbGlnbiIsImFsaWduIiwiY2xhc3NOYW1lIiwiX3Byb3BzJGNvbG9yIiwiX3Byb3BzJGRpc3BsYXkiLCJfcHJvcHMkZ3V0dGVyQm90dG9tIiwiZ3V0dGVyQm90dG9tIiwiX3Byb3BzJG5vV3JhcCIsIm5vV3JhcCIsIl9wcm9wcyRwYXJhZ3JhcGgiLCJwYXJhZ3JhcGgiLCJfcHJvcHMkdmFyaWFudCIsInZhcmlhbnQiLCJfcHJvcHMkdmFyaWFudE1hcHBpbmciLCJ2YXJpYW50TWFwcGluZyIsInNyT25seSIsIm92ZXJmbG93IiwiYWxpZ25MZWZ0IiwidGV4dEFsaWduIiwiYWxpZ25DZW50ZXIiLCJhbGlnblJpZ2h0IiwiYWxpZ25KdXN0aWZ5IiwidGV4dE92ZXJmbG93Iiwid2hpdGVTcGFjZSIsIm1hcmdpbkJvdHRvbSIsImNvbG9ySW5oZXJpdCIsImNvbG9yUHJpbWFyeSIsImNvbG9yU2Vjb25kYXJ5IiwiY29sb3JUZXh0UHJpbWFyeSIsImNvbG9yVGV4dFNlY29uZGFyeSIsImNvbG9yRXJyb3IiLCJkaXNwbGF5SW5saW5lIiwiZGlzcGxheUJsb2NrIiwiTGluayIsIl9wcm9wcyRjb21wb25lbnQiLCJvbkJsdXIiLCJvbkZvY3VzIiwiVHlwb2dyYXBoeUNsYXNzZXMiLCJfcHJvcHMkdW5kZXJsaW5lIiwidW5kZXJsaW5lIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwiX1JlYWN0JHVzZVN0YXRlIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiaGFuZGxlclJlZiIsInVuZGVybGluZU5vbmUiLCJ0ZXh0RGVjb3JhdGlvbiIsInVuZGVybGluZUhvdmVyIiwidW5kZXJsaW5lQWx3YXlzIiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjdXJzb3IiLCJ2ZXJ0aWNhbEFsaWduIiwiYm9yZGVyU3R5bGUiLCJvbWl0IiwiZmllbGRzIiwiY29tcG9uZW50Q3JlYXRvciIsIlN0eWxlZENvbXBvbmVudCIsImNsYXNzTmFtZVByb3AiLCJDb21wb25lbnRQcm9wIiwic3ByZWFkIiwiRmluYWxDb21wb25lbnQiLCJTdmdJY29uIiwiX3Byb3BzJGZvbnRTaXplIiwiaHRtbENvbG9yIiwidGl0bGVBY2Nlc3MiLCJfcHJvcHMkdmlld0JveCIsInZpZXdCb3giLCJmb2N1c2FibGUiLCJyb2xlIiwibXVpTmFtZSIsImNvbG9yQWN0aW9uIiwiY29sb3JEaXNhYmxlZCIsImZvbnRTaXplSW5oZXJpdCIsImZvbnRTaXplU21hbGwiLCJmb250U2l6ZUxhcmdlIiwiY3JlYXRlU3ZnSWNvbiIsIkF2YXRhciIsImFsdCIsImNoaWxkcmVuUHJvcCIsImltZ1Byb3BzIiwic2l6ZXMiLCJzcmNTZXQiLCJzZXRMb2FkZWQiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwib25lcnJvciIsInVzZUxvYWRlZCIsImhhc0ltZyIsImhhc0ltZ05vdEZhaWxpbmciLCJQZXJzb24iLCJzeXN0ZW0iLCJjb2xvckRlZmF1bHQiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJjaXJjbGUiLCJjaXJjdWxhciIsInJvdW5kZWQiLCJzcXVhcmUiLCJvYmplY3RGaXQiLCJ0ZXh0SW5kZW50IiwiU3R5bGVkTGluayIsInN0eWxlZCIsImJveFNoYWRvdyIsIlN0eWxlZEF2YXRhciIsIlJlc3VsdHMiLCJ1c2VycyIsImxhc3RTZWFyY2giLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwidXNlciIsImxvZ2luIiwiYXZhdGFyX3VybCIsImh0bWxfdXJsIiwiUmVzdWx0c0NvbnRleHQiLCJMb2FkZXIiLCJ1c2VFbmhhbmNlZEVmZmVjdCIsInVzZUV2ZW50Q2FsbGJhY2siLCJnZXRDaGlsZE1hcHBpbmciLCJnZXRQcm9wIiwiZ2V0TmV4dENoaWxkTWFwcGluZyIsIm5leHRQcm9wcyIsInByZXZDaGlsZE1hcHBpbmciLCJvbkV4aXRlZCIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiaW4iLCJUcmFuc2l0aW9uR3JvdXAiLCJfUmVhY3QkQ29tcG9uZW50IiwiaGFuZGxlRXhpdGVkIiwiY29udGV4dFZhbHVlIiwiaXNNb3VudGluZyIsImZpcnN0UmVuZGVyIiwibW91bnRlZCIsImFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJfdGhpcyRwcm9wcyIsImNoaWxkRmFjdG9yeSIsIlRyYW5zaXRpb25Hcm91cENvbnRleHQiLCJfcHJvcHMkcHVsc2F0ZSIsInB1bHNhdGUiLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJpblByb3AiLCJfcHJvcHMkb25FeGl0ZWQiLCJ0aW1lb3V0IiwibGVhdmluZyIsInNldExlYXZpbmciLCJyaXBwbGVDbGFzc05hbWUiLCJyaXBwbGUiLCJyaXBwbGVWaXNpYmxlIiwicmlwcGxlUHVsc2F0ZSIsInJpcHBsZVN0eWxlcyIsImNoaWxkQ2xhc3NOYW1lIiwiY2hpbGRMZWF2aW5nIiwiY2hpbGRQdWxzYXRlIiwidGltZW91dElkIiwiVG91Y2hSaXBwbGUiLCJfcHJvcHMkY2VudGVyIiwiY2VudGVyIiwiY2VudGVyUHJvcCIsInJpcHBsZXMiLCJzZXRSaXBwbGVzIiwicmlwcGxlQ2FsbGJhY2siLCJpZ25vcmluZ01vdXNlRG93biIsInN0YXJ0VGltZXIiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJvbGRSaXBwbGVzIiwiX29wdGlvbnMkcHVsc2F0ZSIsIl9vcHRpb25zJGNlbnRlciIsIl9vcHRpb25zJGZha2VFbGVtZW50IiwiZmFrZUVsZW1lbnQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2l6ZVgiLCJjbGllbnRXaWR0aCIsInNpemVZIiwiY2xpZW50SGVpZ2h0IiwicG9pbnRlckV2ZW50cyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiQnV0dG9uQmFzZSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkZvY3VzVmlzaWJsZSIsIm9uS2V5RG93biIsIm9uS2V5VXAiLCJvbk1vdXNlRG93biIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsIm9uRHJhZ0xlYXZlIiwiX3Byb3BzJHRhYkluZGV4IiwidGFiSW5kZXgiLCJUb3VjaFJpcHBsZVByb3BzIiwiX3Byb3BzJHR5cGUiLCJyaXBwbGVSZWYiLCJ1c2VSaXBwbGVIYW5kbGVyIiwicmlwcGxlQWN0aW9uIiwiZXZlbnRDYWxsYmFjayIsInNraXBSaXBwbGVBY3Rpb24iLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVEcmFnTGVhdmUiLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZVRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZUJsdXIiLCJoYW5kbGVGb2N1cyIsImlzTm9uTmF0aXZlQnV0dG9uIiwia2V5ZG93blJlZiIsImhhbmRsZUtleVVwIiwiYnV0dG9uUHJvcHMiLCJoYW5kbGVVc2VyUmVmIiwiaGFuZGxlT3duUmVmIiwiaGFuZGxlUmVmIiwiX1JlYWN0JHVzZVN0YXRlMiIsIm1vdW50ZWRTdGF0ZSIsInNldE1vdW50ZWRTdGF0ZSIsImVuYWJsZVRvdWNoUmlwcGxlIiwiQnV0dG9uIiwiX3Byb3BzJGRpc2FibGVFbGV2YXRpIiwiZGlzYWJsZUVsZXZhdGlvbiIsIl9wcm9wcyRkaXNhYmxlRm9jdXNSaSIsImRpc2FibGVGb2N1c1JpcHBsZSIsImVuZEljb25Qcm9wIiwiZW5kSWNvbiIsIl9wcm9wcyRmdWxsV2lkdGgiLCJmdWxsV2lkdGgiLCJfcHJvcHMkc2l6ZSIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJsYWJlbCIsImJveFNpemluZyIsIm1pbldpZHRoIiwidGV4dFByaW1hcnkiLCJ0ZXh0U2Vjb25kYXJ5Iiwib3V0bGluZWQiLCJvdXRsaW5lZFByaW1hcnkiLCJvdXRsaW5lZFNlY29uZGFyeSIsImNvbnRhaW5lZCIsImNvbnRhaW5lZFByaW1hcnkiLCJjb250YWluZWRTZWNvbmRhcnkiLCJib3JkZXJDb2xvciIsInRleHRTaXplU21hbGwiLCJ0ZXh0U2l6ZUxhcmdlIiwib3V0bGluZWRTaXplU21hbGwiLCJvdXRsaW5lZFNpemVMYXJnZSIsImNvbnRhaW5lZFNpemVTbWFsbCIsImNvbnRhaW5lZFNpemVMYXJnZSIsInNpemVTbWFsbCIsInNpemVMYXJnZSIsIm1hcmdpblJpZ2h0IiwibWFyZ2luTGVmdCIsImljb25TaXplU21hbGwiLCJpY29uU2l6ZU1lZGl1bSIsImljb25TaXplTGFyZ2UiLCJJY29uIiwiZm9ybUNvbnRyb2xTdGF0ZSIsInN0YXRlcyIsIm11aUZvcm1Db250cm9sIiwiRm9ybUNvbnRyb2xDb250ZXh0IiwiZGVib3VuY2UiLCJ3YWl0IiwiZGVib3VuY2VkIiwibGF0ZXIiLCJnZXRTdHlsZVZhbHVlIiwiY29tcHV0ZWRTdHlsZSIsInZpc2liaWxpdHkiLCJvbkNoYW5nZSIsInJvd3MiLCJyb3dzTWF4IiwiX3Byb3BzJHJvd3NNaW4iLCJyb3dzTWluIiwicm93c01pblByb3AiLCJpc0NvbnRyb2xsZWQiLCJpbnB1dFJlZiIsInNoYWRvd1JlZiIsInJlbmRlcnMiLCJzeW5jSGVpZ2h0IiwiaW5wdXRTaGFsbG93IiwicGxhY2Vob2xkZXIiLCJpbm5lckhlaWdodCIsInNjcm9sbEhlaWdodCIsInNpbmdsZVJvd0hlaWdodCIsIm91dGVySGVpZ2h0Iiwib3V0ZXJIZWlnaHRTdHlsZSIsInByZXZTdGF0ZSIsImhhbmRsZVJlc2l6ZSIsImhhc1ZhbHVlIiwiaXNGaWxsZWQiLCJTU1IiLCJJbnB1dEJhc2UiLCJhcmlhRGVzY3JpYmVkYnkiLCJhdXRvQ29tcGxldGUiLCJlbmRBZG9ybm1lbnQiLCJfcHJvcHMkaW5wdXRDb21wb25lbnQiLCJpbnB1dENvbXBvbmVudCIsIl9wcm9wcyRpbnB1dFByb3BzIiwiaW5wdXRQcm9wcyIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwiX3Byb3BzJG11bHRpbGluZSIsInJlbmRlclN1ZmZpeCIsInN0YXJ0QWRvcm5tZW50IiwidmFsdWVQcm9wIiwiaGFuZGxlSW5wdXRSZWZXYXJuaW5nIiwiaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AiLCJoYW5kbGVJbnB1dFJlZlByb3AiLCJoYW5kbGVJbnB1dFJlZiIsImZvY3VzZWQiLCJzZXRGb2N1c2VkIiwiZmNzIiwib25GaWxsZWQiLCJvbkVtcHR5IiwiY2hlY2tEaXJ0eSIsIklucHV0Q29tcG9uZW50Iiwic2V0QWRvcm5lZFN0YXJ0IiwiZm9ybUNvbnRyb2wiLCJhZG9ybmVkU3RhcnQiLCJhZG9ybmVkRW5kIiwibWFyZ2luRGVuc2UiLCJvbkFuaW1hdGlvblN0YXJ0IiwicmVxdWlyZWQiLCJpbnB1dE11bHRpbGluZSIsImhpZGRlbkxhYmVsIiwiaW5wdXRIaWRkZW5MYWJlbCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwiaW5wdXRUeXBlU2VhcmNoIiwiaW5wdXRNYXJnaW5EZW5zZSIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwicGFkZGluZ1RvcCIsImZvbnQiLCJyZXNpemUiLCJJbnB1dCIsImRpc2FibGVVbmRlcmxpbmUiLCJib3R0b21MaW5lQ29sb3IiLCJtYXJnaW5Ub3AiLCJib3JkZXJCb3R0b21Db2xvciIsImJvcmRlckJvdHRvbSIsImJvcmRlckJvdHRvbVN0eWxlIiwiRmlsbGVkSW5wdXQiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJwYWRkaW5nQm90dG9tIiwiV2Via2l0Qm94U2hhZG93IiwiV2Via2l0VGV4dEZpbGxDb2xvciIsImNhcmV0Q29sb3IiLCJOb3RjaGVkT3V0bGluZSIsImxhYmVsV2lkdGhQcm9wIiwibGFiZWxXaWR0aCIsIm5vdGNoZWQiLCJsZWdlbmRMYWJlbGxlZCIsImxlZ2VuZE5vdGNoZWQiLCJsZWdlbmQiLCJib3JkZXJXaWR0aCIsIm1heFdpZHRoIiwiT3V0bGluZWRJbnB1dCIsIl9wcm9wcyRsYWJlbFdpZHRoIiwibm90Y2hlZE91dGxpbmUiLCJmaWxsZWQiLCJGb3JtTGFiZWwiLCJJbnB1dExhYmVsIiwiX3Byb3BzJGRpc2FibGVBbmltYXRpIiwiZGlzYWJsZUFuaW1hdGlvbiIsInNocmlua1Byb3AiLCJzaHJpbmsiLCJhbmltYXRlZCIsInRyYW5zZm9ybU9yaWdpbiIsImlzTXVpRWxlbWVudCIsIm11aU5hbWVzIiwiRm9ybUNvbnRyb2wiLCJfcHJvcHMkZXJyb3IiLCJ2aXN1YWxseUZvY3VzZWQiLCJfcHJvcHMkaGlkZGVuTGFiZWwiLCJfcHJvcHMkbWFyZ2luIiwiX3Byb3BzJHJlcXVpcmVkIiwiaW5pdGlhbEFkb3JuZWRTdGFydCIsImluaXRpYWxGaWxsZWQiLCJzZXRGaWxsZWQiLCJfUmVhY3QkdXNlU3RhdGUzIiwiX2ZvY3VzZWQiLCJjaGlsZENvbnRleHQiLCJyZWdpc3RlckVmZmVjdCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5Ob3JtYWwiLCJGb3JtSGVscGVyVGV4dCIsIm93bmVyV2luZG93IiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJfbGVuMiIsIl9rZXkyIiwiX3Byb3BzJGRpc2FibGVQb3J0YWwiLCJkaXNhYmxlUG9ydGFsIiwib25SZW5kZXJlZCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImdldENvbnRhaW5lciIsImdldFNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJTaXplIiwib2Zmc2V0V2lkdGgiLCJhcmlhSGlkZGVuIiwic2hvdyIsImdldFBhZGRpbmdSaWdodCIsImFyaWFIaWRkZW5TaWJsaW5ncyIsImN1cnJlbnROb2RlIiwibm9kZXNUb0V4Y2x1ZGUiLCJibGFja2xpc3RUYWdOYW1lcyIsImZpbmRJbmRleE9mIiwiaWR4IiwiTW9kYWxNYW5hZ2VyIiwiX2NsYXNzQ2FsbENoZWNrIiwibW9kYWxzIiwiY29udGFpbmVycyIsIm1vZGFsSW5kZXgiLCJtb2RhbFJlZiIsImhpZGRlblNpYmxpbmdOb2RlcyIsImhpZGRlblNpYmxpbmdzIiwiZ2V0SGlkZGVuU2libGluZ3MiLCJjb250YWluZXJJbmRleCIsInJlc3RvcmUiLCJmaXhlZE5vZGVzIiwicmVzdG9yZVN0eWxlIiwicmVzdG9yZVBhZGRpbmdzIiwiZGlzYWJsZVNjcm9sbExvY2siLCJpbm5lcldpZHRoIiwiaXNPdmVyZmxvd2luZyIsInBhcmVudEVsZW1lbnQiLCJzY3JvbGxDb250YWluZXIiLCJoYW5kbGVDb250YWluZXIiLCJuZXh0VG9wIiwiX3Byb3BzJGRpc2FibGVBdXRvRm9jIiwiZGlzYWJsZUF1dG9Gb2N1cyIsIl9wcm9wcyRkaXNhYmxlRW5mb3JjZSIsImRpc2FibGVFbmZvcmNlRm9jdXMiLCJfcHJvcHMkZGlzYWJsZVJlc3RvcmUiLCJkaXNhYmxlUmVzdG9yZUZvY3VzIiwiZ2V0RG9jIiwiaXNFbmFibGVkIiwiaWdub3JlTmV4dEVuZm9yY2VGb2N1cyIsInNlbnRpbmVsU3RhcnQiLCJzZW50aW5lbEVuZCIsIm5vZGVUb1Jlc3RvcmUiLCJyb290UmVmIiwicHJldk9wZW5SZWYiLCJjb250YWluIiwiaGFzRm9jdXMiLCJsb29wRm9jdXMiLCJpbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJpbnZpc2libGUiLCJfcHJvcHMkaW52aXNpYmxlIiwiZGVmYXVsdE1hbmFnZXIiLCJpblByb3BzIiwiX3Byb3BzJEJhY2tkcm9wQ29tcG9uIiwiQmFja2Ryb3BDb21wb25lbnQiLCJCYWNrZHJvcFByb3BzIiwiX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuIiwiY2xvc2VBZnRlclRyYW5zaXRpb24iLCJfcHJvcHMkZGlzYWJsZUJhY2tkcm8iLCJkaXNhYmxlQmFja2Ryb3BDbGljayIsIl9wcm9wcyRkaXNhYmxlRXNjYXBlSyIsImRpc2FibGVFc2NhcGVLZXlEb3duIiwiX3Byb3BzJGRpc2FibGVTY3JvbGxMIiwiX3Byb3BzJGhpZGVCYWNrZHJvcCIsImhpZGVCYWNrZHJvcCIsIl9wcm9wcyRrZWVwTW91bnRlZCIsImtlZXBNb3VudGVkIiwiX3Byb3BzJG1hbmFnZXIiLCJtYW5hZ2VyIiwib25CYWNrZHJvcENsaWNrIiwib25DbG9zZSIsIm9uRXNjYXBlS2V5RG93biIsInNldEV4aXRlZCIsIm1vdW50Tm9kZVJlZiIsImhhc1RyYW5zaXRpb24iLCJnZXRIYXNUcmFuc2l0aW9uIiwiZ2V0TW9kYWwiLCJoYW5kbGVNb3VudGVkIiwibW91bnQiLCJoYW5kbGVPcGVuIiwicmVzb2x2ZWRDb250YWluZXIiLCJpc1RvcE1vZGFsIiwiaGFuZGxlUG9ydGFsUmVmIiwiaGFuZGxlQ2xvc2UiLCJpbmxpbmVTdHlsZSIsImhpZGRlbiIsImNoaWxkUHJvcHMiLCJvbkVudGVyIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsInN0YXR1cyIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJfdGhpczIiLCJhcHBlYXJpbmciLCJub2RlUmVmIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJvbkVudGVyZWQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJjYW5jZWwiLCJuZXh0U3RhdGUiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJtYXliZU5leHRDYWxsYmFjayIsIm5vb3AiLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJfcHJvcHMkc3R5bGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJnZXRTY2FsZSIsImVudGVyaW5nIiwiZW50ZXJlZCIsIkdyb3ciLCJfcHJvcHMkZGlzYWJsZVN0cmljdE0iLCJkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdCIsIl9wcm9wcyR0aW1lb3V0IiwiX3Byb3BzJFRyYW5zaXRpb25Db21wIiwiVHJhbnNpdGlvbkNvbXBvbmVudCIsInRpbWVyIiwiYXV0b1RpbWVvdXQiLCJlbmFibGVTdHJpY3RNb2RlQ29tcGF0IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZvcmVpZ25SZWYiLCJub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrIiwibm9kZU9yQXBwZWFyaW5nIiwiaXNBcHBlYXJpbmciLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUVudGVyIiwicmVmbG93IiwiX2dldFRyYW5zaXRpb25Qcm9wcyIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlRXhpdCIsIl9nZXRUcmFuc2l0aW9uUHJvcHMyIiwibm9kZU9yTmV4dCIsIm1heWJlTmV4dCIsIm11aVN1cHBvcnRBdXRvIiwiUGFwZXIiLCJfcHJvcHMkc3F1YXJlIiwiX3Byb3BzJGVsZXZhdGlvbiIsImVsZXZhdGlvbiIsImVsZXZhdGlvbnMiLCJzaGFkb3ciLCJnZXRPZmZzZXRUb3AiLCJ2ZXJ0aWNhbCIsImdldE9mZnNldExlZnQiLCJob3Jpem9udGFsIiwiZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUiLCJnZXRBbmNob3JFbCIsImFuY2hvckVsIiwiUG9wb3ZlciIsIl9wcm9wcyRhbmNob3JPcmlnaW4iLCJhbmNob3JPcmlnaW4iLCJhbmNob3JQb3NpdGlvbiIsIl9wcm9wcyRhbmNob3JSZWZlcmVuYyIsImFuY2hvclJlZmVyZW5jZSIsImNvbnRhaW5lclByb3AiLCJnZXRDb250ZW50QW5jaG9yRWwiLCJfcHJvcHMkbWFyZ2luVGhyZXNob2wiLCJtYXJnaW5UaHJlc2hvbGQiLCJfcHJvcHMkUGFwZXJQcm9wcyIsIlBhcGVyUHJvcHMiLCJfcHJvcHMkdHJhbnNmb3JtT3JpZ2kiLCJfcHJvcHMkdHJhbnNpdGlvbkR1cmEiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiX3Byb3BzJFRyYW5zaXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwicGFwZXJSZWYiLCJnZXRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yT2Zmc2V0IiwicmVzb2x2ZWRBbmNob3JFbCIsImFuY2hvclJlY3QiLCJhbmNob3JWZXJ0aWNhbCIsImdldENvbnRlbnRBbmNob3JPZmZzZXQiLCJjb250ZW50QW5jaG9yRWwiLCJnZXRTY3JvbGxQYXJlbnQiLCJvZmZzZXRUb3AiLCJnZXRUcmFuc2Zvcm1PcmlnaW4iLCJlbGVtUmVjdCIsImdldFBvc2l0aW9uaW5nU3R5bGUiLCJvZmZzZXRIZWlnaHQiLCJlbGVtVHJhbnNmb3JtT3JpZ2luIiwiY29udGFpbmVyV2luZG93IiwiaGVpZ2h0VGhyZXNob2xkIiwid2lkdGhUaHJlc2hvbGQiLCJkaWZmIiwiX2RpZmYiLCJfZGlmZjIiLCJfZGlmZjMiLCJzZXRQb3NpdGlvbmluZ1N0eWxlcyIsInBvc2l0aW9uaW5nIiwiaGFuZGxlUGFwZXJSZWYiLCJ1cGRhdGVQb3NpdGlvbiIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsIm1heEhlaWdodCIsIkxpc3QiLCJfcHJvcHMkZGVuc2UiLCJkZW5zZSIsIl9wcm9wcyRkaXNhYmxlUGFkZGluZyIsImRpc2FibGVQYWRkaW5nIiwic3ViaGVhZGVyIiwibGlzdFN0eWxlIiwibmV4dEl0ZW0iLCJkaXNhYmxlTGlzdFdyYXAiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJwcmV2aW91c0l0ZW0iLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwidGV4dENyaXRlcmlhTWF0Y2hlcyIsIm5leHRGb2N1cyIsInRleHRDcml0ZXJpYSIsImlubmVyVGV4dCIsInJlcGVhdGluZyIsIm1vdmVGb2N1cyIsImN1cnJlbnRGb2N1cyIsImRpc2FibGVkSXRlbXNGb2N1c2FibGUiLCJ0cmF2ZXJzYWxGdW5jdGlvbiIsIndyYXBwZWRPbmNlIiwibmV4dEZvY3VzRGlzYWJsZWQiLCJhY3Rpb25zIiwiX3Byb3BzJGF1dG9Gb2N1cyIsIl9wcm9wcyRhdXRvRm9jdXNJdGVtIiwiYXV0b0ZvY3VzSXRlbSIsIl9wcm9wcyRkaXNhYmxlZEl0ZW1zRiIsIl9wcm9wcyRkaXNhYmxlTGlzdFdyYSIsImxpc3RSZWYiLCJ0ZXh0Q3JpdGVyaWFSZWYiLCJwcmV2aW91c0tleU1hdGNoZWQiLCJsYXN0VGltZSIsImFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyIiwiY29udGFpbmVyRWxlbWVudCIsIm5vRXhwbGljaXRXaWR0aCIsImFjdGl2ZUl0ZW1JbmRleCIsIml0ZW1zIiwibmV3Q2hpbGRQcm9wcyIsImNyaXRlcmlhIiwibG93ZXJLZXkiLCJjdXJyVGltZSIsImtlZXBGb2N1c09uQ3VycmVudCIsIlJUTF9PUklHSU4iLCJMVFJfT1JJR0lOIiwiZGlzYWJsZUF1dG9Gb2N1c0l0ZW0iLCJfcHJvcHMkTWVudUxpc3RQcm9wcyIsIk1lbnVMaXN0UHJvcHMiLCJQb3BvdmVyQ2xhc3NlcyIsIm1lbnVMaXN0QWN0aW9uc1JlZiIsImNvbnRlbnRBbmNob3JSZWYiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsImFyZUVxdWFsVmFsdWVzIiwiYXJpYUxhYmVsIiwiYXV0b1dpZHRoIiwiZGlzcGxheUVtcHR5IiwiSWNvbkNvbXBvbmVudCIsImxhYmVsSWQiLCJfcHJvcHMkTWVudVByb3BzIiwiTWVudVByb3BzIiwib25PcGVuIiwib3BlblByb3AiLCJyZW5kZXJWYWx1ZSIsIl9wcm9wcyRTZWxlY3REaXNwbGF5UCIsIlNlbGVjdERpc3BsYXlQcm9wcyIsInRhYkluZGV4UHJvcCIsIl91c2VDb250cm9sbGVkMiIsImRlZmF1bHRQcm9wIiwidmFsdWVTdGF0ZSIsInVzZUNvbnRyb2xsZWQiLCJkaXNwbGF5Tm9kZSIsInNldERpc3BsYXlOb2RlIiwiaXNPcGVuQ29udHJvbGxlZCIsIm1lbnVNaW5XaWR0aFN0YXRlIiwic2V0TWVudU1pbldpZHRoU3RhdGUiLCJvcGVuU3RhdGUiLCJzZXRPcGVuU3RhdGUiLCJnZXRFbGVtZW50QnlJZCIsImlzQ29sbGFwc2VkIiwiZGlzcGxheVNpbmdsZSIsImNoaWxkcmVuQXJyYXkiLCJoYW5kbGVJdGVtQ2xpY2siLCJpdGVtSW5kZXgiLCJkaXNwbGF5TXVsdGlwbGUiLCJjb21wdXRlRGlzcGxheSIsIm1lbnVNaW5XaWR0aCIsImJ1dHRvbklkIiwic2VsZWN0Iiwic2VsZWN0TWVudSIsIm5hdGl2ZUlucHV0IiwiaWNvbk9wZW4iLCJpY29uRmlsbGVkIiwiaWNvbk91dGxpbmVkIiwiZGVmYXVsdElucHV0IiwiTmF0aXZlU2VsZWN0IiwiX3Byb3BzJEljb25Db21wb25lbnQiLCJBcnJvd0Ryb3BEb3duIiwiX3Byb3BzJGlucHV0IiwiU2VsZWN0IiwiX3Byb3BzJGF1dG9XaWR0aCIsIl9wcm9wcyRkaXNwbGF5RW1wdHkiLCJfcHJvcHMkbXVsdGlwbGUiLCJfcHJvcHMkbmF0aXZlIiwibmF0aXZlIiwidmFyaWFudFByb3BzIiwidmFyaWFudENvbXBvbmVudCIsIlRleHRGaWVsZCIsIkZvcm1IZWxwZXJUZXh0UHJvcHMiLCJoZWxwZXJUZXh0IiwiSW5wdXRMYWJlbFByb3BzIiwiSW5wdXRQcm9wcyIsIl9wcm9wcyRzZWxlY3QiLCJTZWxlY3RQcm9wcyIsIklucHV0TW9yZSIsIl9JbnB1dExhYmVsUHJvcHMkcmVxdSIsImRpc3BsYXlSZXF1aXJlZCIsImhlbHBlclRleHRJZCIsImlucHV0TGFiZWxJZCIsIklucHV0RWxlbWVudCIsImh0bWxGb3IiLCJiYXRjaCIsImdldEJhdGNoIiwibnVsbExpc3RlbmVycyIsIlN1YnNjcmlwdGlvbiIsInBhcmVudFN1YiIsInVuc3Vic2NyaWJlIiwiaGFuZGxlQ2hhbmdlV3JhcHBlciIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJvblN0YXRlQ2hhbmdlIiwiaXNTdWJzY3JpYmVkIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwidHJ5VW5zdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJFTVBUWV9BUlJBWSIsIk5PX1NVQlNDUklQVElPTl9BUlJBWSIsInN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciIsInVwZGF0ZUNvdW50IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzIiwiZWZmZWN0RnVuYyIsImVmZmVjdEFyZ3MiLCJjYXB0dXJlV3JhcHBlclByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImxhc3RDaGlsZFByb3BzIiwicmVuZGVySXNTY2hlZHVsZWQiLCJ3cmFwcGVyUHJvcHMiLCJhY3R1YWxDaGlsZFByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJsYXRlc3RTdG9yZVN0YXRlIiwiaW5pdFN0YXRlVXBkYXRlcyIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiRmb3J3YXJkUmVmIiwid2l0aFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImhhbmRsZVN1YnNlcXVlbnRDYWxscyIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsIm5ld0JhdGNoIiwiU3R5bGVkQnV0dG9uIiwiU3R5bGVkSW5wdXQiLCJ3aXRoU3R5bGVzIiwiY29ubmVjdCIsInNldFNlYXJjaFZhbHVlIiwiY2FzaGVkVXNlcnMiLCJzZXRDYXNoZWRVc2VycyIsImxvYWRpbmciLCJmZXRjaFVzZXJzIiwib25TdWJtaXQiLCJub1ZhbGlkYXRlIiwiU0hPV19MT0FERVIiLCJGRVRDSF9VU0VSUyIsImhhbmRsZXJzIiwicmVzdWx0c1JlZHVjZXIiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsIm9uIiwib2ZmIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiZ2V0VW5pcXVlSWQiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiUmVzdWx0c1N0YXRlIiwiaGlzdG9yeSIsInNob3dMb2FkZXIiLCJmZXRjaCIsInJlc3BvbnNlIiwic2V0SXRlbSIsInBhdGhuYW1lIiwiU3R5bGVkQWJvdXRUeXBvZ3JhcGh5IiwiU3R5bGVkQWJvdXRJY29uIiwiQWJvdXQiLCJsb2dvIiwiaW5pdGlhbFN0YXRlIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiY29tYmluZVJlZHVjZXJzIiwicm9vdENvbnRhaW5lciIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiO3lDQUVBLEVBQVEsTUFFUixFQUFRLEtBRVIsRUFBUSxLQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLE1BRVIsRUFBUSxNQUVSLEVBQVEsTUFFUixFQUFRLE8sZUM1QlIsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxJQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsS0FDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxLQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLE1BQ1IsRUFBUSxNQUNSLEVBQVEsTUFDUixFQUFRLEtBQ1IsRUFBUSxNQUNSLEVB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R0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FBSUEsR0FBYSxFQUFHLEVBQUcsSUFBSyxFQUFHLEVBQUcsR0FBSSxHQUFJLEVB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QUFVcGlDLEdBQVFrOUMsRUFDbEJGLEVBQWFBLEdBQWNFLElBQW9CRCxFQUlqRCxPQURBRCxFQUFhQSxHQUFjRixFQUFpQmg2SCxTQUFXUSxPQUFPd1MsS0FBSzAvQyxHQUFPMXlELFFBQ3REcy9HLEVBQVk1c0QsR3FCdmNUNG5FLENBQWdCLENBQ3ZDaGpHLFlBVmdCLFdBQTZDLElBQTVDbzdCLEVBQTRDLHVEQUFwQ2ttRSxHQUFvQyx5Q0FBcEJ6M0gsRUFBb0IsRUFBcEJBLEtBQU0rdkQsRUFBYyxFQUFkQSxRQUMvQyxPQUFRL3ZELEdBQ0osSUFBSyxtQkFDRCxnQkFBWXV4RCxHQUFaLElBQW1CcDdCLFlBQWE0NUIsSUFDcEMsUUFDSSxPQUFPd0IsT0NEYjZuRSxHQUFnQjU1SCxTQUFTMHBILGVBQWUsUUFFOUNtUSxTQUNJLGdCQUFDLEdBQUQsQ0FBVWp2SCxNQUFPQSxJQUVULGdCQUFDLEdBQUQsT0FHUmd2SCxLIiwiZmlsZSI6Im1haW4uYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2VzNlwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbVJpZ2h0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1MZWZ0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLmdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTInIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBoYXMoZXhwb3J0cywga2V5KSkgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xuICBpZiAodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpIHRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYgKGFMZW4gPCAyKSBmb3IgKDs7KSB7XG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTInIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xuICB2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIHNwcmVhZGFibGU7XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIHNwcmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gICAgICAgIHNwcmVhZGFibGUgPSBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KGVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ByZWFkYWJsZSAmJiBkZXB0aCA+IDApIHtcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MWZmZmZmZmZmZmZmZmYpIHRocm93IFR5cGVFcnJvcigpO1xuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0SW5kZXgrKztcbiAgICB9XG4gICAgc291cmNlSW5kZXgrKztcbiAgfVxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIHtcbiAgICAgIGtleSA9IGtleXNbaisrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgaXNFbnVtLmNhbGwoTywga2V5KSkge1xuICAgICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBxdW90ID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIHZhciBwMSA9ICc8JyArIHRhZztcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcbiAgdmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbiAgdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG4gIHZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuICB2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG4gIHZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xuICB2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbiAgdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG4gIHZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG4gIHZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbiAgdmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG4gIHZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbiAgdmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcbiAgdmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xuICB2YXIgZFAgPSAkRFAuZjtcbiAgdmFyIGdPUEQgPSAkR09QRC5mO1xuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbiAgdmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XG4gIHZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xuICB2YXIgJEFycmF5QnVmZmVyID0gJGJ1ZmZlci5BcnJheUJ1ZmZlcjtcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcbiAgdmFyIGFycmF5RmlsdGVyID0gY3JlYXRlQXJyYXlNZXRob2QoMik7XG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcbiAgdmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xuICB2YXIgYXJyYXlJbmRleE9mID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSk7XG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XG4gIHZhciBhcnJheUVudHJpZXMgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzO1xuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xuICB2YXIgYXJyYXlSZWR1Y2VSaWdodCA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHQ7XG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XG4gIHZhciBhcnJheVNsaWNlID0gQXJyYXlQcm90by5zbGljZTtcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XG4gIHZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xuICB2YXIgREVGX0NPTlNUUlVDVE9SID0gdWlkKCdkZWZfY29uc3RydWN0b3InKTtcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XG4gIHZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbiAoTywgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uIChDLCBsZW5ndGgpIHtcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbiAoTywgbGlzdCkge1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChpdCwga2V5LCBpbnRlcm5hbCkge1xuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKykge1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoO1xuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xuICAgICAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgc3JjID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKSB7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogJHNsaWNlLFxuICAgIHNldDogJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gKCkgeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50c1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xuICAgIHZhciBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdO1xuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcbiAgICB2YXIgRk9SQ0VEID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlY7XG4gICAgdmFyIE8gPSB7fTtcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZiAoQ0xBTVBFRCkgdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBvZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5KDEpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSkgfHwgISRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheSgxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpIHtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcbiAgICAgICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpO1xuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTXG4gICAgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgQmFzZS5vZi5jYWxsKFR5cGVkQXJyYXksIDEpOyB9KSwgTkFNRSwge1xuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgaWYgKCFMSUJSQVJZICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZykgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyA9IGFycmF5VG9TdHJpbmc7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4ISc7XG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgTWF0aCA9IGdsb2JhbC5NYXRoO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xudmFyIEluZmluaXR5ID0gZ2xvYmFsLkluZmluaXR5O1xudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xudmFyIEJVRkZFUiA9ICdidWZmZXInO1xudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xudmFyIEJZVEVfT0ZGU0VUID0gJ2J5dGVPZmZzZXQnO1xudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xudmFyICRPRkZTRVQgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbmZ1bmN0aW9uIHBhY2tJRUVFNzU0KHZhbHVlLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XG4gIHZhciBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbmZ1bmN0aW9uIHVucGFja0lFRUU3NTQoYnVmZmVyLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xuICB2YXIgaSA9IG5CeXRlcyAtIDE7XG4gIHZhciBzID0gYnVmZmVyW2ktLV07XG4gIHZhciBlID0gcyAmIDEyNztcbiAgdmFyIG07XG4gIHMgPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufVxuXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59XG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59XG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufVxuXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9IH0pO1xufVxuXG5mdW5jdGlvbiBnZXQodmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59XG5mdW5jdGlvbiBzZXQodmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn1cblxuaWYgKCEkdHlwZWQuQUJWKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgVFlQRUQgPSB1aWQoJ3R5cGVkX2FycmF5Jyk7XG52YXIgVklFVyA9IHVpZCgndmlldycpO1xudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xudmFyIENPTlNUUiA9IEFCVjtcbnZhciBpID0gMDtcbnZhciBsID0gOTtcbnZhciBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUgKGkgPCBsKSB7XG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6IFRZUEVELFxuICBWSUVXOiBWSUVXXG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpO1xudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24gKCRzZWFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUubWF0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXG4gICAgZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyICRTUExJVCA9ICdzcGxpdCc7XG52YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xuXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XG5cbi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3BsaXRgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByZWdleHAsIHRoaXMsIGxpbWl0LCBpbnRlcm5hbFNwbGl0ICE9PSAkc3BsaXQpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFNVUFBPUlRTX1kgPyByeCA6ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgU1VQUE9SVFNfWSA/IFMgOiBTLnNsaWNlKHEpKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkR09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJyAmJiAhISRHT1BTLmY7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gICRHT1BTLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gJGZhaWxzKGZ1bmN0aW9uICgpIHsgJEdPUFMuZigxKTsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogRkFJTFNfT05fUFJJTUlUSVZFUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICByZXR1cm4gJEdPUFMuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBNU0lFID0gL01TSUUgLlxcLi8udGVzdCh1c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgYm91bmRBcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZSk7XG4gIH07XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuWW4zZzRhSktpcC0yWXgtQUhtc3lyOmJlZm9yZXtjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kOnJnYmEoMjU1LDI1NSwyNTUsLjUpO2N1cnNvcjp3YWl0fS5ZbjNnNGFKS2lwLTJZeC1BSG1zeXI6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtkaXNwbGF5OmJsb2NrO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7Ym9yZGVyLXJhZGl1czo1MCU7LXdlYmtpdC1hbmltYXRpb246XzNiYTVEaGQ1NHNjcHNEWTFJUUN4MlogLjdzIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb246XzNiYTVEaGQ1NHNjcHNEWTFJUUN4MlogLjdzIGxpbmVhciBpbmZpbml0ZTtib3JkZXI6NXB4IHNvbGlkICNmZmY7Ym94LXNpemluZzpib3JkZXItYm94O2JveC1zaGFkb3c6MCAwIDEycHggcmdiYSgwLDAsMCwuMik7Ym9yZGVyLXRvcC1jb2xvcjojMTQ2YWVjO2N1cnNvcjp3YWl0fUAtd2Via2l0LWtleWZyYW1lcyBfM2JhNURoZDU0c2Nwc0RZMUlRQ3gyWnswJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIF8zYmE1RGhkNTRzY3BzRFkxSVFDeDJaezAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0xvYWRlci9Mb2FkZXIubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0ksOEJBQ0ksVUFBQSxDQUNBLGlCQUFBLENBQ0EsS0FBQSxDQUNBLE1BQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUVBLGtCQUFBLENBQ0EsK0JBQUEsQ0FDQSxXQUFBLENBRUosNkJBQ0ksVUFBQSxDQUNBLGFBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUVBLGlCQUFBLENBQ0EsNkRBQUEsQ0FDQSxxREFBQSxDQUNBLHFCQUFBLENBR0EscUJBQUEsQ0FFQSxrQ0FBQSxDQUNBLHdCQUFBLENBQ0EsV0FBQSxDQUlSLDJDQUNJLEdBS0ksc0JBQUEsQ0FFSixLQUtJLHdCQUFBLENBQUEsQ0FtQ1IsbUNBQ0ksR0FLSSxzQkFBQSxDQUVKLEtBS0ksd0JBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubG9hZGluZyB7XFxyXFxuICAgICY6YmVmb3JlIHtcXHJcXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgdG9wOiAwO1xcclxcbiAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXHJcXG4gICAgICAgIGN1cnNvcjogd2FpdDtcXHJcXG4gICAgfVxcclxcbiAgICAmOmFmdGVyIHtcXHJcXG4gICAgICAgIGNvbnRlbnQ6ICcnO1xcclxcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICB3aWR0aDogNTBweDtcXHJcXG4gICAgICAgIGhlaWdodDogNTBweDtcXHJcXG4gICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICAgICAgLXdlYmtpdC1hbmltYXRpb246IHNwaW4gMC43cyBsaW5lYXIgaW5maW5pdGU7XFxyXFxuICAgICAgICBhbmltYXRpb246IHNwaW4gMC43cyBsaW5lYXIgaW5maW5pdGU7XFxyXFxuICAgICAgICBib3JkZXI6IDVweCBzb2xpZCAjZmZmO1xcclxcbiAgICAgICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCAwIDEycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogMCAwIDEycHggcmdiYSgwLCAwLCAwLCAwLjIpO1xcclxcbiAgICAgICAgYm9yZGVyLXRvcC1jb2xvcjogIzE0NmFlYztcXHJcXG4gICAgICAgIGN1cnNvcjogd2FpdDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG5ALXdlYmtpdC1rZXlmcmFtZXMgc3BpbiB7XFxyXFxuICAgIDAlIHtcXHJcXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICAgICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gICAgfVxcclxcbiAgICAxMDAlIHtcXHJcXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICAgICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuQC1tb3ota2V5ZnJhbWVzIHNwaW4ge1xcclxcbiAgICAwJSB7XFxyXFxuICAgICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICAgICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gICAgICAgIC1vLXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgIH1cXHJcXG4gICAgMTAwJSB7XFxyXFxuICAgICAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgICAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgICAgIC1vLXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICB9XFxyXFxufVxcclxcbkAtby1rZXlmcmFtZXMgc3BpbiB7XFxyXFxuICAgIDAlIHtcXHJcXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICAgICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gICAgfVxcclxcbiAgICAxMDAlIHtcXHJcXG4gICAgICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICAgICAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuQGtleWZyYW1lcyBzcGluIHtcXHJcXG4gICAgMCUge1xcclxcbiAgICAgICAgLW1vei10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gICAgICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxyXFxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXHJcXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xcclxcbiAgICB9XFxyXFxuICAgIDEwMCUge1xcclxcbiAgICAgICAgLW1vei10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICAgICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxyXFxuICAgICAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJsb2FkaW5nXCI6IFwiWW4zZzRhSktpcC0yWXgtQUhtc3lyXCIsXG5cdFwic3BpblwiOiBcIl8zYmE1RGhkNTRzY3BzRFkxSVFDeDJaXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLl8xUW1YaXlpeGMySE94ZnFnX0h6NjQye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDo1MHB4O21hcmdpbjowIDAgMzBweDtwYWRkaW5nOjAgMjBweDtsaW5lLWhlaWdodDo1MHB4O2JhY2tncm91bmQ6I2ZmZjdlZDtib3JkZXItcmFkaXVzOjVweDtmb250LXdlaWdodDo3MDA7Zm9udC1zaXplOjE3cHg7Y29sb3I6IzFhMWExYTtib3gtc2l6aW5nOmJvcmRlci1ib3h9LlVZeDRWM3hVRUZrOFNRUzRhdjlWZntkaXNwbGF5OmdyaWQ7Z3JpZC1jb2x1bW4tZ2FwOjMwcHg7Z3JpZC1yb3ctZ2FwOjIwcHg7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdChhdXRvLWZpbGwsIDIxNXB4KTtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7bWFyZ2luLWJvdHRvbTo4MHB4fS5lZWFidHZUV1Fqb0JwWmU2NmtGcXF7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6MjE1cHg7cGFkZGluZy10b3A6NDBweDtib3JkZXItcmFkaXVzOjEwcHg7YmFja2dyb3VuZDojZjlmOWZiO2NvbG9yOiMzMzN9LmFzNXVzOGU5ZFJmblh6eHNHbk9hZXttYXgtd2lkdGg6ODAlO21hcmdpbjoyMHB4IDAgMTVweDtmb250LXdlaWdodDo4MDA7bGluZS1oZWlnaHQ6MTlweDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvUmVzdWx0cy9SZXN1bHRzLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHlCQUNJLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLHNCQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSxlQUFBLENBQ0EsY0FBQSxDQUNBLGdCQUFBLENBQ0Esa0JBQUEsQ0FFQSxpQkFBQSxDQUNBLGVBQUEsQ0FDQSxjQUFBLENBQ0EsYUFBQSxDQUdBLHFCQUFBLENBRUosdUJBQ0ksWUFBQSxDQUNBLG9CQUFBLENBQ0EsaUJBQUEsQ0FDQSw4Q0FBQSxDQUNBLHNCQUFBLENBQ0EsVUFBQSxDQUNBLGtCQUFBLENBQ0EsdUJBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FDQSxXQUFBLENBQ0EsZ0JBQUEsQ0FFQSxrQkFBQSxDQUNBLGtCQUFBLENBQ0EsVUFBQSxDQUNBLHVCQUNJLGFBQUEsQ0FDQSxrQkFBQSxDQUNBLGVBQUEsQ0FDQSxnQkFBQSxDQUNBLHNCQUFBLENBQ0Esa0JBQUEsQ0FDQSxlQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5mb3VuZF9udW1iZXIge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogNTBweDtcXHJcXG4gICAgbWFyZ2luOiAwIDAgMzBweDtcXHJcXG4gICAgcGFkZGluZzogMCAyMHB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogNTBweDtcXHJcXG4gICAgYmFja2dyb3VuZDogI2ZmZjdlZDtcXHJcXG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXHJcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcclxcbiAgICBjb2xvcjogIzFhMWExYTtcXHJcXG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcbi5yZXN1bHRzIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC1jb2x1bW4tZ2FwOiAzMHB4O1xcclxcbiAgICBncmlkLXJvdy1nYXA6IDIwcHg7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgMjE1cHgpO1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDgwcHg7XFxyXFxuICAgICZfaXRlbSB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICB3aWR0aDogMjE1cHg7XFxyXFxuICAgICAgICBwYWRkaW5nLXRvcDogNDBweDtcXHJcXG4gICAgICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiAjZjlmOWZiO1xcclxcbiAgICAgICAgY29sb3I6ICMzMzM7XFxyXFxuICAgICAgICAmX2xvZ2luIHtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDgwJTtcXHJcXG4gICAgICAgICAgICBtYXJnaW46IDIwcHggMCAxNXB4O1xcclxcbiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XFxyXFxuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE5cHg7XFxyXFxuICAgICAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxyXFxuICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXHJcXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcImZvdW5kX251bWJlclwiOiBcIl8xUW1YaXlpeGMySE94ZnFnX0h6NjQyXCIsXG5cdFwicmVzdWx0c1wiOiBcIlVZeDRWM3hVRUZrOFNRUzRhdjlWZlwiLFxuXHRcInJlc3VsdHNfaXRlbVwiOiBcImVlYWJ0dlRXUWpvQnBaZTY2a0ZxcVwiLFxuXHRcInJlc3VsdHNfaXRlbV9sb2dpblwiOiBcImFzNXVzOGU5ZFJmblh6eHNHbk9hZVwiXG59O1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5fM1hmUkZwV0R0eFp4b21MdnNWbUhUWXtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTttYXJnaW46NTBweCAwIDMwcHh9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvU2VhcmNoL1NlYXJjaC5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSx5QkFDSSxZQUFBLENBQ0EsVUFBQSxDQUNBLGtCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zZWFyY2gge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbWFyZ2luOiA1MHB4IDAgMzBweDtcXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwic2VhcmNoXCI6IFwiXzNYZlJGcFdEdHhaeG9tTHZzVm1IVFlcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gbW9kdWxlWydkZWZhdWx0J10gOlxuXHRcdCgpID0+IG1vZHVsZTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCIuL25vQ29uZmxpY3RcIik7XG5cbnZhciBfZ2xvYmFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2dsb2JhbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG5pZiAoX2dsb2JhbFtcImRlZmF1bHRcIl0uX2JhYmVsUG9seWZpbGwgJiYgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuKSB7XG4gIGNvbnNvbGUud2FybihcIkBiYWJlbC9wb2x5ZmlsbCBpcyBsb2FkZWQgbW9yZSB0aGFuIG9uY2Ugb24gdGhpcyBwYWdlLiBUaGlzIGlzIHByb2JhYmx5IG5vdCBkZXNpcmFibGUvaW50ZW5kZWQgXCIgKyBcImFuZCBtYXkgaGF2ZSBjb25zZXF1ZW5jZXMgaWYgZGlmZmVyZW50IHZlcnNpb25zIG9mIHRoZSBwb2x5ZmlsbHMgYXJlIGFwcGxpZWQgc2VxdWVudGlhbGx5LiBcIiArIFwiSWYgeW91IGRvIG5lZWQgdG8gbG9hZCB0aGUgcG9seWZpbGwgbW9yZSB0aGFuIG9uY2UsIHVzZSBAYmFiZWwvcG9seWZpbGwvbm9Db25mbGljdCBcIiArIFwiaW5zdGVhZCB0byBieXBhc3MgdGhlIHdhcm5pbmcuXCIpO1xufVxuXG5fZ2xvYmFsW1wiZGVmYXVsdFwiXS5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbM10udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9SZXN1bHRzLm1vZHVsZS5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImZ1bmN0aW9uIHRvVmFsKG1peCkge1xuXHR2YXIgaywgeSwgc3RyPScnO1xuXG5cdGlmICh0eXBlb2YgbWl4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWl4ID09PSAnbnVtYmVyJykge1xuXHRcdHN0ciArPSBtaXg7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShtaXgpKSB7XG5cdFx0XHRmb3IgKGs9MDsgayA8IG1peC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0aWYgKHkgPSB0b1ZhbChtaXhba10pKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoayBpbiBtaXgpIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0c3RyICs9IGs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG5cdHZhciBpPTAsIHRtcCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAodG1wID0gYXJndW1lbnRzW2krK10pIHtcblx0XHRcdGlmICh4ID0gdG9WYWwodG1wKSkge1xuXHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRzdHIgKz0geFxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3RyO1xufVxuIiwiLyoqXG4gKiBXQVJOSU5HOiBEb24ndCBpbXBvcnQgdGhpcyBkaXJlY3RseS5cbiAqIFVzZSBgTXVpRXJyb3JgIGZyb20gYEBtYXRlcmlhbC11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbiAgdmFyIHVybCA9ICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9wcm9kdWN0aW9uLWVycm9yLz9jb2RlPScgKyBjb2RlO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuICdNaW5pZmllZCBNYXRlcmlhbC1VSSBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgdXJsICsgJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZS4nO1xuICAvKiBlc2xpbnQtZW5hYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xufSIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0IHZhciBpc0Jyb3dzZXIgPSAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSBcIm9iamVjdFwiICYmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAnb2JqZWN0JyAmJiBkb2N1bWVudC5ub2RlVHlwZSA9PT0gOTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCcm93c2VyO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xudmFyIHRvQ3NzVmFsdWUgPSBmdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufTtcblxuLyoqXG4gKiBJbmRlbnQgYSBzdHJpbmcuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9hcnJheS1qb2luLXZzLWZvclxuICovXG5mdW5jdGlvbiBpbmRlbnRTdHIoc3RyLCBpbmRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUnVsZSB0byBDU1Mgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICghc3R5bGUpIHJldHVybiByZXN1bHQ7XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpbmRlbnQgPSBfb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG4gIGlmIChzZWxlY3RvcikgaW5kZW50Kys7IC8vIEFwcGx5IGZhbGxiYWNrcyBmaXJzdC5cblxuICBpZiAoZmFsbGJhY2tzKSB7XG4gICAgLy8gQXJyYXkgc3ludGF4IHtmYWxsYmFja3M6IFt7cHJvcDogdmFsdWV9XX1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmYWxsYmFja3MpKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZmFsbGJhY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSBmYWxsYmFja3NbaW5kZXhdO1xuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihwcm9wICsgXCI6IFwiICsgdG9Dc3NWYWx1ZSh2YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0IHN5bnRheCB7ZmFsbGJhY2tzOiB7cHJvcDogdmFsdWV9fVxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZmFsbGJhY2tzKSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBmYWxsYmFja3NbX3Byb3BdO1xuXG4gICAgICAgIGlmIChfdmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnXFxuJztcbiAgICAgICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihfcHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUoX3ZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX3Byb3AyIGluIHN0eWxlKSB7XG4gICAgdmFyIF92YWx1ZTIgPSBzdHlsZVtfcHJvcDJdO1xuXG4gICAgaWYgKF92YWx1ZTIgIT0gbnVsbCAmJiBfcHJvcDIgIT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICByZXN1bHQgKz0gXCJcIiArIGluZGVudFN0cihfcHJvcDIgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZTIpICsgXCI7XCIsIGluZGVudCk7XG4gICAgfVxuICB9IC8vIEFsbG93IGVtcHR5IHN0eWxlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgZHluYW1pY2FsbHkuXG5cblxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0OyAvLyBXaGVuIHJ1bGUgaXMgYmVpbmcgc3RyaW5naWZpZWQgYmVmb3JlIHNlbGVjdG9yIHdhcyBkZWZpbmVkLlxuXG4gIGlmICghc2VsZWN0b3IpIHJldHVybiByZXN1bHQ7XG4gIGluZGVudC0tO1xuICBpZiAocmVzdWx0KSByZXN1bHQgPSBcIlxcblwiICsgcmVzdWx0ICsgXCJcXG5cIjtcbiAgcmV0dXJuIGluZGVudFN0cihzZWxlY3RvciArIFwiIHtcIiArIHJlc3VsdCwgaW5kZW50KSArIGluZGVudFN0cignfScsIGluZGVudCk7XG59XG5cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcbnZhciBuYXRpdmVFc2NhcGUgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MuZXNjYXBlO1xudmFyIGVzY2FwZSA9IChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBuYXRpdmVFc2NhcGUgPyBuYXRpdmVFc2NhcGUoc3RyKSA6IHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG59KTtcblxudmFyIEJhc2VTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgaWYgKHNoZWV0KSB0aGlzLnJlbmRlcmVyID0gc2hlZXQucmVuZGVyZXI7ZWxzZSBpZiAoUmVuZGVyZXIpIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhIHN0eWxlIHByb3BlcnR5LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBCYXNlU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHJvcCA9IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAvLyBJdCdzIGEgZ2V0dGVyLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5zdHlsZVtuYW1lXTsgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cblxuICAgIHZhciBmb3JjZSA9IG9wdGlvbnMgPyBvcHRpb25zLmZvcmNlIDogZmFsc2U7XG4gICAgaWYgKCFmb3JjZSAmJiB0aGlzLnN0eWxlW25hbWVdID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5wcm9jZXNzICE9PSBmYWxzZSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25DaGFuZ2VWYWx1ZSh2YWx1ZSwgbmFtZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGlzRW1wdHkgPSBuZXdWYWx1ZSA9PSBudWxsIHx8IG5ld1ZhbHVlID09PSBmYWxzZTtcbiAgICB2YXIgaXNEZWZpbmVkID0gbmFtZSBpbiB0aGlzLnN0eWxlOyAvLyBWYWx1ZSBpcyBlbXB0eSBhbmQgd2Fzbid0IGRlZmluZWQgYmVmb3JlLlxuXG4gICAgaWYgKGlzRW1wdHkgJiYgIWlzRGVmaW5lZCAmJiAhZm9yY2UpIHJldHVybiB0aGlzOyAvLyBXZSBhcmUgZ29pbmcgdG8gcmVtb3ZlIHRoaXMgdmFsdWUuXG5cbiAgICB2YXIgcmVtb3ZlID0gaXNFbXB0eSAmJiBpc0RlZmluZWQ7XG4gICAgaWYgKHJlbW92ZSkgZGVsZXRlIHRoaXMuc3R5bGVbbmFtZV07ZWxzZSB0aGlzLnN0eWxlW25hbWVdID0gbmV3VmFsdWU7IC8vIFJlbmRlcmFibGUgaXMgZGVmaW5lZCBpZiBTdHlsZVNoZWV0IG9wdGlvbiBgbGlua2AgaXMgdHJ1ZS5cblxuICAgIGlmICh0aGlzLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgaWYgKHJlbW92ZSkgdGhpcy5yZW5kZXJlci5yZW1vdmVQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUpO2Vsc2UgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5hdHRhY2hlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIFJ1bGUgaXMgbm90IGxpbmtlZC4gTWlzc2luZyBzaGVldCBvcHRpb24gXCJsaW5rOiB0cnVlXCIuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEJhc2VTdHlsZVJ1bGU7XG59KCk7XG52YXIgU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShTdHlsZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbCh0aGlzLCBrZXksIHN0eWxlLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHZvaWQgMDtcbiAgICBfdGhpcy5pZCA9IHZvaWQgMDtcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IsXG4gICAgICAgIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgIH0gZWxzZSBpZiAoc2NvcGVkICE9PSBmYWxzZSkge1xuICAgICAgX3RoaXMuaWQgPSBnZW5lcmF0ZUlkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBzaGVldCk7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBcIi5cIiArIGVzY2FwZShfdGhpcy5pZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgKiBBdHRlbnRpb246IHVzZSB0aGlzIHdpdGggY2F1dGlvbi4gTW9zdCBicm93c2VycyBkaWRuJ3QgaW1wbGVtZW50XG4gICAqIHNlbGVjdG9yVGV4dCBzZXR0ZXIsIHNvIHRoaXMgbWF5IHJlc3VsdCBpbiByZXJlbmRlcmluZyBvZiBlbnRpcmUgU3R5bGUgU2hlZXQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90bzIgPSBTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBBcHBseSBydWxlIHRvIGFuIGVsZW1lbnQgaW5saW5lLlxuICAgKi9cbiAgX3Byb3RvMi5hcHBseVRvID0gZnVuY3Rpb24gYXBwbHlUbyhyZW5kZXJhYmxlKSB7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIGpzb24pIHtcbiAgICAgICAgcmVuZGVyZXIuc2V0UHJvcGVydHkocmVuZGVyYWJsZSwgcHJvcCwganNvbltwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVsZS5cbiAgICogRmFsbGJhY2tzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKiBVc2VmdWwgZm9yIGlubGluZSBzdHlsZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIGpzb24gPSB7fTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdHlsZVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSBqc29uW3Byb3BdID0gdmFsdWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIGpzb25bcHJvcF0gPSB0b0Nzc1ZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuc2VsZWN0b3JUZXh0LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVSdWxlLCBbe1xuICAgIGtleTogXCJzZWxlY3RvclwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IHRoaXMuc2VsZWN0b3JUZXh0KSByZXR1cm47XG4gICAgICB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICByZW5kZXJhYmxlID0gdGhpcy5yZW5kZXJhYmxlO1xuICAgICAgaWYgKCFyZW5kZXJhYmxlIHx8ICFyZW5kZXJlcikgcmV0dXJuO1xuICAgICAgdmFyIGhhc0NoYW5nZWQgPSByZW5kZXJlci5zZXRTZWxlY3RvcihyZW5kZXJhYmxlLCBzZWxlY3Rvcik7IC8vIElmIHNlbGVjdG9yIHNldHRlciBpcyBub3QgaW1wbGVtZW50ZWQsIHJlcmVuZGVyIHRoZSBydWxlLlxuXG4gICAgICBpZiAoIWhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmVuZGVyZXIucmVwbGFjZVJ1bGUocmVuZGVyYWJsZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBzZWxlY3RvciBzdHJpbmcuXG4gICAgICovXG4gICAgLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JUZXh0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpblN0eWxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnIHx8IG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0eWxlUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIGF0UmVnRXhwID0gL0AoW1xcdy1dKykvO1xuLyoqXG4gKiBDb25kaXRpb25hbCBydWxlIGZvciBAbWVkaWEsIEBzdXBwb3J0c1xuICovXG5cbnZhciBDb25kaXRpb25hbFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25kaXRpb25hbFJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnY29uZGl0aW9uYWwnO1xuICAgIHRoaXMuYXQgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWVyeSA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHZhciBhdE1hdGNoID0ga2V5Lm1hdGNoKGF0UmVnRXhwKTtcbiAgICB0aGlzLmF0ID0gYXRNYXRjaCA/IGF0TWF0Y2hbMV0gOiAndW5rbm93bic7IC8vIEtleSBtaWdodCBjb250YWluIGEgdW5pcXVlIHN1ZmZpeCBpbiBjYXNlIHRoZSBgbmFtZWAgcGFzc2VkIGJ5IHVzZXIgd2FzIGR1cGxpY2F0ZS5cblxuICAgIHRoaXMucXVlcnkgPSBvcHRpb25zLm5hbWUgfHwgXCJAXCIgKyB0aGlzLmF0O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzLFxuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMubWFwW25hbWVdLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcblxuICAgIGlmICghcnVsZSB8fCAvLyBTdHlsZSBzaGVldCB3YXMgY3JlYXRlZCB3aXRob3V0IGxpbms6IHRydWUgYW5kIGF0dGFjaGVkLCBpbiB0aGlzIGNhc2Ugd2VcbiAgICAvLyB3b24ndCBiZSBhYmxlIHRvIHJlbW92ZSB0aGUgQ1NTIHJ1bGUgZnJvbSB0aGUgRE9NLlxuICAgIHRoaXMuYXR0YWNoZWQgJiYgIXJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgc2luZ2xlIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5ydWxlcy51cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB7XG4gICAgICBpbnRlcm5hbDogW10sXG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIHRoaXMucmVnaXN0cnkgPSB2b2lkIDA7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luc1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAqL1xuICBfcHJvdG8ub25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1N0eWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgcmVnaXN0cnkgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsVGhpcyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsVGhpc1tuc10gPT0gbnVsbCkgZ2xvYmFsVGhpc1tuc10gPSAwOyAvLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5cbnZhciBtb2R1bGVJZCA9IGdsb2JhbFRoaXNbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4gKiBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0ZWQuXG4gKiBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuICovXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgXCIgKyBydWxlQ291bnRlciArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIganNzSWQgPSAnJztcbiAgICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIHtcbiAgICAgICAganNzSWQgPSBTdHJpbmcoc2hlZXQub3B0aW9ucy5qc3MuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgLy8gVXNpbmcgXCJjXCIgYmVjYXVzZSBhIG51bWJlciBjYW4ndCBiZSB0aGUgZmlyc3QgY2hhciBpbiBhIGNsYXNzIG5hbWUuXG4gICAgICByZXR1cm4gXCJcIiArIChwcmVmaXggfHwgJ2MnKSArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkID8gXCItXCIgKyBqc3NJZCA6ICcnKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG52YXIgZ2V0UHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cbnZhciBzZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn07XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkkMSA9IHJlZ2lzdHJ5LnJlZ2lzdHJ5O1xuXG4gIGlmIChyZWdpc3RyeSQxLmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5JDEsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cblxuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG5cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBjb21tZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IGNvbW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfSAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuXG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEluc2VydGlvbiBwb2ludCBcXFwiXCIgKyBpbnNlcnRpb25Qb2ludCArIFwiXFxcIiBub3QgZm91bmQuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICB2YXIgbmV4dE5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKG5leHROb2RlICE9PSBmYWxzZSAmJiBuZXh0Tm9kZS5wYXJlbnQpIHtcbiAgICBuZXh0Tm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0Tm9kZS5ub2RlKTtcbiAgICByZXR1cm47XG4gIH0gLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cblxuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBwYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBcIiArIGVyci5tZXNzYWdlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLmNzc1J1bGVzW2luZGV4XTtcbn07XG5cbnZhciBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleCA9IGZ1bmN0aW9uIGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KGNvbnRhaW5lciwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByZXR1cm4gbWF4SW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIC8vIFdpbGwgYmUgZW1wdHkgaWYgbGluazogdHJ1ZSBvcHRpb24gaXMgbm90IHNldCwgYmVjYXVzZVxuICAvLyBpdCBpcyBvbmx5IGZvciB1c2UgdG9nZXRoZXIgd2l0aCBpbnNlcnRSdWxlIEFQSS5cbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudCA9IHZvaWQgMDtcbiAgICB0aGlzLnNoZWV0ID0gdm9pZCAwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgIHRoaXMuY3NzUnVsZXMgPSBbXTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHJlZ2lzdHJ5LmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7IC8vIEluIHRoZSBtb3N0IGJyb3dzZXJzLCBydWxlcyBpbnNlcnRlZCB1c2luZyBpbnNlcnRSdWxlKCkgQVBJIHdpbGwgYmUgbG9zdCB3aGVuIHN0eWxlIGVsZW1lbnQgaXMgcmVtb3ZlZC5cbiAgICAvLyBUaG91Z2ggSUUgd2lsbCBrZWVwIHRoZW0gYW5kIHdlIG5lZWQgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuXG4gICAgaWYgKHRoaXMuc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICB2YXIgX2luc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7IC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cblxuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIF9pbnNlcnRpb25JbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgX2luc2VydGlvbkluZGV4LCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGluc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgaW5zZXJ0aW9uSW5kZXgsIG5hdGl2ZVJ1bGUpO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9O1xuXG4gIF9wcm90by5yZWZDc3NSdWxlID0gZnVuY3Rpb24gcmVmQ3NzUnVsZShydWxlLCBpbmRleCwgY3NzUnVsZSkge1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IGNzc1J1bGU7IC8vIFdlIG9ubHkgd2FudCB0byByZWZlcmVuY2UgdGhlIHRvcCBsZXZlbCBydWxlcywgZGVsZXRlUnVsZSBBUEkgZG9lc24ndCBzdXBwb3J0IHJlbW92aW5nIG5lc3RlZCBydWxlc1xuICAgIC8vIGxpa2UgcnVsZXMgaW5zaWRlIG1lZGlhIHF1ZXJpZXMgb3Iga2V5ZnJhbWVzXG5cbiAgICBpZiAocnVsZS5vcHRpb25zLnBhcmVudCBpbnN0YW5jZW9mIFN0eWxlU2hlZXQpIHtcbiAgICAgIHRoaXMuY3NzUnVsZXNbaW5kZXhdID0gY3NzUnVsZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzUnVsZXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjUuMFwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSByZWdpc3RyeS5pbmRleCA9PT0gMCA/IDAgOiByZWdpc3RyeS5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgcmVnaXN0cnkucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyA9PT0gJ29iamVjdCcgJiYgQ1NTICE9IG51bGwgJiYgJ251bWJlcicgaW4gQ1NTO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBKc3Mob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cblxudmFyIGpzcyA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBqc3M7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgcmVnaXN0cnkgYXMgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIFRoZW1lQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRoZW1lQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUaGVtZUNvbnRleHQnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUaGVtZUNvbnRleHQgZnJvbSAnLi9UaGVtZUNvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIHZhciB0aGVtZSA9IFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsInZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5leHBvcnQgZGVmYXVsdCBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdtdWkubmVzdGVkJykgOiAnX19USEVNRV9ORVNURURfXyc7IiwiaW1wb3J0IG5lc3RlZCBmcm9tICcuLi9UaGVtZVByb3ZpZGVyL25lc3RlZCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGxpc3Qgb2YgdGhlIHN0eWxlIHJ1bGUgbmFtZSB3ZSB1c2UgYXMgZHJvcCBpbiByZXBsYWNlbWVudCBmb3IgdGhlIGJ1aWx0LWluXG4gKiBwc2V1ZG8gY2xhc3NlcyAoOmNoZWNrZWQsIDpkaXNhYmxlZCwgOmZvY3VzZWQsIGV0Yy4pLlxuICpcbiAqIFdoeSBkbyB0aGV5IGV4aXN0IGluIHRoZSBmaXJzdCBwbGFjZT9cbiAqIFRoZXNlIGNsYXNzZXMgYXJlIHVzZWQgYXQgYSBzcGVjaWZpY2l0eSBvZiAyLlxuICogSXQgYWxsb3dzIHRoZW0gdG8gb3ZlcnJpZGUgcHJldmlvdXNseSBkZWZpbmllZCBzdHlsZXMgYXMgd2VsbCBhc1xuICogYmVpbmcgdW50b3VjaGVkIGJ5IHNpbXBsZSB1c2VyIG92ZXJyaWRlcy5cbiAqL1xuXG52YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddOyAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbi8vIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXQuXG4vLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuLy9cbi8vIEl0J3MgaW5zcGlyZWQgYnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iLzRlNmEwNWRkM2Y3YjY1NzJmZGQzYWIyMTY4NjFkOWU0NDZjMjAzMzEvc3JjL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPSBvcHRpb25zLmRpc2FibGVHbG9iYWwsXG4gICAgICBkaXNhYmxlR2xvYmFsID0gX29wdGlvbnMkZGlzYWJsZUdsb2JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGRpc2FibGVHbG9iYSxcbiAgICAgIF9vcHRpb25zJHByb2R1Y3Rpb25QciA9IG9wdGlvbnMucHJvZHVjdGlvblByZWZpeCxcbiAgICAgIHByb2R1Y3Rpb25QcmVmaXggPSBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPT09IHZvaWQgMCA/ICdqc3MnIDogX29wdGlvbnMkcHJvZHVjdGlvblByLFxuICAgICAgX29wdGlvbnMkc2VlZCA9IG9wdGlvbnMuc2VlZCxcbiAgICAgIHNlZWQgPSBfb3B0aW9ucyRzZWVkID09PSB2b2lkIDAgPyAnJyA6IF9vcHRpb25zJHNlZWQ7XG4gIHZhciBzZWVkUHJlZml4ID0gc2VlZCA9PT0gJycgPyAnJyA6IFwiXCIuY29uY2F0KHNlZWQsIFwiLVwiKTtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcblxuICB2YXIgZ2V0TmV4dENvdW50ZXJJZCA9IGZ1bmN0aW9uIGdldE5leHRDb3VudGVySWQoKSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocnVsZUNvdW50ZXIgPj0gMWUxMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIHJ1bGVDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bGVDb3VudGVyO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc3R5bGVTaGVldCkge1xuICAgIHZhciBuYW1lID0gc3R5bGVTaGVldC5vcHRpb25zLm5hbWU7IC8vIElzIGEgZ2xvYmFsIHN0YXRpYyBNVUkgc3R5bGU/XG5cbiAgICBpZiAobmFtZSAmJiBuYW1lLmluZGV4T2YoJ011aScpID09PSAwICYmICFzdHlsZVNoZWV0Lm9wdGlvbnMubGluayAmJiAhZGlzYWJsZUdsb2JhbCkge1xuICAgICAgLy8gV2UgY2FuIHVzZSBhIHNob3J0aGFuZCBjbGFzcyBuYW1lLCB3ZSBuZXZlciB1c2UgdGhlIGtleXMgdG8gc3R5bGUgdGhlIGNvbXBvbmVudHMuXG4gICAgICBpZiAocHNldWRvQ2xhc3Nlcy5pbmRleE9mKHJ1bGUua2V5KSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIFwiTXVpLVwiLmNvbmNhdChydWxlLmtleSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmVmaXggPSBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQobmFtZSwgXCItXCIpLmNvbmNhdChydWxlLmtleSk7XG5cbiAgICAgIGlmICghc3R5bGVTaGVldC5vcHRpb25zLnRoZW1lW25lc3RlZF0gfHwgc2VlZCAhPT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHByZWZpeCwgXCItXCIpLmNvbmNhdChnZXROZXh0Q291bnRlcklkKCkpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHByb2R1Y3Rpb25QcmVmaXgpLmNvbmNhdChnZXROZXh0Q291bnRlcklkKCkpO1xuICAgIH1cblxuICAgIHZhciBzdWZmaXggPSBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChnZXROZXh0Q291bnRlcklkKCkpOyAvLyBIZWxwIHdpdGggZGVidWdnYWJpbGl0eS5cblxuICAgIGlmIChzdHlsZVNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgsIFwiLVwiKS5jb25jYXQoc3VmZml4KTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VlZFByZWZpeCkuY29uY2F0KHN1ZmZpeCk7XG4gIH07XG59IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVJ1bGUgfSBmcm9tICdqc3MnO1xuXG52YXIgbm93ID0gRGF0ZS5ub3coKTtcbnZhciBmblZhbHVlc05zID0gXCJmblZhbHVlc1wiICsgbm93O1xudmFyIGZuUnVsZU5zID0gXCJmblN0eWxlXCIgKyArK25vdztcblxudmFyIGZ1bmN0aW9uUGx1Z2luID0gZnVuY3Rpb24gZnVuY3Rpb25QbHVnaW4oKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCB7fSwgb3B0aW9ucyk7XG4gICAgICBydWxlW2ZuUnVsZU5zXSA9IGRlY2w7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9LFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9uIHZhbHVlcyBmcm9tIHRoZSBkZWNsYXJhdGlvbiwgc28gdGhhdCB3ZSBjYW4ga2VlcCBjb3JlIHVuYXdhcmUgb2YgdGhlbS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhhdCBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb25zIG9uIGVhY2ggc3R5bGUgdXBkYXRlLCBzaW5jZSB0aGlzIGNhbiBoYXBwZW4gb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBmdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIG9mIGZ1bmN0aW9uIHJ1bGVzLlxuICAgICAgaWYgKGZuVmFsdWVzTnMgaW4gcnVsZSB8fCBmblJ1bGVOcyBpbiBydWxlKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgZm5WYWx1ZXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgZm5WYWx1ZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgcnVsZVtmblZhbHVlc05zXSA9IGZuVmFsdWVzO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTsgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICAgIHZhciBmblJ1bGUgPSBzdHlsZVJ1bGVbZm5SdWxlTnNdOyAvLyBJZiB3ZSBoYXZlIGEgc3R5bGUgZnVuY3Rpb24sIHRoZSBlbnRpcmUgcnVsZSBpcyBkeW5hbWljIGFuZCBzdHlsZSBvYmplY3RcbiAgICAgIC8vIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGF0IGZ1bmN0aW9uLlxuXG4gICAgICBpZiAoZm5SdWxlKSB7XG4gICAgICAgIC8vIEVtcHR5IG9iamVjdCB3aWxsIHJlbW92ZSBhbGwgY3VycmVudGx5IGRlZmluZWQgcHJvcHNcbiAgICAgICAgLy8gaW4gY2FzZSBmdW5jdGlvbiBydWxlIHJldHVybnMgYSBmYWxzeSB2YWx1ZS5cbiAgICAgICAgc3R5bGVSdWxlLnN0eWxlID0gZm5SdWxlKGRhdGEpIHx8IHt9O1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlUnVsZS5zdHlsZVtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gRnVuY3Rpb24gdmFsdWVzIGluc2lkZSBmdW5jdGlvbiBydWxlcyBhcmUgbm90IHN1cHBvcnRlZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG5cbiAgICAgIHZhciBmblZhbHVlcyA9IHN0eWxlUnVsZVtmblZhbHVlc05zXTsgLy8gSWYgd2UgaGF2ZSBhIGZuIHZhbHVlcyBtYXAsIGl0IGlzIGEgcnVsZSB3aXRoIGZ1bmN0aW9uIHZhbHVlcy5cblxuICAgICAgaWYgKGZuVmFsdWVzKSB7XG4gICAgICAgIGZvciAodmFyIF9wcm9wIGluIGZuVmFsdWVzKSB7XG4gICAgICAgICAgc3R5bGVSdWxlLnByb3AoX3Byb3AsIGZuVmFsdWVzW19wcm9wXShkYXRhKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvblBsdWdpbjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IFJ1bGVMaXN0IH0gZnJvbSAnanNzJztcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHbG9iYWxDb250YWluZXJSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAocnVsZSkgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IGtleS5zdWJzdHIoYXRQcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLnJ1bGUgPSBvcHRpb25zLmpzcy5jcmVhdGVSdWxlKHNlbGVjdG9yLCBzdHlsZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gR2xvYmFsUHJlZml4ZWRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGUgPyB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucykgOiAnJztcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsUHJlZml4ZWRSdWxlO1xufSgpO1xuXG52YXIgc2VwYXJhdG9yUmVnRXhwID0gL1xccyosXFxzKi9nO1xuXG5mdW5jdGlvbiBhZGRTY29wZShzZWxlY3Rvciwgc2NvcGUpIHtcbiAgdmFyIHBhcnRzID0gc2VsZWN0b3Iuc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgdmFyIHNjb3BlZCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICBzY29wZWQgKz0gc2NvcGUgKyBcIiBcIiArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuXG4gIHJldHVybiBzY29wZWQ7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSwgc2hlZXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG4gIHZhciBydWxlcyA9IHN0eWxlID8gc3R5bGVbYXRdIDogbnVsbDtcbiAgaWYgKCFydWxlcykgcmV0dXJuO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcnVsZXMpIHtcbiAgICBzaGVldC5hZGRSdWxlKG5hbWUsIHJ1bGVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IGFkZFNjb3BlKG5hbWUsIHJ1bGUuc2VsZWN0b3IpXG4gICAgfSkpO1xuICB9XG5cbiAgZGVsZXRlIHN0eWxlW2F0XTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcFswXSAhPT0gJ0AnIHx8IHByb3Auc3Vic3RyKDAsIGF0Lmxlbmd0aCkgIT09IGF0KSBjb250aW51ZTtcbiAgICB2YXIgc2VsZWN0b3IgPSBhZGRTY29wZShwcm9wLnN1YnN0cihhdC5sZW5ndGgpLCBydWxlLnNlbGVjdG9yKTtcbiAgICBzaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cbn1cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5cbmZ1bmN0aW9uIGpzc0dsb2JhbCgpIHtcbiAgZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAobmFtZSA9PT0gYXQpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsQ29udGFpbmVyUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChuYW1lWzBdID09PSAnQCcgJiYgbmFtZS5zdWJzdHIoMCwgYXRQcmVmaXgubGVuZ3RoKSA9PT0gYXRQcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQgJiYgcGFyZW50Lm9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc2NvcGVkID09PSBmYWxzZSkge1xuICAgICAgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJyB8fCAhc2hlZXQpIHJldHVybjtcbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KTtcbiAgICBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSwgc2hlZXQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSxcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0dsb2JhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgIHZhciBydWxlID0gY29udGFpbmVyLmdldFJ1bGUoa2V5KSB8fCBzaGVldCAmJiBzaGVldC5nZXRSdWxlKGtleSk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIHJ1bGUgPSBydWxlO1xuICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvcjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDb3VsZCBub3QgZmluZCB0aGUgcmVmZXJlbmNlZCBydWxlIFxcXCJcIiArIGtleSArIFwiXFxcIiBpbiBcXFwiXCIgKyAoY29udGFpbmVyLm9wdGlvbnMubWV0YSB8fCBjb250YWluZXIudG9TdHJpbmcoKSkgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudFNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudFNlbGVjdG9yc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXN0ZWRTZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG5lc3RlZCA9IG5lc3RlZFNlbGVjdG9yc1tqXTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICcsICc7IC8vIFJlcGxhY2UgYWxsICYgYnkgdGhlIHBhcmVudCBvciBwcmVmaXggJiB3aXRoIHRoZSBwYXJlbnQuXG5cbiAgICAgICAgcmVzdWx0ICs9IG5lc3RlZC5pbmRleE9mKCcmJykgIT09IC0xID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgXCIgXCIgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBwcmV2T3B0aW9ucykge1xuICAgIC8vIE9wdGlvbnMgaGFzIGJlZW4gYWxyZWFkeSBjcmVhdGVkLCBub3cgd2Ugb25seSBpbmNyZWFzZSBpbmRleC5cbiAgICBpZiAocHJldk9wdGlvbnMpIHJldHVybiBfZXh0ZW5kcyh7fSwgcHJldk9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBwcmV2T3B0aW9ucy5pbmRleCArIDEgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cbiAgICB9KTtcbiAgICB2YXIgbmVzdGluZ0xldmVsID0gcnVsZS5vcHRpb25zLm5lc3RpbmdMZXZlbDtcbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcnVsZS5vcHRpb25zLCB7XG4gICAgICBuZXN0aW5nTGV2ZWw6IG5lc3RpbmdMZXZlbCxcbiAgICAgIGluZGV4OiBjb250YWluZXIuaW5kZXhPZihydWxlKSArIDEgLy8gV2UgZG9uJ3QgbmVlZCB0aGUgcGFyZW50IG5hbWUgdG8gYmUgc2V0IG9wdGlvbnMgZm9yIGNobGlkLlxuXG4gICAgfSk7XG5cbiAgICBkZWxldGUgb3B0aW9ucy5uYW1lO1xuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBjb250YWluZXIgPSBzdHlsZVJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHJlcGxhY2VSZWY7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBwcm9wLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gICAgICB2YXIgaXNOZXN0ZWRDb25kaXRpb25hbCA9IHByb3BbMF0gPT09ICdAJztcbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMoc3R5bGVSdWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgc3R5bGVSdWxlLnNlbGVjdG9yKTsgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuXG4gICAgICAgIGlmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCk7IC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuICAgICAgICBjb250YWluZXIuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICBjb250YWluZXIuYWRkUnVsZShwcm9wLCB7fSwgb3B0aW9ucykgLy8gRmxvdyBleHBlY3RzIG1vcmUgb3B0aW9ucyBidXQgdGhleSBhcmVuJ3QgcmVxdWlyZWRcbiAgICAgICAgLy8gQW5kIGZsb3cgZG9lc24ndCBrbm93IHRoaXMgd2lsbCBhbHdheXMgYmUgYSBTdHlsZVJ1bGUgd2hpY2ggaGFzIHRoZSBhZGRSdWxlIG1ldGhvZFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICAuYWRkUnVsZShzdHlsZVJ1bGUua2V5LCBzdHlsZVtwcm9wXSwge1xuICAgICAgICAgIHNlbGVjdG9yOiBzdHlsZVJ1bGUuc2VsZWN0b3JcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NOZXN0ZWQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby12YXIsIHByZWZlci10ZW1wbGF0ZSAqL1xudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZ1xudmFyIG1zUGF0dGVybiA9IC9ebXMtL1xudmFyIGNhY2hlID0ge31cblxuZnVuY3Rpb24gdG9IeXBoZW5Mb3dlcihtYXRjaCkge1xuICByZXR1cm4gJy0nICsgbWF0Y2gudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICBpZiAoY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICByZXR1cm4gY2FjaGVbbmFtZV1cbiAgfVxuXG4gIHZhciBoTmFtZSA9IG5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCB0b0h5cGhlbkxvd2VyKVxuICByZXR1cm4gKGNhY2hlW25hbWVdID0gbXNQYXR0ZXJuLnRlc3QoaE5hbWUpID8gJy0nICsgaE5hbWUgOiBoTmFtZSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgaHlwaGVuYXRlU3R5bGVOYW1lXG4iLCJpbXBvcnQgaHlwaGVuYXRlIGZyb20gJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJztcblxuLyoqXG4gKiBDb252ZXJ0IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGRhc2ggc2VwYXJhdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGNvbnZlcnRDYXNlKHN0eWxlKSB7XG4gIHZhciBjb252ZXJ0ZWQgPSB7fTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgdmFyIGtleSA9IHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCA/IHByb3AgOiBoeXBoZW5hdGUocHJvcCk7XG4gICAgY29udmVydGVkW2tleV0gPSBzdHlsZVtwcm9wXTtcbiAgfVxuXG4gIGlmIChzdHlsZS5mYWxsYmFja3MpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZS5mYWxsYmFja3MpKSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzLm1hcChjb252ZXJ0Q2FzZSk7ZWxzZSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gY29udmVydENhc2Uoc3R5bGUuZmFsbGJhY2tzKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59XG4vKipcbiAqIEFsbG93IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIGJ5IGNvbnZlcnRpbmcgdGhlbSBiYWNrIHRvIGRhc2hlcml6ZWQuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAvLyBIYW5kbGUgcnVsZXMgbGlrZSBAZm9udC1mYWNlLCB3aGljaCBjYW4gaGF2ZSBtdWx0aXBsZSBzdHlsZXMgaW4gYW4gYXJyYXlcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3R5bGVbaW5kZXhdID0gY29udmVydENhc2Uoc3R5bGVbaW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiBjb252ZXJ0Q2FzZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgaWYgKHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBoeXBoZW5hdGVkUHJvcCA9IGh5cGhlbmF0ZShwcm9wKTsgLy8gVGhlcmUgd2FzIG5vIGNhbWVsIGNhc2UgaW4gcGxhY2VcblxuICAgIGlmIChwcm9wID09PSBoeXBoZW5hdGVkUHJvcCkgcmV0dXJuIHZhbHVlO1xuICAgIHJ1bGUucHJvcChoeXBoZW5hdGVkUHJvcCwgdmFsdWUpOyAvLyBDb3JlIHdpbGwgaWdub3JlIHRoYXQgcHJvcGVydHkgdmFsdWUgd2Ugc2V0IHRoZSBwcm9wZXIgb25lIGFib3ZlLlxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNhbWVsQ2FzZTtcbiIsImltcG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQgfSBmcm9tICdqc3MnO1xuXG52YXIgcHggPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5weCA6ICdweCc7XG52YXIgbXMgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5tcyA6ICdtcyc7XG52YXIgcGVyY2VudCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnBlcmNlbnQgOiAnJSc7XG4vKipcbiAqIEdlbmVyYXRlZCBqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqXG4gKiBAdHlwZSBvYmplY3RcbiAqL1xuXG52YXIgZGVmYXVsdFVuaXRzID0ge1xuICAvLyBBbmltYXRpb24gcHJvcGVydGllc1xuICAnYW5pbWF0aW9uLWRlbGF5JzogbXMsXG4gICdhbmltYXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQmFja2dyb3VuZCBwcm9wZXJ0aWVzXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXgnOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6IHB4LFxuICAnYmFja2dyb3VuZC1zaXplJzogcHgsXG4gIC8vIEJvcmRlciBQcm9wZXJ0aWVzXG4gIGJvcmRlcjogcHgsXG4gICdib3JkZXItYm90dG9tJzogcHgsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWxlZnQnOiBweCxcbiAgJ2JvcmRlci1sZWZ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItcmFkaXVzJzogcHgsXG4gICdib3JkZXItcmlnaHQnOiBweCxcbiAgJ2JvcmRlci1yaWdodC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXRvcCc6IHB4LFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3Atd2lkdGgnOiBweCxcbiAgJ2JvcmRlci13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrJzogcHgsXG4gICdib3JkZXItYmxvY2stZW5kJzogcHgsXG4gICdib3JkZXItYmxvY2stZW5kLXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2stc3RhcnQnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1zdGFydC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lJzogcHgsXG4gICdib3JkZXItaW5saW5lLWVuZCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1lbmQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtc3RhcnQnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtc3RhcnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1zdGFydC1zdGFydC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1zdGFydC1lbmQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItZW5kLXN0YXJ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWVuZC1lbmQtcmFkaXVzJzogcHgsXG4gIC8vIE1hcmdpbiBwcm9wZXJ0aWVzXG4gIG1hcmdpbjogcHgsXG4gICdtYXJnaW4tYm90dG9tJzogcHgsXG4gICdtYXJnaW4tbGVmdCc6IHB4LFxuICAnbWFyZ2luLXJpZ2h0JzogcHgsXG4gICdtYXJnaW4tdG9wJzogcHgsXG4gICdtYXJnaW4tYmxvY2snOiBweCxcbiAgJ21hcmdpbi1ibG9jay1lbmQnOiBweCxcbiAgJ21hcmdpbi1ibG9jay1zdGFydCc6IHB4LFxuICAnbWFyZ2luLWlubGluZSc6IHB4LFxuICAnbWFyZ2luLWlubGluZS1lbmQnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gUGFkZGluZyBwcm9wZXJ0aWVzXG4gIHBhZGRpbmc6IHB4LFxuICAncGFkZGluZy1ib3R0b20nOiBweCxcbiAgJ3BhZGRpbmctbGVmdCc6IHB4LFxuICAncGFkZGluZy1yaWdodCc6IHB4LFxuICAncGFkZGluZy10b3AnOiBweCxcbiAgJ3BhZGRpbmctYmxvY2snOiBweCxcbiAgJ3BhZGRpbmctYmxvY2stZW5kJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdwYWRkaW5nLWlubGluZSc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUtZW5kJzogcHgsXG4gICdwYWRkaW5nLWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBNYXNrIHByb3BlcnRpZXNcbiAgJ21hc2stcG9zaXRpb24teCc6IHB4LFxuICAnbWFzay1wb3NpdGlvbi15JzogcHgsXG4gICdtYXNrLXNpemUnOiBweCxcbiAgLy8gV2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gIGhlaWdodDogcHgsXG4gIHdpZHRoOiBweCxcbiAgJ21pbi1oZWlnaHQnOiBweCxcbiAgJ21heC1oZWlnaHQnOiBweCxcbiAgJ21pbi13aWR0aCc6IHB4LFxuICAnbWF4LXdpZHRoJzogcHgsXG4gIC8vIFBvc2l0aW9uIHByb3BlcnRpZXNcbiAgYm90dG9tOiBweCxcbiAgbGVmdDogcHgsXG4gIHRvcDogcHgsXG4gIHJpZ2h0OiBweCxcbiAgaW5zZXQ6IHB4LFxuICAnaW5zZXQtYmxvY2snOiBweCxcbiAgJ2luc2V0LWJsb2NrLWVuZCc6IHB4LFxuICAnaW5zZXQtYmxvY2stc3RhcnQnOiBweCxcbiAgJ2luc2V0LWlubGluZSc6IHB4LFxuICAnaW5zZXQtaW5saW5lLWVuZCc6IHB4LFxuICAnaW5zZXQtaW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIFNoYWRvdyBwcm9wZXJ0aWVzXG4gICdib3gtc2hhZG93JzogcHgsXG4gICd0ZXh0LXNoYWRvdyc6IHB4LFxuICAvLyBDb2x1bW4gcHJvcGVydGllc1xuICAnY29sdW1uLWdhcCc6IHB4LFxuICAnY29sdW1uLXJ1bGUnOiBweCxcbiAgJ2NvbHVtbi1ydWxlLXdpZHRoJzogcHgsXG4gICdjb2x1bW4td2lkdGgnOiBweCxcbiAgLy8gRm9udCBhbmQgdGV4dCBwcm9wZXJ0aWVzXG4gICdmb250LXNpemUnOiBweCxcbiAgJ2ZvbnQtc2l6ZS1kZWx0YSc6IHB4LFxuICAnbGV0dGVyLXNwYWNpbmcnOiBweCxcbiAgJ3RleHQtaW5kZW50JzogcHgsXG4gICd0ZXh0LXN0cm9rZSc6IHB4LFxuICAndGV4dC1zdHJva2Utd2lkdGgnOiBweCxcbiAgJ3dvcmQtc3BhY2luZyc6IHB4LFxuICAvLyBNb3Rpb24gcHJvcGVydGllc1xuICBtb3Rpb246IHB4LFxuICAnbW90aW9uLW9mZnNldCc6IHB4LFxuICAvLyBPdXRsaW5lIHByb3BlcnRpZXNcbiAgb3V0bGluZTogcHgsXG4gICdvdXRsaW5lLW9mZnNldCc6IHB4LFxuICAnb3V0bGluZS13aWR0aCc6IHB4LFxuICAvLyBQZXJzcGVjdGl2ZSBwcm9wZXJ0aWVzXG4gIHBlcnNwZWN0aXZlOiBweCxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi14JzogcGVyY2VudCxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi15JzogcGVyY2VudCxcbiAgLy8gVHJhbnNmb3JtIHByb3BlcnRpZXNcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi14JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXonOiBwZXJjZW50LFxuICAvLyBUcmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgJ3RyYW5zaXRpb24tZGVsYXknOiBtcyxcbiAgJ3RyYW5zaXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQWxpZ25tZW50IHByb3BlcnRpZXNcbiAgJ3ZlcnRpY2FsLWFsaWduJzogcHgsXG4gICdmbGV4LWJhc2lzJzogcHgsXG4gIC8vIFNvbWUgcmFuZG9tIHByb3BlcnRpZXNcbiAgJ3NoYXBlLW1hcmdpbic6IHB4LFxuICBzaXplOiBweCxcbiAgZ2FwOiBweCxcbiAgLy8gR3JpZCBwcm9wZXJ0aWVzXG4gIGdyaWQ6IHB4LFxuICAnZ3JpZC1nYXAnOiBweCxcbiAgJ2dyaWQtcm93LWdhcCc6IHB4LFxuICAnZ3JpZC1jb2x1bW4tZ2FwJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLXJvd3MnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtY29sdW1ucyc6IHB4LFxuICAnZ3JpZC1hdXRvLXJvd3MnOiBweCxcbiAgJ2dyaWQtYXV0by1jb2x1bW5zJzogcHgsXG4gIC8vIE5vdCBleGlzdGluZyBwcm9wZXJ0aWVzLlxuICAvLyBVc2VkIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tZXhwYW5kIGludGVncmF0aW9uLlxuICAnYm94LXNoYWRvdy14JzogcHgsXG4gICdib3gtc2hhZG93LXknOiBweCxcbiAgJ2JveC1zaGFkb3ctYmx1cic6IHB4LFxuICAnYm94LXNoYWRvdy1zcHJlYWQnOiBweCxcbiAgJ2ZvbnQtbGluZS1oZWlnaHQnOiBweCxcbiAgJ3RleHQtc2hhZG93LXgnOiBweCxcbiAgJ3RleHQtc2hhZG93LXknOiBweCxcbiAgJ3RleHQtc2hhZG93LWJsdXInOiBweFxufTtcblxuLyoqXG4gKiBDbG9uZXMgdGhlIG9iamVjdCBhbmQgYWRkcyBhIGNhbWVsIGNhc2VkIHByb3BlcnR5IHZlcnNpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9iaikge1xuICB2YXIgcmVnRXhwID0gLygtW2Etel0pL2c7XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICAgIHJldHVybiBzdHJbMV0udG9VcHBlckNhc2UoKTtcbiAgfTtcblxuICB2YXIgbmV3T2JqID0ge307XG5cbiAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICBuZXdPYmpbX2tleV0gPSBvYmpbX2tleV07XG4gICAgbmV3T2JqW19rZXkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2UpXSA9IG9ialtfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbnZhciB1bml0cyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKGRlZmF1bHRVbml0cyk7XG4vKipcbiAqIFJlY3Vyc2l2ZSBkZWVwIHN0eWxlIHBhc3NpbmcgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBpdGVyYXRlKHByb3AsIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyBcIi1cIiArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHZhciB1bml0ID0gb3B0aW9uc1twcm9wXSB8fCB1bml0c1twcm9wXTsgLy8gQWRkIHRoZSB1bml0IGlmIGF2YWlsYWJsZSwgZXhjZXB0IGZvciB0aGUgc3BlY2lhbCBjYXNlIG9mIDBweC5cblxuICAgIGlmICh1bml0ICYmICEodmFsdWUgPT09IDAgJiYgdW5pdCA9PT0gcHgpKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHVuaXQgPT09ICdmdW5jdGlvbicgPyB1bml0KHZhbHVlKS50b1N0cmluZygpIDogXCJcIiArIHZhbHVlICsgdW5pdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQWRkIHVuaXQgdG8gbnVtZXJpYyB2YWx1ZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZhdWx0VW5pdChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VW5pdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWRcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5XCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAndmFyJykgcmV0dXJuICd2YXInO1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xuICBpZiAoIXByZWZpeGVkVmFsdWUpIHJldHVybiBwMSB8fCBwMjtcbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSB8fCBwcm9wZXJ0eSA9PT0gJ2NvbnRlbnQnKSByZXR1cm4gdmFsdWU7IC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIGlmICh0eXBlb2YgcHJlZml4ZWRWYWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHByZWZpeGVkVmFsdWUsIDEwKSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbiAgfSAvLyBDcmVhdGUgY2FjaGUga2V5IGZvciBjdXJyZW50IHZhbHVlLlxuXG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyBwcmVmaXhlZFZhbHVlOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gdmFsdWUgZnJvbSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlJDFbY2FjaGVLZXldICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG4gIH0gLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInLlxuXG5cbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2l0aW9uLXByb3BlcnR5JyBwcm9wZXJ0eS5cblxuXG4gIGlmICh0cmFuc2l0aW9uUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4ZWRWYWx1ZS5yZXBsYWNlKHRyYW5zUHJvcHNSZWdFeHAsIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgLy8gVmFsdWUgd2l0aCBhIHZlbmRvciBwcmVmaXguXG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZFZhbHVlOyAvLyBIYXJkY29kZSB0ZXN0IHRvIGNvbnZlcnQgXCJmbGV4XCIgdG8gXCItbXMtZmxleGJveFwiIGZvciBJRTEwLlxuXG4gICAgaWYgKHByZWZpeGVkVmFsdWUgPT09ICctbXMtZmxleCcpIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJy1tcy1mbGV4Ym94JzsgLy8gVGVzdCBwcmVmaXhlZCB2YWx1ZS5cblxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTsgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG5cbiAgICBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG5cblxuICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICcnOyAvLyBXcml0ZSBjdXJyZW50IHZhbHVlIHRvIGNhY2hlLlxuXG4gIGNhY2hlJDFbY2FjaGVLZXldID0gcHJlZml4ZWRWYWx1ZTtcbiAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xufVxuXG5leHBvcnQgeyBwcmVmaXgsIHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgZnJvbSAnLi4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnanNzJztcbmltcG9ydCBqc3NQcmVzZXQgZnJvbSAnLi4vanNzUHJlc2V0JzsgLy8gRGVmYXVsdCBKU1MgaW5zdGFuY2UuXG5cbnZhciBqc3MgPSBjcmVhdGUoanNzUHJlc2V0KCkpOyAvLyBVc2UgYSBzaW5nbGV0b24gb3IgdGhlIHByb3ZpZGVkIG9uZSBieSB0aGUgY29udGV4dC5cbi8vXG4vLyBUaGUgY291bnRlci1iYXNlZCBhcHByb2FjaCBkb2Vzbid0IHRvbGVyYXRlIGFueSBtaXN0YWtlLlxuLy8gSXQncyBtdWNoIHNhZmVyIHRvIHVzZSB0aGUgc2FtZSBjb3VudGVyIGV2ZXJ5d2hlcmUuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbmV4cG9ydCB2YXIgc2hlZXRzTWFuYWdlciA9IG5ldyBNYXAoKTtcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGlzYWJsZUdlbmVyYXRpb246IGZhbHNlLFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogZ2VuZXJhdGVDbGFzc05hbWUsXG4gIGpzczoganNzLFxuICBzaGVldHNDYWNoZTogbnVsbCxcbiAgc2hlZXRzTWFuYWdlcjogc2hlZXRzTWFuYWdlcixcbiAgc2hlZXRzUmVnaXN0cnk6IG51bGxcbn07XG5leHBvcnQgdmFyIFN0eWxlc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRPcHRpb25zKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgU3R5bGVzQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdTdHlsZXNDb250ZXh0Jztcbn1cblxudmFyIGluamVjdEZpcnN0Tm9kZTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0eWxlc1Byb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGluamVjdEZpcnN0ID0gcHJvcHMuaW5qZWN0Rmlyc3QsXG4gICAgICBpbmplY3RGaXJzdCA9IF9wcm9wcyRpbmplY3RGaXJzdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5qZWN0Rmlyc3QsXG4gICAgICBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPSBwcm9wcy5kaXNhYmxlR2VuZXJhdGlvbixcbiAgICAgIGRpc2FibGVHZW5lcmF0aW9uID0gX3Byb3BzJGRpc2FibGVHZW5lcmF0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCxcbiAgICAgIGxvY2FsT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpbmplY3RGaXJzdFwiLCBcImRpc2FibGVHZW5lcmF0aW9uXCJdKTtcblxuICB2YXIgb3V0ZXJPcHRpb25zID0gUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KTtcblxuICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBvdXRlck9wdGlvbnMsIHtcbiAgICBkaXNhYmxlR2VuZXJhdGlvbjogZGlzYWJsZUdlbmVyYXRpb25cbiAgfSwgbG9jYWxPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiAhY29udGV4dC5zaGVldHNNYW5hZ2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IG5lZWQgdG8gdXNlIHRoZSBTZXJ2ZXJTdHlsZVNoZWV0cyBBUEkgd2hlbiByZW5kZXJpbmcgb24gdGhlIHNlcnZlci4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCB1c2UgYSBjdXN0b20gaW5zZXJ0aW9uUG9pbnQgYW5kIDxTdHlsZXNDb250ZXh0IGluamVjdEZpcnN0PiBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluamVjdEZpcnN0ICYmIGxvY2FsT3B0aW9ucy5qc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IHVzZSB0aGUganNzIGFuZCBpbmplY3RGaXJzdCBwcm9wcyBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghaW5qZWN0Rmlyc3ROb2RlKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgICBpbmplY3RGaXJzdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdtdWktaW5qZWN0LWZpcnN0Jyk7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShpbmplY3RGaXJzdE5vZGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgY29udGV4dC5qc3MgPSBjcmVhdGUoe1xuICAgICAgcGx1Z2luczoganNzUHJlc2V0KCkucGx1Z2lucyxcbiAgICAgIGluc2VydGlvblBvaW50OiBpbmplY3RGaXJzdE5vZGVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTdHlsZXNDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRcbiAgfSwgY2hpbGRyZW4pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGRpc2FibGUgdGhlIGdlbmVyYXRpb24gb2YgdGhlIHN0eWxlcyB3aXRoIHRoaXMgb3B0aW9uLlxuICAgKiBJdCBjYW4gYmUgdXNlZnVsIHdoZW4gdHJhdmVyc2luZyB0aGUgUmVhY3QgdHJlZSBvdXRzaWRlIG9mIHRoZSBIVE1MXG4gICAqIHJlbmRlcmluZyBzdGVwIG9uIHRoZSBzZXJ2ZXIuXG4gICAqIExldCdzIHNheSB5b3UgYXJlIHVzaW5nIHJlYWN0LWFwb2xsbyB0byBleHRyYWN0IGFsbFxuICAgKiB0aGUgcXVlcmllcyBtYWRlIGJ5IHRoZSBpbnRlcmZhY2Ugc2VydmVyLXNpZGUgLSB5b3UgY2FuIHNpZ25pZmljYW50bHkgc3BlZWQgdXAgdGhlIHRyYXZlcnNhbCB3aXRoIHRoaXMgcHJvcC5cbiAgICovXG4gIGRpc2FibGVHZW5lcmF0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgY2xhc3MgbmFtZSBnZW5lcmF0b3IuXG4gICAqL1xuICBnZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGxhc3QgaW4gdGhlIDxoZWFkPiBlbGVtZW50IG9mIHRoZSBwYWdlLlxuICAgKiBBcyBhIHJlc3VsdCwgdGhleSBnYWluIG1vcmUgc3BlY2lmaWNpdHkgdGhhbiBhbnkgb3RoZXIgc3R5bGUgc2hlZXQuXG4gICAqIElmIHlvdSB3YW50IHRvIG92ZXJyaWRlIE1hdGVyaWFsLVVJJ3Mgc3R5bGVzLCBzZXQgdGhpcyBwcm9wLlxuICAgKi9cbiAgaW5qZWN0Rmlyc3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBpbnN0YW5jZS5cbiAgICovXG4gIGpzczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc2VydmVyR2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIEJldGEgZmVhdHVyZS5cbiAgICpcbiAgICogQ2FjaGUgZm9yIHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNDYWNoZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBUaGUgc2hlZXRzTWFuYWdlciBpcyB1c2VkIHRvIGRlZHVwbGljYXRlIHN0eWxlIHNoZWV0IGluamVjdGlvbiBpbiB0aGUgcGFnZS5cbiAgICogSXQncyBkZWR1cGxpY2F0aW5nIHVzaW5nIHRoZSAodGhlbWUsIHN0eWxlcykgY291cGxlLlxuICAgKiBPbiB0aGUgc2VydmVyLCB5b3Ugc2hvdWxkIHByb3ZpZGUgYSBuZXcgaW5zdGFuY2UgZm9yIGVhY2ggcmVxdWVzdC5cbiAgICovXG4gIHNoZWV0c01hbmFnZXI6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQ29sbGVjdCB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzUmVnaXN0cnk6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMpIDogdm9pZCAwO1xufSIsIi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIGlmIChwcm9wMC5sZW5ndGggPT09IHByb3AxLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHByb3AwID4gcHJvcDEgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3AwLmxlbmd0aCAtIHByb3AxLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTdHlsZVtwcm9wc1tpXV0gPSBzdHlsZVtwcm9wc1tpXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1Byb3BzU29ydDtcbiIsImltcG9ydCBmdW5jdGlvbnMgZnJvbSAnanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uJztcbmltcG9ydCBnbG9iYWwgZnJvbSAnanNzLXBsdWdpbi1nbG9iYWwnO1xuaW1wb3J0IG5lc3RlZCBmcm9tICdqc3MtcGx1Z2luLW5lc3RlZCc7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gJ2pzcy1wbHVnaW4tY2FtZWwtY2FzZSc7XG5pbXBvcnQgZGVmYXVsdFVuaXQgZnJvbSAnanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQnO1xuaW1wb3J0IHZlbmRvclByZWZpeGVyIGZyb20gJ2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyJztcbmltcG9ydCBwcm9wc1NvcnQgZnJvbSAnanNzLXBsdWdpbi1wcm9wcy1zb3J0JzsgLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBqc3NQcmVzZXQoKSB7XG4gIHJldHVybiB7XG4gICAgcGx1Z2luczogW2Z1bmN0aW9ucygpLCBnbG9iYWwoKSwgbmVzdGVkKCksIGNhbWVsQ2FzZSgpLCBkZWZhdWx0VW5pdCgpLCAvLyBEaXNhYmxlIHRoZSB2ZW5kb3IgcHJlZml4ZXIgc2VydmVyLXNpZGUsIGl0IGRvZXMgbm90aGluZy5cbiAgICAvLyBUaGlzIHdheSwgd2UgY2FuIGdldCBhIHBlcmZvcm1hbmNlIGJvb3N0LlxuICAgIC8vIEluIHRoZSBkb2N1bWVudGF0aW9uLCB3ZSBhcmUgdXNpbmcgYGF1dG9wcmVmaXhlcmAgdG8gc29sdmUgdGhpcyBwcm9ibGVtLlxuICAgIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHZlbmRvclByZWZpeGVyKCksIHByb3BzU29ydCgpXVxuICB9O1xufSIsImltcG9ydCB7IHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkVmFsdWUsIHN1cHBvcnRlZFByb3BlcnR5IH0gZnJvbSAnY3NzLXZlbmRvcic7XG5pbXBvcnQgeyB0b0Nzc1ZhbHVlIH0gZnJvbSAnanNzJztcblxuLyoqXG4gKiBBZGQgdmVuZG9yIHByZWZpeCB0byBhIHByb3BlcnR5IG5hbWUgd2hlbiBuZWVkZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJDEgJiYgc3VwcG9ydGVkVmFsdWUkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgcmV0dXJuIHByZWZpeFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxudmFyIGluZGV4Q291bnRlciA9IC0xZTk7XG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICBpbmRleENvdW50ZXIgKz0gMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmRleENvdW50ZXIgPj0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXhDb3VudGVyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gJiYgX3R5cGVvZihpdGVtKSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7XG4gICAgY2xvbmU6IHRydWVcbiAgfTtcbiAgdmFyIG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcblxuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4vbm9vcFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN0eWxlc0NyZWF0b3Ioc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciB0aGVtaW5nRW5hYmxlZCA9IHR5cGVvZiBzdHlsZXNPckNyZWF0b3IgPT09ICdmdW5jdGlvbic7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoX3R5cGVvZihzdHlsZXNPckNyZWF0b3IpICE9PSAnb2JqZWN0JyAmJiAhdGhlbWluZ0VuYWJsZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBzdHlsZXNgIGFyZ3VtZW50IHByb3ZpZGVkIGlzIGludmFsaWQuJywgJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBmdW5jdGlvbiBnZW5lcmF0aW5nIHRoZSBzdHlsZXMgb3IgYSBzdHlsZXMgb2JqZWN0LiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHRoZW1lLCBuYW1lKSB7XG4gICAgICB2YXIgc3R5bGVzO1xuXG4gICAgICB0cnkge1xuICAgICAgICBzdHlsZXMgPSB0aGVtaW5nRW5hYmxlZCA/IHN0eWxlc09yQ3JlYXRvcih0aGVtZSkgOiBzdHlsZXNPckNyZWF0b3I7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGhlbWluZ0VuYWJsZWQgPT09IHRydWUgJiYgdGhlbWUgPT09IG5vb3BUaGVtZSkge1xuICAgICAgICAgICAgLy8gVE9ETzogcHJlcGVuZCBlcnJvciBtZXNzYWdlL25hbWUgaW5zdGVhZFxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IGFyZSBwcm92aWRpbmcgYSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgaW4gdGhlIGNvbnRleHQuJywgJ09uZSBvZiB0aGUgcGFyZW50IGVsZW1lbnRzIG5lZWRzIHRvIHVzZSBhIFRoZW1lUHJvdmlkZXIuJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFuYW1lIHx8ICF0aGVtZS5vdmVycmlkZXMgfHwgIXRoZW1lLm92ZXJyaWRlc1tuYW1lXSkge1xuICAgICAgICByZXR1cm4gc3R5bGVzO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3ZlcnJpZGVzID0gdGhlbWUub3ZlcnJpZGVzW25hbWVdO1xuXG4gICAgICB2YXIgc3R5bGVzV2l0aE92ZXJyaWRlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMpO1xuXG4gICAgICBPYmplY3Qua2V5cyhvdmVycmlkZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICghc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogWW91IGFyZSB0cnlpbmcgdG8gb3ZlcnJpZGUgYSBzdHlsZSB0aGF0IGRvZXMgbm90IGV4aXN0LicsIFwiRml4IHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGtleSBvZiBgdGhlbWUub3ZlcnJpZGVzLlwiKS5jb25jYXQobmFtZSwgXCJgLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSA9IGRlZXBtZXJnZShzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0sIG92ZXJyaWRlc1trZXldKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN0eWxlc1dpdGhPdmVycmlkZXM7XG4gICAgfSxcbiAgICBvcHRpb25zOiB7fVxuICB9O1xufSIsIi8vIFdlIHVzZSB0aGUgc2FtZSBlbXB0eSBvYmplY3QgdG8gcmVmIGNvdW50IHRoZSBzdHlsZXMgdGhhdCBkb24ndCBuZWVkIGEgdGhlbWUgb2JqZWN0LlxudmFyIG5vb3BUaGVtZSA9IHt9O1xuZXhwb3J0IGRlZmF1bHQgbm9vcFRoZW1lOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXREeW5hbWljU3R5bGVzIH0gZnJvbSAnanNzJztcbmltcG9ydCBtZXJnZUNsYXNzZXMgZnJvbSAnLi4vbWVyZ2VDbGFzc2VzJztcbmltcG9ydCBtdWx0aUtleVN0b3JlIGZyb20gJy4vbXVsdGlLZXlTdG9yZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuaW1wb3J0IHsgU3R5bGVzQ29udGV4dCB9IGZyb20gJy4uL1N0eWxlc1Byb3ZpZGVyJztcbmltcG9ydCB7IGluY3JlbWVudCB9IGZyb20gJy4vaW5kZXhDb3VudGVyJztcbmltcG9ydCBnZXRTdHlsZXNDcmVhdG9yIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3InO1xuaW1wb3J0IG5vb3BUaGVtZSBmcm9tICcuLi9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZSc7XG5cbmZ1bmN0aW9uIGdldENsYXNzZXMoX3JlZiwgY2xhc3NlcywgQ29tcG9uZW50KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBzdHlsZXNPcHRpb25zID0gX3JlZi5zdHlsZXNPcHRpb25zO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuIGNsYXNzZXMgfHwge307XG4gIH1cblxuICBpZiAoIXN0YXRlLmNhY2hlQ2xhc3Nlcykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3NlcyA9IHtcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgZmluYWxpemVkIGNsYXNzZXMgdmFsdWUuXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIGNsYXNzZXMgcHJvcCBwb2ludGVyLlxuICAgICAgbGFzdFByb3A6IG51bGwsXG4gICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCByZW5kZXJlZCBjbGFzc2VzIHBvaW50ZXIuXG4gICAgICBsYXN0SlNTOiB7fVxuICAgIH07XG4gIH0gLy8gVHJhY2tzIGlmIGVpdGhlciB0aGUgcmVuZGVyZWQgY2xhc3NlcyBvciBjbGFzc2VzIHByb3AgaGFzIGNoYW5nZWQsXG4gIC8vIHJlcXVpcmluZyB0aGUgZ2VuZXJhdGlvbiBvZiBhIG5ldyBmaW5hbGl6ZWQgY2xhc3NlcyBvYmplY3QuXG5cblxuICB2YXIgZ2VuZXJhdGUgPSBmYWxzZTtcblxuICBpZiAoc3RhdGUuY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RKU1MpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUyA9IHN0YXRlLmNsYXNzZXM7XG4gICAgZ2VuZXJhdGUgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGNsYXNzZXMgIT09IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0UHJvcCkge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0UHJvcCA9IGNsYXNzZXM7XG4gICAgZ2VuZXJhdGUgPSB0cnVlO1xuICB9XG5cbiAgaWYgKGdlbmVyYXRlKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlID0gbWVyZ2VDbGFzc2VzKHtcbiAgICAgIGJhc2VDbGFzc2VzOiBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUyxcbiAgICAgIG5ld0NsYXNzZXM6IGNsYXNzZXMsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlLmNhY2hlQ2xhc3Nlcy52YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXR0YWNoKF9yZWYyLCBwcm9wcykge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIHRoZW1lID0gX3JlZjIudGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zID0gX3JlZjIuc3R5bGVzT3B0aW9ucyxcbiAgICAgIHN0eWxlc0NyZWF0b3IgPSBfcmVmMi5zdHlsZXNDcmVhdG9yLFxuICAgICAgbmFtZSA9IF9yZWYyLm5hbWU7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2hlZXRNYW5hZ2VyID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNNYW5hZ2VyLCBzdHlsZXNDcmVhdG9yLCB0aGVtZSk7XG5cbiAgaWYgKCFzaGVldE1hbmFnZXIpIHtcbiAgICBzaGVldE1hbmFnZXIgPSB7XG4gICAgICByZWZzOiAwLFxuICAgICAgc3RhdGljU2hlZXQ6IG51bGwsXG4gICAgICBkeW5hbWljU3R5bGVzOiBudWxsXG4gICAgfTtcbiAgICBtdWx0aUtleVN0b3JlLnNldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lLCBzaGVldE1hbmFnZXIpO1xuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzQ3JlYXRvci5vcHRpb25zLCBzdHlsZXNPcHRpb25zLCB7XG4gICAgdGhlbWU6IHRoZW1lLFxuICAgIGZsaXA6IHR5cGVvZiBzdHlsZXNPcHRpb25zLmZsaXAgPT09ICdib29sZWFuJyA/IHN0eWxlc09wdGlvbnMuZmxpcCA6IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCdcbiAgfSk7XG5cbiAgb3B0aW9ucy5nZW5lcmF0ZUlkID0gb3B0aW9ucy5zZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSB8fCBvcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIHZhciBzdGF0aWNTaGVldDtcblxuICAgIGlmIChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlKSB7XG4gICAgICBzdGF0aWNTaGVldCA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gc3R5bGVzQ3JlYXRvci5jcmVhdGUodGhlbWUsIG5hbWUpO1xuXG4gICAgaWYgKCFzdGF0aWNTaGVldCkge1xuICAgICAgc3RhdGljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgICAgc3RhdGljU2hlZXQuYXR0YWNoKCk7XG5cbiAgICAgIGlmIChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlKSB7XG4gICAgICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3IsIHRoZW1lLCBzdGF0aWNTaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoc3RhdGljU2hlZXQpO1xuICAgIH1cblxuICAgIHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCA9IHN0YXRpY1NoZWV0O1xuICAgIHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzID0gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpO1xuICB9XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzKSB7XG4gICAgdmFyIGR5bmFtaWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgIGxpbms6IHRydWVcbiAgICB9LCBvcHRpb25zKSk7XG4gICAgZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcyk7XG4gICAgZHluYW1pY1NoZWV0LmF0dGFjaCgpO1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldCA9IGR5bmFtaWNTaGVldDtcbiAgICBzdGF0ZS5jbGFzc2VzID0gbWVyZ2VDbGFzc2VzKHtcbiAgICAgIGJhc2VDbGFzc2VzOiBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcyxcbiAgICAgIG5ld0NsYXNzZXM6IGR5bmFtaWNTaGVldC5jbGFzc2VzXG4gICAgfSk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChkeW5hbWljU2hlZXQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jbGFzc2VzID0gc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0LmNsYXNzZXM7XG4gIH1cblxuICBzaGVldE1hbmFnZXIucmVmcyArPSAxO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoX3JlZjMsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYzLnN0YXRlO1xuXG4gIGlmIChzdGF0ZS5keW5hbWljU2hlZXQpIHtcbiAgICBzdGF0ZS5keW5hbWljU2hlZXQudXBkYXRlKHByb3BzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRhY2goX3JlZjQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjQuc3RhdGUsXG4gICAgICB0aGVtZSA9IF9yZWY0LnRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9ucyA9IF9yZWY0LnN0eWxlc09wdGlvbnMsXG4gICAgICBzdHlsZXNDcmVhdG9yID0gX3JlZjQuc3R5bGVzQ3JlYXRvcjtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgc2hlZXRNYW5hZ2VyLnJlZnMgLT0gMTtcbiAgdmFyIHNoZWV0c1JlZ2lzdHJ5ID0gc3R5bGVzT3B0aW9ucy5zaGVldHNSZWdpc3RyeTtcblxuICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICBtdWx0aUtleVN0b3JlLmRlbGV0ZShzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgICBzdHlsZXNPcHRpb25zLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LnJlbW92ZShzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5keW5hbWljU2hlZXQpIHtcbiAgICBzdHlsZXNPcHRpb25zLmpzcy5yZW1vdmVTdHlsZVNoZWV0KHN0YXRlLmR5bmFtaWNTaGVldCk7XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LnJlbW92ZShzdGF0ZS5keW5hbWljU2hlZXQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jLCB2YWx1ZXMpIHtcbiAgdmFyIGtleSA9IFJlYWN0LnVzZVJlZihbXSk7XG4gIHZhciBvdXRwdXQ7IC8vIFN0b3JlIFwiZ2VuZXJhdGlvblwiIGtleS4gSnVzdCByZXR1cm5zIGEgbmV3IG9iamVjdCBldmVyeSB0aW1lXG5cbiAgdmFyIGN1cnJlbnRLZXkgPSBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sIHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIC8vIFwidGhlIGZpcnN0IHJlbmRlclwiLCBvciBcIm1lbW8gZHJvcHBlZCB0aGUgdmFsdWVcIlxuXG4gIGlmIChrZXkuY3VycmVudCAhPT0gY3VycmVudEtleSkge1xuICAgIGtleS5jdXJyZW50ID0gY3VycmVudEtleTtcbiAgICBvdXRwdXQgPSBmdW5jKCk7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgIG91dHB1dCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjdXJyZW50S2V5XSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXhPcHRpb24gPSBvcHRpb25zLmNsYXNzTmFtZVByZWZpeCxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50LFxuICAgICAgX29wdGlvbnMkZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICBkZWZhdWx0VGhlbWUgPSBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPT09IHZvaWQgMCA/IG5vb3BUaGVtZSA6IF9vcHRpb25zJGRlZmF1bHRUaGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcIm5hbWVcIiwgXCJjbGFzc05hbWVQcmVmaXhcIiwgXCJDb21wb25lbnRcIiwgXCJkZWZhdWx0VGhlbWVcIl0pO1xuXG4gIHZhciBzdHlsZXNDcmVhdG9yID0gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpO1xuICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZSB8fCBjbGFzc05hbWVQcmVmaXhPcHRpb24gfHwgJ21ha2VTdHlsZXMnO1xuICBzdHlsZXNDcmVhdG9yLm9wdGlvbnMgPSB7XG4gICAgaW5kZXg6IGluY3JlbWVudCgpLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgbWV0YTogY2xhc3NOYW1lUHJlZml4LFxuICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gIH07XG5cbiAgdmFyIHVzZVN0eWxlcyA9IGZ1bmN0aW9uIHVzZVN0eWxlcygpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgdmFyIHN0eWxlc09wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KSwgc3R5bGVzT3B0aW9uczIpO1xuXG4gICAgdmFyIGluc3RhbmNlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdmFyIHNob3VsZFVwZGF0ZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0ge1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBzdGF0ZToge30sXG4gICAgICAgIHN0eWxlc0NyZWF0b3I6IHN0eWxlc0NyZWF0b3IsXG4gICAgICAgIHN0eWxlc09wdGlvbnM6IHN0eWxlc09wdGlvbnMsXG4gICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgfTtcbiAgICAgIGF0dGFjaChjdXJyZW50LCBwcm9wcyk7XG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuY3VycmVudCA9IGN1cnJlbnQ7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBkZXRhY2goY3VycmVudCk7XG4gICAgICB9O1xuICAgIH0sIFt0aGVtZSwgc3R5bGVzQ3JlYXRvcl0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlLmN1cnJlbnQpIHtcbiAgICAgICAgdXBkYXRlKGluc3RhbmNlLmN1cnJlbnQsIHByb3BzKTtcbiAgICAgIH1cblxuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHZhciBjbGFzc2VzID0gZ2V0Q2xhc3NlcyhpbnN0YW5jZS5jdXJyZW50LCBwcm9wcy5jbGFzc2VzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgUmVhY3QudXNlRGVidWdWYWx1ZShjbGFzc2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfTtcblxuICByZXR1cm4gdXNlU3R5bGVzO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaGVtZVByb3BzKHBhcmFtcykge1xuICB2YXIgdGhlbWUgPSBwYXJhbXMudGhlbWUsXG4gICAgICBuYW1lID0gcGFyYW1zLm5hbWUsXG4gICAgICBwcm9wcyA9IHBhcmFtcy5wcm9wcztcblxuICBpZiAoIXRoZW1lIHx8ICF0aGVtZS5wcm9wcyB8fCAhdGhlbWUucHJvcHNbbmFtZV0pIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH0gLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzLCBjb2RlIGJvcnJvdyBmcm9tIFJlYWN0IHNvdXJjZS5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTVhOGYwMzE4MzhhNTUzZTQxYzBiNjZlYjFiY2YxZGE4NDQ4MTA0ZC9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RFbGVtZW50LmpzI0wyMjFcblxuXG4gIHZhciBkZWZhdWx0UHJvcHMgPSB0aGVtZS5wcm9wc1tuYW1lXTtcbiAgdmFyIHByb3BOYW1lO1xuXG4gIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgdmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoYnJlYWtwb2ludHMsIFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KSArIDE7XG4gICAgdmFyIHVwcGVyYm91bmQgPSB2YWx1ZXNba2V5c1tlbmRJbmRleF1dO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgLy8geGwgZG93biBhcHBsaWVzIHRvIGFsbCBzaXplc1xuICAgICAgcmV0dXJuIHVwKCd4cycpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB1cHBlcmJvdW5kID09PSAnbnVtYmVyJyAmJiBlbmRJbmRleCA+IDAgPyB1cHBlcmJvdW5kIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdXAoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh0eXBlb2YgdmFsdWVzW3N0YXJ0XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNbc3RhcnRdIDogc3RhcnQpLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQoKGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleXNbZW5kSW5kZXggKyAxXV0gOiBlbmQpIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgcmV0dXJuIGJldHdlZW4oa2V5LCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2lkdGgoa2V5KSB7XG4gICAgcmV0dXJuIHZhbHVlc1trZXldO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGd1dHRlcnM6IGZ1bmN0aW9uIGd1dHRlcnMoKSB7XG4gICAgICB2YXIgc3R5bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIC8vIFRvIGRlcHJlY2F0ZSBpbiB2NC4xXG4gICAgICAvLyAgICAgICB3YXJuaW5nKFxuICAgICAgLy8gICAgICAgICBmYWxzZSxcbiAgICAgIC8vICAgICAgICAgW1xuICAgICAgLy8gICAgICAgICAgICdNYXRlcmlhbC1VSTogVGhlbWUubWl4aW5zLmd1dHRlcnMoKSBpcyBkZXByZWNhdGVkLicsXG4gICAgICAvLyAgICAgICAgICAgJ1lvdSBjYW4gdXNlIHRoZSBzb3VyY2Ugb2YgdGhlIG1peGluIGRpcmVjdGx5OicsXG4gICAgICAvLyAgICAgICAgICAgYFxuICAgICAgLy8gcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAvLyBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICAvLyBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAvLyAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDMpLFxuICAgICAgLy8gICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyB9LFxuICAgICAgLy8gYCxcbiAgICAgIC8vICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgIC8vICAgICAgICk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMyksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygzKVxuICAgICAgfSwgc3R5bGVzW2JyZWFrcG9pbnRzLnVwKCdzbScpXSkpKTtcbiAgICB9LFxuICAgIHRvb2xiYXI6IChfdG9vbGJhciA9IHtcbiAgICAgIG1pbkhlaWdodDogNTZcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1pbkhlaWdodDogNjRcbiAgICB9KSwgX3Rvb2xiYXIpXG4gIH0sIG1peGlucyk7XG59IiwidmFyIGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJ2YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJ2YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG5leHBvcnQgZGVmYXVsdCBpbmRpZ287IiwidmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwidmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsInZhciBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJ2YXIgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJ2YXIgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xuXG4vKipcbiAqIFJldHVybnMgYSBudW1iZXIgd2hvc2UgdmFsdWUgaXMgbGltaXRlZCB0byB0aGUgZ2l2ZW4gcmFuZ2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBjbGFtcGVkXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIFRoZSBsb3dlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4IFRoZSB1cHBlciBib3VuZGFyeSBvZiB0aGUgb3V0cHV0IHJhbmdlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIG51bWJlciBpbiB0aGUgcmFuZ2UgW21pbiwgbWF4XVxuICovXG5mdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xuICB2YXIgbWluID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgbWF4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCBcIi5jb25jYXQodmFsdWUsIFwiIGlzIG91dCBvZiByYW5nZSBbXCIpLmNvbmNhdChtaW4sIFwiLCBcIikuY29uY2F0KG1heCwgXCJdLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiXCIuY29uY2F0KGNvbG9ycy5sZW5ndGggPT09IDQgPyAnYScgOiAnJywgXCIoXCIpLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuLCBpbmRleCkge1xuICAgIHJldHVybiBpbmRleCA8IDMgPyBwYXJzZUludChuLCAxNikgOiBNYXRoLnJvdW5kKHBhcnNlSW50KG4sIDE2KSAvIDI1NSAqIDEwMDApIC8gMTAwMDtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICB2YXIgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHJldHVybiBcIiNcIi5jb25jYXQodmFsdWVzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBpbnRUb0hleChuKTtcbiAgfSkuam9pbignJykpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciBfY29sb3IgPSBjb2xvcixcbiAgICAgIHZhbHVlcyA9IF9jb2xvci52YWx1ZXM7XG4gIHZhciBoID0gdmFsdWVzWzBdO1xuICB2YXIgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgdmFyIGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIHZhciBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIGYobikge1xuICAgIHZhciBrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAobiArIGggLyAzMCkgJSAxMjtcbiAgICByZXR1cm4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIH07XG5cbiAgdmFyIHR5cGUgPSAncmdiJztcbiAgdmFyIHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBVbnN1cHBvcnRlZCBgXCIuY29uY2F0KGNvbG9yLCBcImAgY29sb3IuXFxuV2Ugc3VwcG9ydCB0aGUgZm9sbG93aW5nIGZvcm1hdHM6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCkuXCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgzLCBjb2xvcikpO1xuICB9XG5cbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHZhbHVlc1xuICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29sb3IgLSBEZWNvbXBvc2VkIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IudHlwZSAtIE9uZSBvZjogJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ1xuICogQHBhcmFtIHthcnJheX0gY29sb3IudmFsdWVzIC0gW24sbixuXSBvciBbbixuLG4sbl1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZ1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICB2YXIgdHlwZSA9IGNvbG9yLnR5cGU7XG4gIHZhciB2YWx1ZXMgPSBjb2xvci52YWx1ZXM7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgIHJldHVybiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG47XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMV0sIFwiJVwiKTtcbiAgICB2YWx1ZXNbMl0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMl0sIFwiJVwiKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdCh0eXBlLCBcIihcIikuY29uY2F0KHZhbHVlcy5qb2luKCcsICcpLCBcIilcIik7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbnRyYXN0UmF0aW8oZm9yZWdyb3VuZCwgYmFja2dyb3VuZCkge1xuICB2YXIgbHVtQSA9IGdldEx1bWluYW5jZShmb3JlZ3JvdW5kKTtcbiAgdmFyIGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuLyoqXG4gKiBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiBhbnkgcG9pbnQgaW4gYSBjb2xvciBzcGFjZSxcbiAqIG5vcm1hbGl6ZWQgdG8gMCBmb3IgZGFya2VzdCBibGFjayBhbmQgMSBmb3IgbGlnaHRlc3Qgd2hpdGUuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgdmFyIHJnYiA9IGNvbG9yLnR5cGUgPT09ICdoc2wnID8gZGVjb21wb3NlQ29sb3IoaHNsVG9SZ2IoY29sb3IpKS52YWx1ZXMgOiBjb2xvci52YWx1ZXM7XG4gIHJnYiA9IHJnYi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcblxuICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9KTsgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcblxuICByZXR1cm4gTnVtYmVyKCgwLjIxMjYgKiByZ2JbMF0gKyAwLjcxNTIgKiByZ2JbMV0gKyAwLjA3MjIgKiByZ2JbMl0pLnRvRml4ZWQoMykpO1xufVxuLyoqXG4gKiBEYXJrZW4gb3IgbGlnaHRlbiBhIGNvbG9yLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yKSB7XG4gIHZhciBjb2VmZmljaWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC4xNTtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbi8qKlxuICogU2V0IHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmFkZShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG5cbiAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgaW5kaWdvIGZyb20gJy4uL2NvbG9ycy9pbmRpZ28nO1xuaW1wb3J0IHBpbmsgZnJvbSAnLi4vY29sb3JzL3BpbmsnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJy4vY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBncmV5WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgdmFyIGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGdyZXlbODAwXSxcbiAgICBkZWZhdWx0OiAnIzMwMzAzMCdcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgdmFyIHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgdmFyIHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG5cbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgdmFyIF9wYWxldHRlJHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnksXG4gICAgICBwcmltYXJ5ID0gX3BhbGV0dGUkcHJpbWFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBpbmRpZ29bMzAwXSxcbiAgICBtYWluOiBpbmRpZ29bNTAwXSxcbiAgICBkYXJrOiBpbmRpZ29bNzAwXVxuICB9IDogX3BhbGV0dGUkcHJpbWFyeSxcbiAgICAgIF9wYWxldHRlJHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5LFxuICAgICAgc2Vjb25kYXJ5ID0gX3BhbGV0dGUkc2Vjb25kYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IHBpbmsuQTIwMCxcbiAgICBtYWluOiBwaW5rLkE0MDAsXG4gICAgZGFyazogcGluay5BNzAwXG4gIH0gOiBfcGFsZXR0ZSRzZWNvbmRhcnksXG4gICAgICBfcGFsZXR0ZSRlcnJvciA9IHBhbGV0dGUuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wYWxldHRlJGVycm9yID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgIG1haW46IHJlZFs1MDBdLFxuICAgIGRhcms6IHJlZFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRlcnJvcixcbiAgICAgIF9wYWxldHRlJHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcsXG4gICAgICB3YXJuaW5nID0gX3BhbGV0dGUkd2FybmluZyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICBtYWluOiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICB9IDogX3BhbGV0dGUkd2FybmluZyxcbiAgICAgIF9wYWxldHRlJGluZm8gPSBwYWxldHRlLmluZm8sXG4gICAgICBpbmZvID0gX3BhbGV0dGUkaW5mbyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBibHVlWzMwMF0sXG4gICAgbWFpbjogYmx1ZVs1MDBdLFxuICAgIGRhcms6IGJsdWVbNzAwXVxuICB9IDogX3BhbGV0dGUkaW5mbyxcbiAgICAgIF9wYWxldHRlJHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MsXG4gICAgICBzdWNjZXNzID0gX3BhbGV0dGUkc3VjY2VzcyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgIG1haW46IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bNzAwXVxuICB9IDogX3BhbGV0dGUkc3VjY2VzcyxcbiAgICAgIF9wYWxldHRlJHR5cGUgPSBwYWxldHRlLnR5cGUsXG4gICAgICB0eXBlID0gX3BhbGV0dGUkdHlwZSA9PT0gdm9pZCAwID8gJ2xpZ2h0JyA6IF9wYWxldHRlJHR5cGUsXG4gICAgICBfcGFsZXR0ZSRjb250cmFzdFRocmUgPSBwYWxldHRlLmNvbnRyYXN0VGhyZXNob2xkLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSBfcGFsZXR0ZSRjb250cmFzdFRocmUgPT09IHZvaWQgMCA/IDMgOiBfcGFsZXR0ZSRjb250cmFzdFRocmUsXG4gICAgICBfcGFsZXR0ZSR0b25hbE9mZnNldCA9IHBhbGV0dGUudG9uYWxPZmZzZXQsXG4gICAgICB0b25hbE9mZnNldCA9IF9wYWxldHRlJHRvbmFsT2Zmc2V0ID09PSB2b2lkIDAgPyAwLjIgOiBfcGFsZXR0ZSR0b25hbE9mZnNldCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHBhbGV0dGUsIFtcInByaW1hcnlcIiwgXCJzZWNvbmRhcnlcIiwgXCJlcnJvclwiLCBcIndhcm5pbmdcIiwgXCJpbmZvXCIsIFwic3VjY2Vzc1wiLCBcInR5cGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdKTsgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuXG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mIFwiLmNvbmNhdChjb250cmFzdCwgXCI6MSBmb3IgXCIpLmNvbmNhdChjb250cmFzdFRleHQsIFwiIG9uIFwiKS5jb25jYXQoYmFja2dyb3VuZCksICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cblxuICB2YXIgYXVnbWVudENvbG9yID0gZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yLm1haW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg0LCBtYWluU2hhZGUpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5gY29sb3IubWFpbmAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgYFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSwgXCJgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxcblxcbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xcblxcbmltcG9ydCB7XFx4QTBncmVlbiB9IGZyb20gXFxcIkBtYXRlcmlhbC11aS9jb3JlL2NvbG9yc1xcXCI7XFxuXFxuY29uc3QgdGhlbWUxID0gY3JlYXRlTXVpVGhlbWUoeyBwYWxldHRlOiB7XFxuICBwcmltYXJ5OiBncmVlbixcXG59IH0pO1xcblxcbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZU11aVRoZW1lKHsgcGFsZXR0ZToge1xcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXFxufSB9KTtcIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDUsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuXG4gIHZhciB0eXBlcyA9IHtcbiAgICBkYXJrOiBkYXJrLFxuICAgIGxpZ2h0OiBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF0eXBlc1t0eXBlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgcGFsZXR0ZSB0eXBlIGBcIi5jb25jYXQodHlwZSwgXCJgIGlzIG5vdCBzdXBwb3J0ZWQuXCIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHByaW1hcnkpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHNlY29uZGFyeSwgJ0E0MDAnLCAnQTIwMCcsICdBNzAwJyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKGVycm9yKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Iod2FybmluZyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcihpbmZvKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioc3VjY2VzcyksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXk6IGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkOiBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dDogZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yOiBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0OiB0b25hbE9mZnNldFxuICB9LCB0eXBlc1t0eXBlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtMiA9IF9yZWYucHhUb1JlbSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGh0bWxGb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG5cbiAgdmFyIHB4VG9SZW0gPSBweFRvUmVtMiB8fCBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgICAgbGluZUhlaWdodDogbGluZUhlaWdodFxuICAgIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgICAgbGV0dGVyU3BhY2luZzogXCJcIi5jb25jYXQocm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpLCBcImVtXCIpXG4gICAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgfTtcblxuICB2YXIgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemU6IGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtOiBweFRvUmVtLFxuICAgIHJvdW5kOiByb3VuZCxcbiAgICAvLyBUT0RPIHY1OiByZW1vdmVcbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQ6IGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcjogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bTogZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZDogZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJ2YXIgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xudmFyIHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG52YXIgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coKSB7XG4gIHJldHVybiBbXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlVbWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA1ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzVdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA2ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzZdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA3ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzddLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA4ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzhdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA5ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzldLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDExID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzExXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHksIFwiKVwiKV0uam9pbignLCcpO1xufSAvLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcblxuXG52YXIgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAyLCAxLCAtMSwgMCwgMSwgMSwgMCwgMCwgMSwgMywgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAxLCAtMiwgMCwgMiwgMiwgMCwgMCwgMSwgNSwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAzLCAtMiwgMCwgMywgNCwgMCwgMCwgMSwgOCwgMCksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCJ2YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsImltcG9ydCBhcnJheVdpdGhIb2xlcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXRcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXlcIjtcbmltcG9ydCBub25JdGVyYWJsZVJlc3QgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJzsgLy8gVGhlIGJyZWFrcG9pbnQgKipzdGFydCoqIGF0IHRoaXMgdmFsdWUuXG4vLyBGb3IgaW5zdGFuY2Ugd2l0aCB0aGUgZmlyc3QgYnJlYWtwb2ludCB4czogW3hzLCBzbVsuXG5cbnZhciB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICBzbTogNjAwLFxuICBtZDogOTYwLFxuICBsZzogMTI4MCxcbiAgeGw6IDE5MjBcbn07XG52YXIgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDogZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXldLCBcInB4KVwiKTtcbiAgfVxufTtcbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXByb3BzLnRoZW1lKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogWW91IGFyZSBjYWxsaW5nIGEgc3R5bGUgZnVuY3Rpb24gd2l0aG91dCBhIHRoZW1lIHZhbHVlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICB2YXIgdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICByZXR1cm4gcHJvcFZhbHVlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBpdGVtLCBpbmRleCkge1xuICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAodGhlbWVCcmVha3BvaW50cy5rZXlzW2luZGV4XSldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVtpbmRleF0pO1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cblxuICBpZiAoX3R5cGVvZihwcm9wVmFsdWUpID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBfdGhlbWVCcmVha3BvaW50cyA9IHByb3BzLnRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBicmVha3BvaW50KSB7XG4gICAgICBhY2NbX3RoZW1lQnJlYWtwb2ludHMudXAoYnJlYWtwb2ludCldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHZhciBvdXRwdXQgPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gYnJlYWtwb2ludHMoc3R5bGVGdW5jdGlvbikge1xuICB2YXIgbmV3U3R5bGVGdW5jdGlvbiA9IGZ1bmN0aW9uIG5ld1N0eWxlRnVuY3Rpb24ocHJvcHMpIHtcbiAgICB2YXIgYmFzZSA9IHN0eWxlRnVuY3Rpb24ocHJvcHMpO1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHZhciBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWU6IHByb3BzLnRoZW1lXG4gICAgICAgIH0sIHByb3BzW2tleV0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIG5ld1N0eWxlRnVuY3Rpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IF9leHRlbmRzKHt9LCBzdHlsZUZ1bmN0aW9uLnByb3BUeXBlcywge1xuICAgIHhzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNtOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1kOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxnOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHhsOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pIDoge307XG4gIG5ld1N0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzKSk7XG4gIHJldHVybiBuZXdTdHlsZUZ1bmN0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBicmVha3BvaW50czsiLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuXG5mdW5jdGlvbiBtZXJnZShhY2MsIGl0ZW0pIHtcbiAgaWYgKCFpdGVtKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfVxuXG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTsiLCJpbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZSc7XG52YXIgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbnZhciBkaXJlY3Rpb25zID0ge1xuICB0OiAnVG9wJyxcbiAgcjogJ1JpZ2h0JyxcbiAgYjogJ0JvdHRvbScsXG4gIGw6ICdMZWZ0JyxcbiAgeDogWydMZWZ0JywgJ1JpZ2h0J10sXG4gIHk6IFsnVG9wJywgJ0JvdHRvbSddXG59O1xudmFyIGFsaWFzZXMgPSB7XG4gIG1hcmdpblg6ICdteCcsXG4gIG1hcmdpblk6ICdteScsXG4gIHBhZGRpbmdYOiAncHgnLFxuICBwYWRkaW5nWTogJ3B5J1xufTsgLy8gbWVtb2l6ZSgpIGltcGFjdDpcbi8vIEZyb20gMzAwLDAwMCBvcHMvc2VjXG4vLyBUbyAzNTAsMDAwIG9wcy9zZWNcblxudmFyIGdldENzc1Byb3BlcnRpZXMgPSBtZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIC8vIEl0J3Mgbm90IGEgc2hvcnRoYW5kIG5vdGF0aW9uLlxuICBpZiAocHJvcC5sZW5ndGggPiAyKSB7XG4gICAgaWYgKGFsaWFzZXNbcHJvcF0pIHtcbiAgICAgIHByb3AgPSBhbGlhc2VzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvcCRzcGxpdCA9IHByb3Auc3BsaXQoJycpLFxuICAgICAgX3Byb3Akc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3Byb3Akc3BsaXQsIDIpLFxuICAgICAgYSA9IF9wcm9wJHNwbGl0MlswXSxcbiAgICAgIGIgPSBfcHJvcCRzcGxpdDJbMV07XG5cbiAgdmFyIHByb3BlcnR5ID0gcHJvcGVydGllc1thXTtcbiAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGZ1bmN0aW9uIChkaXIpIHtcbiAgICByZXR1cm4gcHJvcGVydHkgKyBkaXI7XG4gIH0pIDogW3Byb3BlcnR5ICsgZGlyZWN0aW9uXTtcbn0pO1xudmFyIHNwYWNpbmdLZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJ107XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHZhciB0aGVtZVNwYWNpbmcgPSB0aGVtZS5zcGFjaW5nIHx8IDg7XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWJzICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgc3BhY2luZyBhcmd1bWVudCB0byBiZSBhIG51bWJlciwgZ290IFwiLmNvbmNhdChhYnMsIFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZyAqIGFicztcbiAgICB9O1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWJzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoYWJzID4gdGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgKFwiLmNvbmNhdChhYnMsIFwiKSBvdmVyZmxvd3MuXCIpLCBcIlRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTogXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyksIFwiLlwiKSwgXCJcIi5jb25jYXQoYWJzLCBcIiA+IFwiKS5jb25jYXQodGhlbWVTcGFjaW5nLmxlbmd0aCAtIDEsIFwiLCB5b3UgbmVlZCB0byBhZGQgdGhlIG1pc3NpbmcgdmFsdWVzLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0aGVtZVNwYWNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGhlbWVTcGFjaW5nO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgYHRoZW1lLnNwYWNpbmdgIHZhbHVlIChcIi5jb25jYXQodGhlbWVTcGFjaW5nLCBcIikgaXMgaW52YWxpZC5cIiksICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cblxuICB2YXIgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgdmFyIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtZXIoYWJzKTtcblxuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIHRyYW5zZm9ybWVkID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiAtdHJhbnNmb3JtZWQ7XG4gIH1cblxuICByZXR1cm4gXCItXCIuY29uY2F0KHRyYW5zZm9ybWVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcFZhbHVlKSB7XG4gICAgcmV0dXJuIGNzc1Byb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNzc1Byb3BlcnR5KSB7XG4gICAgICBhY2NbY3NzUHJvcGVydHldID0gZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgdmFyIHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAvLyBVc2luZyBhIGhhc2ggY29tcHV0YXRpb24gb3ZlciBhbiBhcnJheSBpdGVyYXRpb24gY291bGQgYmUgZmFzdGVyLCBidXQgd2l0aCBvbmx5IDI4IGl0ZW1zLFxuICAgIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gICAgaWYgKHNwYWNpbmdLZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gICAgdmFyIHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9KS5yZWR1Y2UobWVyZ2UsIHt9KTtcbn1cblxuc3BhY2luZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gc3BhY2luZ0tleXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xuc3BhY2luZy5maWx0ZXJQcm9wcyA9IHNwYWNpbmdLZXlzO1xuZXhwb3J0IGRlZmF1bHQgc3BhY2luZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufSIsImltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZyB9IGZyb20gJ0BtYXRlcmlhbC11aS9zeXN0ZW0nO1xudmFyIHdhcm5PbmNlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZygpIHtcbiAgdmFyIHNwYWNpbmdJbnB1dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogODtcblxuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH0gLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCBhcHBsaWVkLCB3aGljaCBhbGlnbnMgYm90aCBzcGFjaW5nIGFuZCB0aGUgb3ZlcmFsbCBsYXlvdXQuXG4gIC8vIFNtYWxsZXIgY29tcG9uZW50cywgc3VjaCBhcyBpY29ucyBhbmQgdHlwZSwgY2FuIGFsaWduIHRvIGEgNGRwIGdyaWQuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3VzYWdlXG5cblxuICB2YXIgdHJhbnNmb3JtID0gY3JlYXRlVW5hcnlTcGFjaW5nKHtcbiAgICBzcGFjaW5nOiBzcGFjaW5nSW5wdXRcbiAgfSk7XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJncy5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290IFwiLmNvbmNhdChhcmdzLmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSgxKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oYXJnc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3MubWFwKGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG91dHB1dCwgXCJweFwiKSA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07IC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRvIHJlbW92ZSBpbiB2NS5cblxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzcGFjaW5nLCAndW5pdCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghd2Fybk9uY2UgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogdGhlbWUuc3BhY2luZy51bml0IHVzYWdlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJywgJ0l0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4nLCAnWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC4nLCAnJywgJ1lvdSBjYW4gdXNlIHRoZSBgaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWF0ZXJpYWwtdWktY29kZW1vZC9SRUFETUUubWQjdGhlbWUtc3BhY2luZy1hcGlgIG1pZ3JhdGlvbiBoZWxwZXIgdG8gbWFrZSB0aGUgcHJvY2VzcyBzbW9vdGhlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gICAgfVxuICB9KTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5leHBvcnQgdmFyIGVhc2luZyA9IHtcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBjb21tb24gZWFzaW5nIGN1cnZlLlxuICBlYXNlSW5PdXQ6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBlbnRlciB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkgZnJvbSBvZmYtc2NyZWVuIGFuZFxuICAvLyBzbG93bHkgZGVjZWxlcmF0ZSB0byBhIHJlc3RpbmcgcG9pbnQuXG4gIGVhc2VPdXQ6ICdjdWJpYy1iZXppZXIoMC4wLCAwLCAwLjIsIDEpJyxcbiAgLy8gT2JqZWN0cyBsZWF2ZSB0aGUgc2NyZWVuIGF0IGZ1bGwgdmVsb2NpdHkuIFRoZXkgZG8gbm90IGRlY2VsZXJhdGUgd2hlbiBvZmYtc2NyZWVuLlxuICBlYXNlSW46ICdjdWJpYy1iZXppZXIoMC40LCAwLCAxLCAxKScsXG4gIC8vIFRoZSBzaGFycCBjdXJ2ZSBpcyB1c2VkIGJ5IG9iamVjdHMgdGhhdCBtYXkgcmV0dXJuIHRvIHRoZSBzY3JlZW4gYXQgYW55IHRpbWUuXG4gIHNoYXJwOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSdcbn07IC8vIEZvbGxvdyBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbW90aW9uL2R1cmF0aW9uLWVhc2luZy5odG1sI2R1cmF0aW9uLWVhc2luZy1jb21tb24tZHVyYXRpb25zXG4vLyB0byBsZWFybiB3aGVuIHVzZSB3aGF0IHRpbWluZ1xuXG5leHBvcnQgdmFyIGR1cmF0aW9uID0ge1xuICBzaG9ydGVzdDogMTUwLFxuICBzaG9ydGVyOiAyMDAsXG4gIHNob3J0OiAyNTAsXG4gIC8vIG1vc3QgYmFzaWMgcmVjb21tZW5kZWQgdGltaW5nXG4gIHN0YW5kYXJkOiAzMDAsXG4gIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCBpbiBjb21wbGV4IGFuaW1hdGlvbnNcbiAgY29tcGxleDogMzc1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBlbnRlcmluZyBzY3JlZW5cbiAgZW50ZXJpbmdTY3JlZW46IDIyNSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgbGVhdmluZyBzY3JlZW5cbiAgbGVhdmluZ1NjcmVlbjogMTk1XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KE1hdGgucm91bmQobWlsbGlzZWNvbmRzKSwgXCJtc1wiKTtcbn1cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXl9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5wcm9wXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZHVyYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbS5lYXNpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kZWxheVxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBlYXNpbmc6IGVhc2luZyxcbiAgZHVyYXRpb246IGR1cmF0aW9uLFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFsnYWxsJ107XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdmFyIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25PcHRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfb3B0aW9ucyRkdXJhdGlvbixcbiAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGVhc2luZ09wdGlvbiA9IF9vcHRpb25zJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzaW5nLmVhc2VJbk91dCA6IF9vcHRpb25zJGVhc2luZyxcbiAgICAgICAgX29wdGlvbnMkZGVsYXkgPSBvcHRpb25zLmRlbGF5LFxuICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgfTtcblxuICAgICAgdmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIWlzU3RyaW5nKHByb3BzKSAmJiAhQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogQXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTnVtYmVyKGRlbGF5KSAmJiAhaXNTdHJpbmcoZGVsYXkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl0uXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoZnVuY3Rpb24gKGFuaW1hdGVkUHJvcCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFuaW1hdGVkUHJvcCwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbiksIFwiIFwiKS5jb25jYXQoZWFzaW5nT3B0aW9uLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KSk7XG4gICAgfSkuam9pbignLCcpO1xuICB9LFxuICBnZXRBdXRvSGVpZ2h0RHVyYXRpb246IGZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIE1hdGgucG93KGNvbnN0YW50LCAwLjI1KSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG4gIH1cbn07IiwiLy8gV2UgbmVlZCB0byBjZW50cmFsaXplIHRoZSB6SW5kZXggZGVmaW5pdGlvbnMgYXMgdGhleSB3b3JrXG4vLyBsaWtlIGdsb2JhbCB2YWx1ZXMgaW4gdGhlIGJyb3dzZXIuXG52YXIgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBzcGVlZERpYWw6IDEwNTAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyOiAxMjAwLFxuICBtb2RhbDogMTMwMCxcbiAgc25hY2tiYXI6IDE0MDAsXG4gIHRvb2x0aXA6IDE1MDBcbn07XG5leHBvcnQgZGVmYXVsdCB6SW5kZXg7IiwiaW1wb3J0IGNyZWF0ZU11aVRoZW1lIGZyb20gJy4vY3JlYXRlTXVpVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZU11aVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNyZWF0ZUJyZWFrcG9pbnRzIGZyb20gJy4vY3JlYXRlQnJlYWtwb2ludHMnO1xuaW1wb3J0IGNyZWF0ZU1peGlucyBmcm9tICcuL2NyZWF0ZU1peGlucyc7XG5pbXBvcnQgY3JlYXRlUGFsZXR0ZSBmcm9tICcuL2NyZWF0ZVBhbGV0dGUnO1xuaW1wb3J0IGNyZWF0ZVR5cG9ncmFwaHkgZnJvbSAnLi9jcmVhdGVUeXBvZ3JhcGh5JztcbmltcG9ydCBzaGFkb3dzIGZyb20gJy4vc2hhZG93cyc7XG5pbXBvcnQgc2hhcGUgZnJvbSAnLi9zaGFwZSc7XG5pbXBvcnQgY3JlYXRlU3BhY2luZyBmcm9tICcuL2NyZWF0ZVNwYWNpbmcnO1xuaW1wb3J0IHRyYW5zaXRpb25zIGZyb20gJy4vdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuL3pJbmRleCc7XG5cbmZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIF9vcHRpb25zJGJyZWFrcG9pbnRzID0gb3B0aW9ucy5icmVha3BvaW50cyxcbiAgICAgIGJyZWFrcG9pbnRzSW5wdXQgPSBfb3B0aW9ucyRicmVha3BvaW50cyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRicmVha3BvaW50cyxcbiAgICAgIF9vcHRpb25zJG1peGlucyA9IG9wdGlvbnMubWl4aW5zLFxuICAgICAgbWl4aW5zSW5wdXQgPSBfb3B0aW9ucyRtaXhpbnMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkbWl4aW5zLFxuICAgICAgX29wdGlvbnMkcGFsZXR0ZSA9IG9wdGlvbnMucGFsZXR0ZSxcbiAgICAgIHBhbGV0dGVJbnB1dCA9IF9vcHRpb25zJHBhbGV0dGUgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkcGFsZXR0ZSxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG5cbiAgdmFyIHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICB2YXIgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgdmFyIG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcbiAgICBtaXhpbnM6IGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBQcm92aWRlIGRlZmF1bHQgcHJvcHNcbiAgICBzaGFkb3dzOiBzaGFkb3dzLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICBzcGFjaW5nOiBzcGFjaW5nLFxuICAgIHNoYXBlOiBzaGFwZSxcbiAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSwgb3RoZXIpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYXJndW1lbnQpIHtcbiAgICByZXR1cm4gZGVlcG1lcmdlKGFjYywgYXJndW1lbnQpO1xuICB9LCBtdWlUaGVtZSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddO1xuXG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uobm9kZSwgcGFyZW50S2V5KSB7XG4gICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gICAgICB2YXIga2V5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuXG4gICAgICBmb3IgKGtleSBpbiBub2RlKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5vZGVba2V5XTtcblxuICAgICAgICBpZiAoZGVwdGggPT09IDEpIHtcbiAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoJ011aScpID09PSAwICYmIGNoaWxkKSB7XG4gICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCwga2V5LCBkZXB0aCArIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYgT2JqZWN0LmtleXMoY2hpbGQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGBcIi5jb25jYXQocGFyZW50S2V5LCBcImAgY29tcG9uZW50IGluY3JlYXNlcyBcIikgKyBcInRoZSBDU1Mgc3BlY2lmaWNpdHkgb2YgdGhlIGBcIi5jb25jYXQoa2V5LCBcImAgaW50ZXJuYWwgc3RhdGUuXCIpLCAnWW91IGNhbiBub3Qgb3ZlcnJpZGUgaXQgbGlrZSB0aGlzOiAnLCBKU09OLnN0cmluZ2lmeShub2RlLCBudWxsLCAyKSwgJycsICdJbnN0ZWFkLCB5b3UgbmVlZCB0byB1c2UgdGhlICRydWxlTmFtZSBzeW50YXg6JywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiBfZGVmaW5lUHJvcGVydHkoe30sIFwiJiRcIi5jb25jYXQoa2V5KSwgY2hpbGQpXG4gICAgICAgICAgICB9LCBudWxsLCAyKSwgJycsICdodHRwczovL21hdGVyaWFsLXVpLmNvbS9yL3BzZXVkby1jbGFzc2VzLWd1aWRlJ10uam9pbignXFxuJykpO1xuICAgICAgICAgIH0gLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG5cblxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRyYXZlcnNlKG11aVRoZW1lLm92ZXJyaWRlcyk7XG4gIH1cblxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU11aVRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgd2l0aFN0eWxlcyBhcyB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiB3aXRoU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgb3B0aW9ucykge1xuICByZXR1cm4gd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0KHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZGVmYXVsdFRoZW1lXCIsIFwid2l0aFRoZW1lXCIsIFwibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIFdpdGhTdHlsZXMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTsgLy8gVGhlIHdyYXBwZXIgcmVjZWl2ZXMgb25seSB1c2VyIHN1cHBsaWVkIHByb3BzLCB3aGljaCBjb3VsZCBiZSBhIHN1YnNldCBvZlxuICAgICAgLy8gdGhlIGFjdHVhbCBwcm9wcyBDb21wb25lbnQgbWlnaHQgcmVjZWl2ZSBkdWUgdG8gbWVyZ2luZyB3aXRoIGRlZmF1bHRQcm9wcy5cbiAgICAgIC8vIFNvIGNvcHlpbmcgaXQgaGVyZSB3b3VsZCBnaXZlIHVzIHRoZSBzYW1lIHJlc3VsdCBpbiB0aGUgd3JhcHBlciBhcyB3ZWxsLlxuXG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKF9leHRlbmRzKHt9LCBDb21wb25lbnQuZGVmYXVsdFByb3BzLCBwcm9wcykpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL3Y0LjEuNS9zcmMvZm9jdXMtdmlzaWJsZS5qc1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbnZhciBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbnZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCA9IG51bGw7XG52YXIgaW5wdXRUeXBlc1doaXRlbGlzdCA9IHtcbiAgdGV4dDogdHJ1ZSxcbiAgc2VhcmNoOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgZW1haWw6IHRydWUsXG4gIHBhc3N3b3JkOiB0cnVlLFxuICBudW1iZXI6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIG1vbnRoOiB0cnVlLFxuICB3ZWVrOiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICBkYXRldGltZTogdHJ1ZSxcbiAgJ2RhdGV0aW1lLWxvY2FsJzogdHJ1ZVxufTtcbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkobm9kZSkge1xuICB2YXIgdHlwZSA9IG5vZGUudHlwZSxcbiAgICAgIHRhZ05hbWUgPSBub2RlLnRhZ05hbWU7XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdJTlBVVCcgJiYgaW5wdXRUeXBlc1doaXRlbGlzdFt0eXBlXSAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRhZ05hbWUgPT09ICdURVhUQVJFQScgJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gIGlmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG4vKipcbiAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICogdGhlIG1vZGFsaXR5IGF3YXkgZnJvbSBrZXlib2FyZC5cbiAqIFRoaXMgYXZvaWRzIHRoZSBzaXR1YXRpb24gd2hlcmUgYSB1c2VyIHByZXNzZXMgYSBrZXkgb24gYW4gYWxyZWFkeSBmb2N1c2VkXG4gKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gKiBwb2ludGluZyBkZXZpY2UsIHdoaWxlIHdlIHN0aWxsIHRoaW5rIHdlJ3JlIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICovXG5cblxuZnVuY3Rpb24gaGFuZGxlUG9pbnRlckRvd24oKSB7XG4gIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSgpIHtcbiAgaWYgKHRoaXMudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgIC8vIElmIHRoZSB0YWIgYmVjb21lcyBhY3RpdmUgYWdhaW4sIHRoZSBicm93c2VyIHdpbGwgaGFuZGxlIGNhbGxpbmcgZm9jdXNcbiAgICAvLyBvbiB0aGUgZWxlbWVudCAoU2FmYXJpIGFjdHVhbGx5IGNhbGxzIGl0IHR3aWNlKS5cbiAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAvLyByZS1hcHBseSB0aGUgY2xhc3Mgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyBiYWNrIHRvIHRoZSB0YWIuXG4gICAgaWYgKGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5KSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRlYXJkb3duKGRvYykge1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc0ZvY3VzVmlzaWJsZShldmVudCkge1xuICB2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHRhcmdldC5tYXRjaGVzKCc6Zm9jdXMtdmlzaWJsZScpO1xuICB9IGNhdGNoIChlcnJvcikge30gLy8gYnJvd3NlcnMgbm90IGltcGxlbWVudGluZyA6Zm9jdXMtdmlzaWJsZSB3aWxsIHRocm93IGEgU3ludGF4RXJyb3JcbiAgLy8gd2UgdXNlIG91ciBvd24gaGV1cmlzdGljIGZvciB0aG9zZSBicm93c2Vyc1xuICAvLyByZXRocm93IG1pZ2h0IGJlIGJldHRlciBpZiBpdCdzIG5vdCB0aGUgZXhwZWN0ZWQgZXJyb3IgYnV0IGRvIHdlIHJlYWxseVxuICAvLyB3YW50IHRvIGNyYXNoIGlmIGZvY3VzLXZpc2libGUgbWFsZnVuY3Rpb25lZD9cbiAgLy8gbm8gbmVlZCBmb3IgdmFsaWRGb2N1c1RhcmdldCBjaGVjay4gdGhlIHVzZXIgZG9lcyB0aGF0IGJ5IGF0dGFjaGluZyBpdCB0b1xuICAvLyBmb2N1c2FibGUgZXZlbnRzIG9ubHlcblxuXG4gIHJldHVybiBoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KHRhcmdldCk7XG59XG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgaWYgYSBibHVyIGV2ZW50IGlzIGZpcmVkIG9uIGEgZm9jdXMtdmlzaWJsZSBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVCbHVyVmlzaWJsZSgpIHtcbiAgLy8gVG8gZGV0ZWN0IGEgdGFiL3dpbmRvdyBzd2l0Y2gsIHdlIGxvb2sgZm9yIGEgYmx1ciBldmVudCBmb2xsb3dlZFxuICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gIC8vIElmIHdlIGRvbid0IHNlZSBhIHZpc2liaWxpdHkgY2hhbmdlIHdpdGhpbiAxMDBtcywgaXQncyBwcm9iYWJseSBhXG4gIC8vIHJlZ3VsYXIgZm9jdXMgY2hhbmdlLlxuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0KTtcbiAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gIH0sIDEwMCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICB2YXIgcmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG5cbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKGlzRm9jdXNWaXNpYmxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGU6IGlzRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1clZpc2libGU6IGhhbmRsZUJsdXJWaXNpYmxlLFxuICAgIHJlZjogcmVmXG4gIH07XG59IiwiLy8gVE9ETyB2NTogY29uc2lkZXIgdG8gbWFrZSBpdCBwcml2YXRlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ya1JlZihyZWZBLCByZWZCKSB7XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIHRoZSByZWYgcHJvcHMgY2hhbmdlIGFuZCBhcmUgZGVmaW5lZC5cbiAgICogVGhpcyBtZWFucyByZWFjdCB3aWxsIGNhbGwgdGhlIG9sZCBmb3JrUmVmIHdpdGggYG51bGxgIGFuZCB0aGUgbmV3IGZvcmtSZWZcbiAgICogd2l0aCB0aGUgcmVmLiBDbGVhbnVwIG5hdHVyYWxseSBlbWVyZ2VzIGZyb20gdGhpcyBiZWhhdmlvclxuICAgKi9cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZWZBID09IG51bGwgJiYgcmVmQiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlZlZhbHVlKSB7XG4gICAgICBzZXRSZWYocmVmQSwgcmVmVmFsdWUpO1xuICAgICAgc2V0UmVmKHJlZkIsIHJlZlZhbHVlKTtcbiAgICB9O1xuICB9LCBbcmVmQSwgcmVmQl0pO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTJcImAuICovXG4gICAgYm9keTI6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTFcImAuICovXG4gICAgYm9keTE6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnV0dG9uXCJgLiAqL1xuICAgIGJ1dHRvbjogdGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDFcImAuICovXG4gICAgaDE6IHRoZW1lLnR5cG9ncmFwaHkuaDEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDJcImAuICovXG4gICAgaDI6IHRoZW1lLnR5cG9ncmFwaHkuaDIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDNcImAuICovXG4gICAgaDM6IHRoZW1lLnR5cG9ncmFwaHkuaDMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDRcImAuICovXG4gICAgaDQ6IHRoZW1lLnR5cG9ncmFwaHkuaDQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDVcImAuICovXG4gICAgaDU6IHRoZW1lLnR5cG9ncmFwaHkuaDUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDZcImAuICovXG4gICAgaDY6IHRoZW1lLnR5cG9ncmFwaHkuaDYsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUxXCJgLiAqL1xuICAgIHN1YnRpdGxlMTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUyXCJgLiAqL1xuICAgIHN1YnRpdGxlMjogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3ZlcmxpbmVcImAuICovXG4gICAgb3ZlcmxpbmU6IHRoZW1lLnR5cG9ncmFwaHkub3ZlcmxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3JPbmx5XCJgLiBPbmx5IGFjY2Vzc2libGUgdG8gc2NyZWVuIHJlYWRlcnMuICovXG4gICAgc3JPbmx5OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG5vd3JhcD17dHJ1ZX1gLiAqL1xuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZ3V0dGVyQm90dG9tPXt0cnVlfWAuICovXG4gICAgZ3V0dGVyQm90dG9tOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhcmFncmFwaD17dHJ1ZX1gLiAqL1xuICAgIHBhcmFncmFwaDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJpbmxpbmVcImAuICovXG4gICAgZGlzcGxheUlubGluZToge1xuICAgICAgZGlzcGxheTogJ2lubGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImJsb2NrXCJgLiAqL1xuICAgIGRpc3BsYXlCbG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJ1xufTtcbnZhciBUeXBvZ3JhcGh5ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVHlwb2dyYXBoeShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ24gPSBwcm9wcy5hbGlnbixcbiAgICAgIGFsaWduID0gX3Byb3BzJGFsaWduID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkYWxpZ24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbml0aWFsJyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNwbGF5ID0gcHJvcHMuZGlzcGxheSxcbiAgICAgIGRpc3BsYXkgPSBfcHJvcHMkZGlzcGxheSA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGRpc3BsYXksXG4gICAgICBfcHJvcHMkZ3V0dGVyQm90dG9tID0gcHJvcHMuZ3V0dGVyQm90dG9tLFxuICAgICAgZ3V0dGVyQm90dG9tID0gX3Byb3BzJGd1dHRlckJvdHRvbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZ3V0dGVyQm90dG9tLFxuICAgICAgX3Byb3BzJG5vV3JhcCA9IHByb3BzLm5vV3JhcCxcbiAgICAgIG5vV3JhcCA9IF9wcm9wcyRub1dyYXAgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG5vV3JhcCxcbiAgICAgIF9wcm9wcyRwYXJhZ3JhcGggPSBwcm9wcy5wYXJhZ3JhcGgsXG4gICAgICBwYXJhZ3JhcGggPSBfcHJvcHMkcGFyYWdyYXBoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwYXJhZ3JhcGgsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdib2R5MScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIF9wcm9wcyR2YXJpYW50TWFwcGluZyA9IHByb3BzLnZhcmlhbnRNYXBwaW5nLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPT09IHZvaWQgMCA/IGRlZmF1bHRWYXJpYW50TWFwcGluZyA6IF9wcm9wcyR2YXJpYW50TWFwcGluZyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc3BsYXlcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ2YXJpYW50XCIsIFwidmFyaWFudE1hcHBpbmdcIl0pO1xuXG4gIHZhciBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgKHBhcmFncmFwaCA/ICdwJyA6IHZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdIHx8IGRlZmF1bHRWYXJpYW50TWFwcGluZ1t2YXJpYW50XSkgfHwgJ3NwYW4nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1t2YXJpYW50XSwgY29sb3IgIT09ICdpbml0aWFsJyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgbm9XcmFwICYmIGNsYXNzZXMubm9XcmFwLCBndXR0ZXJCb3R0b20gJiYgY2xhc3Nlcy5ndXR0ZXJCb3R0b20sIHBhcmFncmFwaCAmJiBjbGFzc2VzLnBhcmFncmFwaCwgYWxpZ24gIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiYWxpZ25cIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpXSwgZGlzcGxheSAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJkaXNwbGF5XCIuY29uY2F0KGNhcGl0YWxpemUoZGlzcGxheSkpXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndGV4dFByaW1hcnknLCAndGV4dFNlY29uZGFyeScsICdlcnJvciddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBPdmVycmlkZXMgdGhlIGJlaGF2aW9yIG9mIHRoZSBgdmFyaWFudE1hcHBpbmdgIHByb3AuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIGRpc3BsYXkgdHlwZVxuICAgKi9cbiAgZGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdibG9jaycsICdpbmxpbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIGd1dHRlckJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgcGFyYWdyYXBoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2NhcHRpb24nLCAnYnV0dG9uJywgJ292ZXJsaW5lJywgJ3NyT25seScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIHZhcmlhbnQgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBIVE1MIGVsZW1lbnQgdHlwZXMuXG4gICAqIEZvciBpbnN0YW5jZSwgc3VidGl0bGUxIHRvIGA8aDY+YC5cbiAgICogSWYgeW91IHdpc2ggdG8gY2hhbmdlIHRoYXQgbWFwcGluZywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcC5cbiAgICovXG4gIHZhcmlhbnRNYXBwaW5nOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVR5cG9ncmFwaHknXG59KShUeXBvZ3JhcGh5KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VJc0ZvY3VzVmlzaWJsZSBmcm9tICcuLi91dGlscy91c2VJc0ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJy4uL1R5cG9ncmFwaHknO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHVuZGVybGluZT1cIm5vbmVcImAuICovXG4gIHVuZGVybGluZU5vbmU6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdW5kZXJsaW5lPVwiaG92ZXJcImAuICovXG4gIHVuZGVybGluZUhvdmVyOiB7XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAnJjpob3Zlcic6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICAgIH1cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB1bmRlcmxpbmU9XCJhbHdheXNcImAuICovXG4gIHVuZGVybGluZUFsd2F5czoge1xuICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJ1xuICB9LFxuICAvLyBTYW1lIHJlc2V0IGFzIEJ1dHRvbkJhc2Uucm9vdFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbXBvbmVudD1cImJ1dHRvblwiYC4gKi9cbiAgYnV0dG9uOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBTYWZhcmlcbiAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gRmlyZWZveFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICcmOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cblxuICAgIH0sXG4gICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgb3V0bGluZTogJ2F1dG8nXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGxpbmsgaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgZm9jdXNWaXNpYmxlOiB7fVxufTtcbnZhciBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGluayhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdwcmltYXJ5JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYScgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBUeXBvZ3JhcGh5Q2xhc3NlcyA9IHByb3BzLlR5cG9ncmFwaHlDbGFzc2VzLFxuICAgICAgX3Byb3BzJHVuZGVybGluZSA9IHByb3BzLnVuZGVybGluZSxcbiAgICAgIHVuZGVybGluZSA9IF9wcm9wcyR1bmRlcmxpbmUgPT09IHZvaWQgMCA/ICdob3ZlcicgOiBfcHJvcHMkdW5kZXJsaW5lLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJvbkJsdXJcIiwgXCJvbkZvY3VzXCIsIFwiVHlwb2dyYXBoeUNsYXNzZXNcIiwgXCJ1bmRlcmxpbmVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgZm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0Rm9jdXNWaXNpYmxlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBoYW5kbGVyUmVmID0gdXNlRm9ya1JlZihyZWYsIGZvY3VzVmlzaWJsZVJlZik7XG5cbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgb25CbHVyVmlzaWJsZSgpO1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiBoYW5kbGVGb2N1cyhldmVudCkge1xuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUeXBvZ3JhcGh5LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcInVuZGVybGluZVwiLmNvbmNhdChjYXBpdGFsaXplKHVuZGVybGluZSkpXSwgY2xhc3NOYW1lLCBmb2N1c1Zpc2libGUgJiYgY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGNvbXBvbmVudCA9PT0gJ2J1dHRvbicgJiYgY2xhc3Nlcy5idXR0b24pLFxuICAgIGNsYXNzZXM6IFR5cG9ncmFwaHlDbGFzc2VzLFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgcmVmOiBoYW5kbGVyUmVmLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTGluay5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbGluay5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGxpbmsuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ3RleHRQcmltYXJ5JywgJ3RleHRTZWNvbmRhcnknLCAnZXJyb3InXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcCBhcHBsaWVkIHRvIHRoZSBbYFR5cG9ncmFwaHlgXSgvYXBpL3R5cG9ncmFwaHkvKSBlbGVtZW50LlxuICAgKi9cbiAgVHlwb2dyYXBoeUNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoZW4gdGhlIGxpbmsgc2hvdWxkIGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgdW5kZXJsaW5lOiBQcm9wVHlwZXMub25lT2YoWydub25lJywgJ2hvdmVyJywgJ2Fsd2F5cyddKSxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpbmsnXG59KShMaW5rKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgbWFrZVN0eWxlcyBmcm9tICcuLi9tYWtlU3R5bGVzJztcblxuZnVuY3Rpb24gb21pdChpbnB1dCwgZmllbGRzKSB7XG4gIHZhciBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoaW5wdXQpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAoZmllbGRzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICBvdXRwdXRbcHJvcF0gPSBpbnB1dFtwcm9wXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufSAvLyBzdHlsZWQtY29tcG9uZW50cydzIEFQSSByZW1vdmVzIHRoZSBtYXBwaW5nIGJldHdlZW4gY29tcG9uZW50cyBhbmQgc3R5bGVzLlxuLy8gVXNpbmcgY29tcG9uZW50cyBhcyBhIGxvdy1sZXZlbCBzdHlsaW5nIGNvbnN0cnVjdCBjYW4gYmUgc2ltcGxlci5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHlsZWQoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnRDcmVhdG9yID0gZnVuY3Rpb24gY29tcG9uZW50Q3JlYXRvcihzdHlsZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyBzdHlsZWQoQ29tcG9uZW50KShzdHlsZSkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBiZXR0ZXIgRFggb3V0c2lkZSBwcm9kdWN0aW9uLlxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzT3JDcmVhdG9yID0gdHlwZW9mIHN0eWxlID09PSAnZnVuY3Rpb24nID8gZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb290OiBmdW5jdGlvbiByb290KHByb3BzKSB7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlKF9leHRlbmRzKHtcbiAgICAgICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgICAgIH0sIHByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSA6IHtcbiAgICAgIHJvb3Q6IHN0eWxlXG4gICAgfTtcbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50LFxuICAgICAgbmFtZTogbmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWUsXG4gICAgICBjbGFzc05hbWVQcmVmaXg6IGNsYXNzTmFtZVByZWZpeFxuICAgIH0sIHN0eWxlc09wdGlvbnMpKTtcbiAgICB2YXIgZmlsdGVyUHJvcHM7XG4gICAgdmFyIHByb3BUeXBlcyA9IHt9O1xuXG4gICAgaWYgKHN0eWxlLmZpbHRlclByb3BzKSB7XG4gICAgICBmaWx0ZXJQcm9wcyA9IHN0eWxlLmZpbHRlclByb3BzO1xuICAgICAgZGVsZXRlIHN0eWxlLmZpbHRlclByb3BzO1xuICAgIH1cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzICovXG5cblxuICAgIGlmIChzdHlsZS5wcm9wVHlwZXMpIHtcbiAgICAgIHByb3BUeXBlcyA9IHN0eWxlLnByb3BUeXBlcztcbiAgICAgIGRlbGV0ZSBzdHlsZS5wcm9wVHlwZXM7XG4gICAgfVxuICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QvZm9yYmlkLWZvcmVpZ24tcHJvcC10eXBlcyAqL1xuXG5cbiAgICB2YXIgU3R5bGVkQ29tcG9uZW50ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU3R5bGVkQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY2xvbmUgPSBwcm9wcy5jbG9uZSxcbiAgICAgICAgICBDb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImNsb25lXCIsIFwiY29tcG9uZW50XCJdKTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMocHJvcHMpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciBzcHJlYWQgPSBvdGhlcjtcblxuICAgICAgaWYgKGZpbHRlclByb3BzKSB7XG4gICAgICAgIHNwcmVhZCA9IG9taXQoc3ByZWFkLCBmaWx0ZXJQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbG9uZSkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgICAgICAgIGNsYXNzTmFtZTogY2xzeChjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUsIGNsYXNzTmFtZSlcbiAgICAgICAgfSwgc3ByZWFkKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuKF9leHRlbmRzKHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICB9LCBzcHJlYWQpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIEZpbmFsQ29tcG9uZW50ID0gQ29tcG9uZW50UHJvcCB8fCBDb21wb25lbnQ7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRmluYWxDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICB9LCBzcHJlYWQpLCBjaGlsZHJlbik7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVkQ29tcG9uZW50LnByb3BUeXBlcyA9IF9leHRlbmRzKHtcbiAgICAgIC8qKlxuICAgICAgICogQSByZW5kZXIgZnVuY3Rpb24gb3Igbm9kZS5cbiAgICAgICAqL1xuICAgICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBpZ25vcmVcbiAgICAgICAqL1xuICAgICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gICAgICAvKipcbiAgICAgICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHJlY3ljbGUgaXQncyBjaGlsZHJlbiBIVE1MIGVsZW1lbnQuXG4gICAgICAgKiBJdCdzIHVzaW5nIGBSZWFjdC5jbG9uZUVsZW1lbnRgIGludGVybmFsbHkuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBwcm9wIHdpbGwgYmUgZGVwcmVjYXRlZCBhbmQgcmVtb3ZlZCBpbiB2NVxuICAgICAgICovXG4gICAgICBjbG9uZTogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmJvb2wsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuY2xvbmUgJiYgcHJvcHMuY29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IGNhbiBub3QgdXNlIHRoZSBjbG9uZSBhbmQgY29tcG9uZW50IHByb3AgYXQgdGhlIHNhbWUgdGltZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSksXG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgICAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgICAgIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgICAgIC5lbGVtZW50VHlwZVxuICAgIH0sIHByb3BUeXBlcykgOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgU3R5bGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gXCJTdHlsZWQoXCIuY29uY2F0KGNsYXNzTmFtZVByZWZpeCwgXCIpXCIpO1xuICAgIH1cblxuICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFN0eWxlZENvbXBvbmVudCwgQ29tcG9uZW50KTtcbiAgICByZXR1cm4gU3R5bGVkQ29tcG9uZW50O1xuICB9O1xuXG4gIHJldHVybiBjb21wb25lbnRDcmVhdG9yO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgc3R5bGVkIGFzIHN0eWxlZFdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxudmFyIHN0eWxlZCA9IGZ1bmN0aW9uIHN0eWxlZChDb21wb25lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENyZWF0b3IgPSBzdHlsZWRXaXRob3V0RGVmYXVsdChDb21wb25lbnQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudENyZWF0b3Ioc3R5bGUsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lXG4gICAgfSwgb3B0aW9ucykpO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdmaWxsJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJpbmhlcml0XCJgLiAqL1xuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwibGFyZ2VcImAuICovXG4gICAgZm9udFNpemVMYXJnZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzNSlcbiAgICB9XG4gIH07XG59O1xudmFyIFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3ZnJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZm9udFNpemUgPSBwcm9wcy5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3Byb3BzJGZvbnRTaXplID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkZm9udFNpemUsXG4gICAgICBodG1sQ29sb3IgPSBwcm9wcy5odG1sQ29sb3IsXG4gICAgICB0aXRsZUFjY2VzcyA9IHByb3BzLnRpdGxlQWNjZXNzLFxuICAgICAgX3Byb3BzJHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgdmlld0JveCA9IF9wcm9wcyR2aWV3Qm94ID09PSB2b2lkIDAgPyAnMCAwIDI0IDI0JyA6IF9wcm9wcyR2aWV3Qm94LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIGZvbnRTaXplICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImZvbnRTaXplXCIuY29uY2F0KGNhcGl0YWxpemUoZm9udFNpemUpKV0pLFxuICAgIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCB0aXRsZUFjY2VzcykgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3ZnSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2FjdGlvbicsICdkaXNhYmxlZCcsICdlcnJvcicsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKi9cbiAgZm9udFNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdsYXJnZScsICdzbWFsbCddKSxcblxuICAvKipcbiAgICogQXBwbGllcyBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBodG1sQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3ZnSWNvbidcbn0pKFN2Z0ljb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL1N2Z0ljb24nO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG1hdGVyaWFsLXVpL3ggcGFja2FnZXMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByZWZcbiAgICB9LCBwcm9wcyksIHBhdGgpO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlwiLmNvbmNhdChkaXNwbGF5TmFtZSwgXCJJY29uXCIpO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBTdmdJY29uLm11aU5hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ29tcG9uZW50KSk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZVN2Z0ljb24gZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlU3ZnSWNvbic7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3ZnSWNvbiggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTIgMTJjMi4yMSAwIDQtMS43OSA0LTRzLTEuNzktNC00LTQtNCAxLjc5LTQgNCAxLjc5IDQgNCA0em0wIDJjLTIuNjcgMC04IDEuMzQtOCA0djJoMTZ2LTJjMC0yLjY2LTUuMzMtNC04LTR6XCJcbn0pLCAnUGVyc29uJyk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFBlcnNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvUGVyc29uJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIHdpZHRoOiA0MCxcbiAgICAgIGhlaWdodDogNDAsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKSxcbiAgICAgIGxpbmVIZWlnaHQ6IDEsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgbm90IGBzcmNgIG9yIGBzcmNTZXRgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbNDAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs2MDBdXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjaXJjbGVcImAuICovXG4gICAgY2lyY2xlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjaXJjdWxhclwiYC4gKi9cbiAgICBjaXJjdWxhcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwicm91bmRlZFwiYC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3F1YXJlXCJgLiAqL1xuICAgIHNxdWFyZToge1xuICAgICAgYm9yZGVyUmFkaXVzOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbWcgZWxlbWVudCBpZiBlaXRoZXIgYHNyY2Agb3IgYHNyY1NldGAgaXMgZGVmaW5lZC4gKi9cbiAgICBpbWc6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAvLyBIYW5kbGUgbm9uLXNxdWFyZSBpbWFnZS4gVGhlIHByb3BlcnR5IGlzbid0IHN1cHBvcnRlZCBieSBJRSAxMS5cbiAgICAgIG9iamVjdEZpdDogJ2NvdmVyJyxcbiAgICAgIC8vIEhpZGUgYWx0IHRleHQuXG4gICAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIC8vIEhpZGUgdGhlIGltYWdlIGJyb2tlbiBpY29uLCBvbmx5IHdvcmtzIG9uIENocm9tZS5cbiAgICAgIHRleHRJbmRlbnQ6IDEwMDAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBmYWxsYmFjayBpY29uICovXG4gICAgZmFsbGJhY2s6IHtcbiAgICAgIHdpZHRoOiAnNzUlJyxcbiAgICAgIGhlaWdodDogJzc1JSdcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiB1c2VMb2FkZWQoX3JlZikge1xuICB2YXIgc3JjID0gX3JlZi5zcmMsXG4gICAgICBzcmNTZXQgPSBfcmVmLnNyY1NldDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbG9hZGVkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TG9hZGVkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzcmMgJiYgIXNyY1NldCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBzZXRMb2FkZWQoZmFsc2UpO1xuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICBpbWFnZS5zcmNTZXQgPSBzcmNTZXQ7XG5cbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldExvYWRlZCgnbG9hZGVkJyk7XG4gICAgfTtcblxuICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWFjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldExvYWRlZCgnZXJyb3InKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtzcmMsIHNyY1NldF0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuXG52YXIgQXZhdGFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXZhdGFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFsdCA9IHByb3BzLmFsdCxcbiAgICAgIGNoaWxkcmVuUHJvcCA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW1nUHJvcHMgPSBwcm9wcy5pbWdQcm9wcyxcbiAgICAgIHNpemVzID0gcHJvcHMuc2l6ZXMsXG4gICAgICBzcmMgPSBwcm9wcy5zcmMsXG4gICAgICBzcmNTZXQgPSBwcm9wcy5zcmNTZXQsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdjaXJjbGUnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWx0XCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiaW1nUHJvcHNcIiwgXCJzaXplc1wiLCBcInNyY1wiLCBcInNyY1NldFwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciBjaGlsZHJlbiA9IG51bGw7IC8vIFVzZSBhIGhvb2sgaW5zdGVhZCBvZiBvbkVycm9yIG9uIHRoZSBpbWcgZWxlbWVudCB0byBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cblxuICB2YXIgbG9hZGVkID0gdXNlTG9hZGVkKHtcbiAgICBzcmM6IHNyYyxcbiAgICBzcmNTZXQ6IHNyY1NldFxuICB9KTtcbiAgdmFyIGhhc0ltZyA9IHNyYyB8fCBzcmNTZXQ7XG4gIHZhciBoYXNJbWdOb3RGYWlsaW5nID0gaGFzSW1nICYmIGxvYWRlZCAhPT0gJ2Vycm9yJztcblxuICBpZiAoaGFzSW1nTm90RmFpbGluZykge1xuICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgX2V4dGVuZHMoe1xuICAgICAgYWx0OiBhbHQsXG4gICAgICBzcmM6IHNyYyxcbiAgICAgIHNyY1NldDogc3JjU2V0LFxuICAgICAgc2l6ZXM6IHNpemVzLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmltZ1xuICAgIH0sIGltZ1Byb3BzKSk7XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5Qcm9wICE9IG51bGwpIHtcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuUHJvcDtcbiAgfSBlbHNlIGlmIChoYXNJbWcgJiYgYWx0KSB7XG4gICAgY2hpbGRyZW4gPSBhbHRbMF07XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQZXJzb24sIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5mYWxsYmFja1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXMuc3lzdGVtLCBjbGFzc2VzW3ZhcmlhbnRdLCBjbGFzc05hbWUsICFoYXNJbWdOb3RGYWlsaW5nICYmIGNsYXNzZXMuY29sb3JEZWZhdWx0KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQXZhdGFyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBgc3JjYCBvciBgc3JjU2V0YCB0b1xuICAgKiBwcm92aWRlIGFuIGFsdCBhdHRyaWJ1dGUgZm9yIHRoZSByZW5kZXJlZCBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlbmRlciBpY29uIG9yIHRleHQgZWxlbWVudHMgaW5zaWRlIHRoZSBBdmF0YXIgaWYgYHNyY2AgaXMgbm90IHNldC5cbiAgICogVGhpcyBjYW4gYmUgYW4gZWxlbWVudCwgb3IganVzdCBhIHN0cmluZy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub2JqZWN0LCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXM7XG5cbiAgICBpZiAoY2xhc3NlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoY2xhc3Nlcy5jaXJjbGUgIT0gbnVsbCAmJiAvLyAyIGNsYXNzbmFtZXM/IG9uZSBmcm9tIHdpdGhTdHlsZXMgdGhlIG90aGVyIG11c3QgYmUgY3VzdG9tXG4gICAgY2xhc3Nlcy5jaXJjbGUuc3BsaXQoJyAnKS5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYXRlcmlhbC1VSTogVGhlIGBjaXJjbGVgIGNsYXNzIHdhcyBkZXByZWNhdGVkLiBVc2UgYGNpcmN1bGFyYCBpbnN0ZWFkLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYGltZ2AgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIHVzZWQgdG8gZGlzcGxheSBhbiBpbWFnZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgdG8gbGlzdGVuIGZvciB0aGUgbG9hZGluZyBlcnJvciBldmVudC5cbiAgICovXG4gIGltZ1Byb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgYHNpemVzYCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgc2l6ZXM6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBgc3JjYCBhdHRyaWJ1dGUgZm9yIHRoZSBgaW1nYCBlbGVtZW50LlxuICAgKi9cbiAgc3JjOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgYHNyY1NldGAgYXR0cmlidXRlIGZvciB0aGUgYGltZ2AgZWxlbWVudC5cbiAgICogVXNlIHRoaXMgYXR0cmlidXRlIGZvciByZXNwb25zaXZlIGltYWdlIGRpc3BsYXkuXG4gICAqL1xuICBzcmNTZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZSBvZiB0aGUgYXZhdGFyLlxuICAgKi9cbiAgdmFyaWFudDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ2NpcmN1bGFyJywgJ3JvdW5kZWQnLCAnc3F1YXJlJ10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQ7XG5cbiAgICBpZiAodmFyaWFudCA9PT0gJ2NpcmNsZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IGB2YXJpYW50PVwiY2lyY2xlXCJgIHdhcyBkZXByZWNhdGVkLiBVc2UgYHZhcmlhbnQ9XCJjaXJjdWxhclwiYCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBdmF0YXInXG59KShBdmF0YXIpOyIsImltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL1Jlc3VsdHMubW9kdWxlLnNjc3NcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0xpbmtcIjtcclxuaW1wb3J0IHsgc3R5bGVkIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgQXZhdGFyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9BdmF0YXJcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5cclxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZChMaW5rKSh7XHJcbiAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICBoZWlnaHQ6IDQyLFxyXG4gICAgYmFja2dyb3VuZDogXCIjMTQ2YWVjXCIsXHJcbiAgICBib3JkZXJSYWRpdXM6IFwiMCAwIDEwcHggMTBweFwiLFxyXG4gICAgY29sb3I6IFwid2hpdGVcIixcclxuICAgIGZvbnRTaXplOiAxNSxcclxuICAgIGZvbnRXZWlnaHQ6IDYwMCxcclxuICAgIGxpbmVIZWlnaHQ6IFwiNDJweFwiLFxyXG4gICAgYm94U2hhZG93OiBcIjAgMXB4IDFweCByZ2JhKDIwLCAxMDYsIDIzNiwgMC4xNSlcIixcclxuICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcclxuICAgIGJvcmRlcjogXCJub25lXCIsXHJcbiAgICBvdXRsaW5lOiBcIm5vbmVcIixcclxuICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXHJcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXHJcbiAgICBcIiY6aG92ZXIsICY6YWN0aXZlXCI6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiBcIiMwMDQ3YjFcIixcclxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogXCJub25lXCJcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBTdHlsZWRBdmF0YXIgPSBzdHlsZWQoQXZhdGFyKSh7XHJcbiAgICB3aWR0aDogMTAwLFxyXG4gICAgaGVpZ2h0OiAxMDBcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgUmVzdWx0cyA9ICh7IHVzZXJzIH0pID0+IHtcclxuICAgIGxldCBsYXN0U2VhcmNoID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsYXN0U2VhcmNoVmFsdWVcIik7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmZvdW5kX251bWJlcn0+XHJcbiAgICAgICAgICAgIHt1c2Vycy5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICA/IGBXZSBmb3VuZCAke3VzZXJzLmxlbmd0aH0gdXNlcnMgZm9yIHlvdXIgcmVxdWVzdCAke2xhc3RTZWFyY2ggPyBgJyR7bGFzdFNlYXJjaH0nYCA6IFwiXCJ9YFxyXG4gICAgICAgICAgICAgICAgOiBcIllvdSBjYW4gZmluZCBhbnkgR2l0SHViIHVzZXIgeW91IHdhbnRcIn1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnJlc3VsdHN9PlxyXG4gICAgICAgICAgICB7dXNlcnMubWFwKCh1c2VyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXt1c2VyLmlkfSBjbGFzc05hbWU9e3N0eWxlcy5yZXN1bHRzX2l0ZW19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkQXZhdGFyIGFsdD17dXNlci5sb2dpbn0gc3JjPXt1c2VyLmF2YXRhcl91cmx9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVzdWx0c19pdGVtX2xvZ2lufT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1c2VyLmxvZ2lufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZExpbmsgaHJlZj17dXNlci5odG1sX3VybH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGb2xsb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L0ZyYWdtZW50PlxyXG4gICAgKTtcclxufTtcclxuXHJcblJlc3VsdHMucHJvcFR5cGVzID0ge1xyXG4gICAgdXNlcnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgUmVzdWx0c0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XHJcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTG9hZGVyLm1vZHVsZS5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL0xvYWRlci5tb2R1bGUuc2Nzc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IExvYWRlciA9ICgpID0+IDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9hZGluZ30gLz47XHJcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzNdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vU2VhcmNoLm1vZHVsZS5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAoMCwgcmVmLmN1cnJlbnQpLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgfSwgW10pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IChrZXkgaW4gcHJldkNoaWxkTWFwcGluZyk7XG4gICAgdmFyIGhhc05leHQgPSAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcbi8qKlxuICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gKlxuICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gKiBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gbm9kZSBpcyBgdW5kZWZpbmVkYCB3aGVuIHVzZXIgcHJvdmlkZWQgYG5vZGVSZWZgIHByb3BcbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IHRoaXMuc3RhdGUuY29udGV4dFZhbHVlO1xuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbkdyb3VwOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmlwcGxlKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRwdWxzYXRlID0gcHJvcHMucHVsc2F0ZSxcbiAgICAgIHB1bHNhdGUgPSBfcHJvcHMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcHVsc2F0ZSxcbiAgICAgIHJpcHBsZVggPSBwcm9wcy5yaXBwbGVYLFxuICAgICAgcmlwcGxlWSA9IHByb3BzLnJpcHBsZVksXG4gICAgICByaXBwbGVTaXplID0gcHJvcHMucmlwcGxlU2l6ZSxcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgX3Byb3BzJG9uRXhpdGVkID0gcHJvcHMub25FeGl0ZWQsXG4gICAgICBvbkV4aXRlZCA9IF9wcm9wcyRvbkV4aXRlZCA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcHJvcHMkb25FeGl0ZWQsXG4gICAgICB0aW1lb3V0ID0gcHJvcHMudGltZW91dDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldExlYXZpbmcgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHJpcHBsZUNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yaXBwbGUsIGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgcHVsc2F0ZSAmJiBjbGFzc2VzLnJpcHBsZVB1bHNhdGUpO1xuICB2YXIgcmlwcGxlU3R5bGVzID0ge1xuICAgIHdpZHRoOiByaXBwbGVTaXplLFxuICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICB0b3A6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWSxcbiAgICBsZWZ0OiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVhcbiAgfTtcbiAgdmFyIGNoaWxkQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLmNoaWxkLCBsZWF2aW5nICYmIGNsYXNzZXMuY2hpbGRMZWF2aW5nLCBwdWxzYXRlICYmIGNsYXNzZXMuY2hpbGRQdWxzYXRlKTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IHVzZUV2ZW50Q2FsbGJhY2sob25FeGl0ZWQpOyAvLyBSaXBwbGUgaXMgdXNlZCBmb3IgdXNlciBmZWVkYmFjayAoZS5nLiBjbGljayBvciBwcmVzcykgc28gd2Ugd2FudCB0byBhcHBseSBzdHlsZXMgd2l0aCB0aGUgaGlnaGVzdCBwcmlvcml0eVxuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWluUHJvcCkge1xuICAgICAgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRcbiAgICAgIHNldExlYXZpbmcodHJ1ZSk7IC8vIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAjb25FeGl0ZWRcblxuICAgICAgdmFyIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoaGFuZGxlRXhpdGVkLCB0aW1lb3V0KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbaGFuZGxlRXhpdGVkLCBpblByb3AsIHRpbWVvdXRdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiByaXBwbGVDbGFzc05hbWUsXG4gICAgc3R5bGU6IHJpcHBsZVN0eWxlc1xuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBSaXBwbGUgZnJvbSAnLi9SaXBwbGUnO1xudmFyIERVUkFUSU9OID0gNTUwO1xuZXhwb3J0IHZhciBERUxBWV9SSVBQTEUgPSA4MDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHpJbmRleDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZToge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVWaXNpYmxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVWaXNpYmxlOiB7XG4gICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICBhbmltYXRpb246IFwiJGVudGVyIFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGByaXBwbGVQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICByaXBwbGVQdWxzYXRlOiB7XG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogXCJcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlciwgXCJtc1wiKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRgIGNsYXNzLiAqL1xuICAgIGNoaWxkOiB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZExlYXZpbmdgIGNsYXNzLiAqL1xuICAgIGNoaWxkTGVhdmluZzoge1xuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIGFuaW1hdGlvbjogXCIkZXhpdCBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCIkcHVsc2F0ZSAyNTAwbXMgXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsIFwiIDIwMG1zIGluZmluaXRlXCIpXG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBlbnRlcic6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICBvcGFjaXR5OiAwLjFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBvcGFjaXR5OiAwLjNcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGV4aXQnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgcHVsc2F0ZSc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMC45MiknXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKlxuICogVE9ETyB2NTogTWFrZSBwcml2YXRlXG4gKi9cblxudmFyIFRvdWNoUmlwcGxlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNlbnRlciA9IHByb3BzLmNlbnRlcixcbiAgICAgIGNlbnRlclByb3AgPSBfcHJvcHMkY2VudGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoW10pLFxuICAgICAgcmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIHZhciByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pOyAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cblxuICB2YXIgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG5cbiAgdmFyIHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgdmFyIHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBwdWxzYXRlID0gcGFyYW1zLnB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSA9IHBhcmFtcy5yaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplID0gcGFyYW1zLnJpcHBsZVNpemUsXG4gICAgICAgIGNiID0gcGFyYW1zLmNiO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9sZFJpcHBsZXMpLCBbLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmlwcGxlLCB7XG4gICAgICAgIGtleTogbmV4dEtleS5jdXJyZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICB0aW1lb3V0OiBEVVJBVElPTixcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZVxuICAgICAgfSldKTtcbiAgICB9KTtcbiAgICBuZXh0S2V5LmN1cnJlbnQgKz0gMTtcbiAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gY2I7XG4gIH0sIFtjbGFzc2VzXSk7XG4gIHZhciBzdGFydCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgX29wdGlvbnMkcHVsc2F0ZSA9IG9wdGlvbnMucHVsc2F0ZSxcbiAgICAgICAgcHVsc2F0ZSA9IF9vcHRpb25zJHB1bHNhdGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkcHVsc2F0ZSxcbiAgICAgICAgX29wdGlvbnMkY2VudGVyID0gb3B0aW9ucy5jZW50ZXIsXG4gICAgICAgIGNlbnRlciA9IF9vcHRpb25zJGNlbnRlciA9PT0gdm9pZCAwID8gY2VudGVyUHJvcCB8fCBvcHRpb25zLnB1bHNhdGUgOiBfb3B0aW9ucyRjZW50ZXIsXG4gICAgICAgIF9vcHRpb25zJGZha2VFbGVtZW50ID0gb3B0aW9ucy5mYWtlRWxlbWVudCxcbiAgICAgICAgZmFrZUVsZW1lbnQgPSBfb3B0aW9ucyRmYWtlRWxlbWVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRmYWtlRWxlbWVudDtcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyAmJiBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50KSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgaWdub3JpbmdNb3VzZURvd24uY3VycmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnQgPSBmYWtlRWxlbWVudCA/IG51bGwgOiBjb250YWluZXIuY3VycmVudDtcbiAgICB2YXIgcmVjdCA9IGVsZW1lbnQgPyBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwXG4gICAgfTsgLy8gR2V0IHRoZSBzaXplIG9mIHRoZSByaXBwbGVcblxuICAgIHZhciByaXBwbGVYO1xuICAgIHZhciByaXBwbGVZO1xuICAgIHZhciByaXBwbGVTaXplO1xuXG4gICAgaWYgKGNlbnRlciB8fCBldmVudC5jbGllbnRYID09PSAwICYmIGV2ZW50LmNsaWVudFkgPT09IDAgfHwgIWV2ZW50LmNsaWVudFggJiYgIWV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmVmID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudCxcbiAgICAgICAgICBjbGllbnRYID0gX3JlZi5jbGllbnRYLFxuICAgICAgICAgIGNsaWVudFkgPSBfcmVmLmNsaWVudFk7XG5cbiAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQoY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICB9XG5cbiAgICBpZiAoY2VudGVyKSB7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KCgyICogTWF0aC5wb3cocmVjdC53aWR0aCwgMikgKyBNYXRoLnBvdyhyZWN0LmhlaWdodCwgMikpIC8gMyk7IC8vIEZvciBzb21lIHJlYXNvbiB0aGUgYW5pbWF0aW9uIGlzIGJyb2tlbiBvbiBNb2JpbGUgQ2hyb21lIGlmIHRoZSBzaXplIGlmIGV2ZW4uXG5cbiAgICAgIGlmIChyaXBwbGVTaXplICUgMiA9PT0gMCkge1xuICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICB2YXIgc2l6ZVkgPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMCkgLSByaXBwbGVZKSwgcmlwcGxlWSkgKiAyICsgMjtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoTWF0aC5wb3coc2l6ZVgsIDIpICsgTWF0aC5wb3coc2l6ZVksIDIpKTtcbiAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgIGlmIChldmVudC50b3VjaGVzKSB7XG4gICAgICAvLyBjaGVjayB0aGF0IHRoaXMgaXNuJ3QgYW5vdGhlciB0b3VjaHN0YXJ0IGR1ZSB0byBtdWx0aXRvdWNoXG4gICAgICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCBvbmx5IGNsZWFyIGEgc2luZ2xlIHRpbWVyIHdoZW4gdW5tb3VudGluZyB3aGlsZSB0d29cbiAgICAgIC8vIGFyZSBydW5uaW5nXG4gICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID09PSBudWxsKSB7XG4gICAgICAgIC8vIFByZXBhcmUgdGhlIHJpcHBsZSBlZmZlY3QuXG4gICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2I6IGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIERlbGF5IHRoZSBleGVjdXRpb24gb2YgdGhlIHJpcHBsZSBlZmZlY3QuXG5cblxuICAgICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KSB7XG4gICAgICAgICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQoKTtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBERUxBWV9SSVBQTEUpOyAvLyBXZSBoYXZlIHRvIG1ha2UgYSB0cmFkZW9mZiB3aXRoIHRoaXMgdmFsdWUuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgcHVsc2F0ZTogcHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgcmlwcGxlU2l6ZTogcmlwcGxlU2l6ZSxcbiAgICAgICAgY2I6IGNiXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtjZW50ZXJQcm9wLCBzdGFydENvbW1pdF0pO1xuICB2YXIgcHVsc2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzdGFydCh7fSwge1xuICAgICAgcHVsc2F0ZTogdHJ1ZVxuICAgIH0pO1xuICB9LCBbc3RhcnRdKTtcbiAgdmFyIHN0b3AgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQsIGNiKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7IC8vIFRoZSB0b3VjaCBpbnRlcmFjdGlvbiBvY2N1cnMgdG9vIHF1aWNrbHkuXG4gICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoZW5kJyAmJiBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzdG9wKGV2ZW50LCBjYik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIGlmIChvbGRSaXBwbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFJpcHBsZXMuc2xpY2UoMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvbGRSaXBwbGVzO1xuICAgIH0pO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgc3RvcDogc3RvcFxuICAgIH07XG4gIH0sIFtwdWxzYXRlLCBzdGFydCwgc3RvcF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogY29udGFpbmVyXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIGV4aXQ6IHRydWVcbiAgfSwgcmlwcGxlcykpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb3VjaFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgc3RhcnRzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIGNvbXBvbmVudFxuICAgKiByYXRoZXIgdGhhbiBhdCB0aGUgcG9pbnQgb2YgaW50ZXJhY3Rpb24uXG4gICAqL1xuICBjZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKCAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyhUb3VjaFJpcHBsZSkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZiwgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHVzZUlzRm9jdXNWaXNpYmxlIGZyb20gJy4uL3V0aWxzL3VzZUlzRm9jdXNWaXNpYmxlJztcbmltcG9ydCBUb3VjaFJpcHBsZSBmcm9tICcuL1RvdWNoUmlwcGxlJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIFJlc2V0IGRlZmF1bHQgdmFsdWVcbiAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgIG91dGxpbmU6IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICAvLyBSZW1vdmUgdGhlIG1hcmdpbiBpbiBTYWZhcmlcbiAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gRmlyZWZveFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgLy8gU28gd2UgdGFrZSBwcmVjZWRlbnQgb3ZlciB0aGUgc3R5bGUgb2YgYSBuYXRpdmUgPGEgLz4gZWxlbWVudC5cbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICcmOjotbW96LWZvY3VzLWlubmVyJzoge1xuICAgICAgYm9yZGVyU3R5bGU6ICdub25lJyAvLyBSZW1vdmUgRmlyZWZveCBkb3R0ZWQgb3V0bGluZS5cblxuICAgIH0sXG4gICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAvLyBEaXNhYmxlIGxpbmsgaW50ZXJhY3Rpb25zXG4gICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgIH0sXG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGNvbG9yQWRqdXN0OiAnZXhhY3QnXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGtleWJvYXJkIGZvY3VzZWQuICovXG4gIGZvY3VzVmlzaWJsZToge31cbn07XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cbnZhciBCdXR0b25CYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uQmFzZShwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBidXR0b25SZWZQcm9wID0gcHJvcHMuYnV0dG9uUmVmLFxuICAgICAgX3Byb3BzJGNlbnRlclJpcHBsZSA9IHByb3BzLmNlbnRlclJpcHBsZSxcbiAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wcyRjZW50ZXJSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlclJpcHBsZSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUmlwcGxlID0gcHJvcHMuZGlzYWJsZVJpcHBsZSxcbiAgICAgIGRpc2FibGVSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZVJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJpcHBsZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9IHByb3BzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVRvdWNoUmksXG4gICAgICBfcHJvcHMkZm9jdXNSaXBwbGUgPSBwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzUmlwcGxlID0gX3Byb3BzJGZvY3VzUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb2N1c1JpcHBsZSxcbiAgICAgIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSA9IHByb3BzLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2xpY2sgPSBwcm9wcy5vbkNsaWNrLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBvbk1vdXNlRG93biA9IHByb3BzLm9uTW91c2VEb3duLFxuICAgICAgb25Nb3VzZUxlYXZlID0gcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgb25Nb3VzZVVwID0gcHJvcHMub25Nb3VzZVVwLFxuICAgICAgb25Ub3VjaEVuZCA9IHByb3BzLm9uVG91Y2hFbmQsXG4gICAgICBvblRvdWNoTW92ZSA9IHByb3BzLm9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaFN0YXJ0ID0gcHJvcHMub25Ub3VjaFN0YXJ0LFxuICAgICAgb25EcmFnTGVhdmUgPSBwcm9wcy5vbkRyYWdMZWF2ZSxcbiAgICAgIF9wcm9wcyR0YWJJbmRleCA9IHByb3BzLnRhYkluZGV4LFxuICAgICAgdGFiSW5kZXggPSBfcHJvcHMkdGFiSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkdGFiSW5kZXgsXG4gICAgICBUb3VjaFJpcHBsZVByb3BzID0gcHJvcHMuVG91Y2hSaXBwbGVQcm9wcyxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhY3Rpb25cIiwgXCJidXR0b25SZWZcIiwgXCJjZW50ZXJSaXBwbGVcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVSaXBwbGVcIiwgXCJkaXNhYmxlVG91Y2hSaXBwbGVcIiwgXCJmb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2xpY2tcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJvbkRyYWdMZWF2ZVwiLCBcInRhYkluZGV4XCIsIFwiVG91Y2hSaXBwbGVQcm9wc1wiLCBcInR5cGVcIl0pO1xuXG4gIHZhciBidXR0b25SZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgZnVuY3Rpb24gZ2V0QnV0dG9uTm9kZSgpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShidXR0b25SZWYuY3VycmVudCk7XG4gIH1cblxuICB2YXIgcmlwcGxlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBmb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgaWYgKGRpc2FibGVkICYmIGZvY3VzVmlzaWJsZSkge1xuICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c1Zpc2libGU6IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZSgpIHtcbiAgICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuICAgICAgICBidXR0b25SZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlICYmIGZvY3VzUmlwcGxlICYmICFkaXNhYmxlUmlwcGxlKSB7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKCk7XG4gICAgfVxuICB9LCBbZGlzYWJsZVJpcHBsZSwgZm9jdXNSaXBwbGUsIGZvY3VzVmlzaWJsZV0pO1xuXG4gIGZ1bmN0aW9uIHVzZVJpcHBsZUhhbmRsZXIocmlwcGxlQWN0aW9uLCBldmVudENhbGxiYWNrKSB7XG4gICAgdmFyIHNraXBSaXBwbGVBY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRpc2FibGVUb3VjaFJpcHBsZTtcbiAgICByZXR1cm4gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudENhbGxiYWNrKSB7XG4gICAgICAgIGV2ZW50Q2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWdub3JlID0gc2tpcFJpcHBsZUFjdGlvbjtcblxuICAgICAgaWYgKCFpZ25vcmUgJiYgcmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmlwcGxlUmVmLmN1cnJlbnRbcmlwcGxlQWN0aW9uXShldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhbmRsZU1vdXNlRG93biA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Nb3VzZURvd24pO1xuICB2YXIgaGFuZGxlRHJhZ0xlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uRHJhZ0xlYXZlKTtcbiAgdmFyIGhhbmRsZU1vdXNlVXAgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Nb3VzZVVwKTtcbiAgdmFyIGhhbmRsZU1vdXNlTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25Nb3VzZUxlYXZlKSB7XG4gICAgICBvbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVUb3VjaFN0YXJ0ID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvblRvdWNoU3RhcnQpO1xuICB2YXIgaGFuZGxlVG91Y2hFbmQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaEVuZCk7XG4gIHZhciBoYW5kbGVUb3VjaE1vdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25Ub3VjaE1vdmUpO1xuICB2YXIgaGFuZGxlQmx1ciA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBvbkJsdXJWaXNpYmxlKGV2ZW50KTtcbiAgICAgIHNldEZvY3VzVmlzaWJsZShmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH0sIGZhbHNlKTtcbiAgdmFyIGhhbmRsZUZvY3VzID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuICAgIGlmICghYnV0dG9uUmVmLmN1cnJlbnQpIHtcbiAgICAgIGJ1dHRvblJlZi5jdXJyZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAoaXNGb2N1c1Zpc2libGUoZXZlbnQpKSB7XG4gICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG5cbiAgICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgICBvbkZvY3VzVmlzaWJsZShldmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGlzTm9uTmF0aXZlQnV0dG9uID0gZnVuY3Rpb24gaXNOb25OYXRpdmVCdXR0b24oKSB7XG4gICAgdmFyIGJ1dHRvbiA9IGdldEJ1dHRvbk5vZGUoKTtcbiAgICByZXR1cm4gY29tcG9uZW50ICYmIGNvbXBvbmVudCAhPT0gJ2J1dHRvbicgJiYgIShidXR0b24udGFnTmFtZSA9PT0gJ0EnICYmIGJ1dHRvbi5ocmVmKTtcbiAgfTtcbiAgLyoqXG4gICAqIElFIDExIHNoaW0gZm9yIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L3JlcGVhdFxuICAgKi9cblxuXG4gIHZhciBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGhhbmRsZUtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgb25LZXlEb3duKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGlzTm9uTmF0aXZlQnV0dG9uKCkgJiYgZXZlbnQua2V5ID09PSAnRW50ZXInICYmICFkaXNhYmxlZCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgb25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUtleVVwID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBjYWxsaW5nIHByZXZlbnREZWZhdWx0IGluIGtleVVwIG9uIGEgPGJ1dHRvbj4gd2lsbCBub3QgZGlzcGF0Y2ggYSBjbGljayBldmVudCBpZiBTcGFjZSBpcyBwcmVzc2VkXG4gICAgLy8gaHR0cHM6Ly9jb2Rlc2FuZGJveC5pby9zL2J1dHRvbi1rZXl1cC1wcmV2ZW50ZGVmYXVsdC1kbjdmMFxuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG5cbiAgICBpZiAob25DbGljayAmJiBldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIENvbXBvbmVudFByb3AgPSBjb21wb25lbnQ7XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nICYmIG90aGVyLmhyZWYpIHtcbiAgICBDb21wb25lbnRQcm9wID0gJ2EnO1xuICB9XG5cbiAgdmFyIGJ1dHRvblByb3BzID0ge307XG5cbiAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgYnV0dG9uUHJvcHMudHlwZSA9IHR5cGU7XG4gICAgYnV0dG9uUHJvcHMuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoQ29tcG9uZW50UHJvcCAhPT0gJ2EnIHx8ICFvdGhlci5ocmVmKSB7XG4gICAgICBidXR0b25Qcm9wcy5yb2xlID0gJ2J1dHRvbic7XG4gICAgfVxuXG4gICAgYnV0dG9uUHJvcHNbJ2FyaWEtZGlzYWJsZWQnXSA9IGRpc2FibGVkO1xuICB9XG5cbiAgdmFyIGhhbmRsZVVzZXJSZWYgPSB1c2VGb3JrUmVmKGJ1dHRvblJlZlByb3AsIHJlZik7XG4gIHZhciBoYW5kbGVPd25SZWYgPSB1c2VGb3JrUmVmKGZvY3VzVmlzaWJsZVJlZiwgYnV0dG9uUmVmKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlVXNlclJlZiwgaGFuZGxlT3duUmVmKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIG1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRNb3VudGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc2V0TW91bnRlZFN0YXRlKHRydWUpO1xuICB9LCBbXSk7XG4gIHZhciBlbmFibGVUb3VjaFJpcHBsZSA9IG1vdW50ZWRTdGF0ZSAmJiAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGVuYWJsZVRvdWNoUmlwcGxlICYmICFyaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgY29tcG9uZW50YCBwcm9wIHByb3ZpZGVkIHRvIEJ1dHRvbkJhc2UgaXMgaW52YWxpZC4nLCAnUGxlYXNlIG1ha2Ugc3VyZSB0aGUgY2hpbGRyZW4gcHJvcCBpcyByZW5kZXJlZCBpbiB0aGlzIGN1c3RvbSBjb21wb25lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtlbmFibGVUb3VjaFJpcHBsZV0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGZvY3VzVmlzaWJsZSAmJiBbY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICBvbktleVVwOiBoYW5kbGVLZXlVcCxcbiAgICBvbk1vdXNlRG93bjogaGFuZGxlTW91c2VEb3duLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICBvbk1vdXNlVXA6IGhhbmRsZU1vdXNlVXAsXG4gICAgb25EcmFnTGVhdmU6IGhhbmRsZURyYWdMZWF2ZSxcbiAgICBvblRvdWNoRW5kOiBoYW5kbGVUb3VjaEVuZCxcbiAgICBvblRvdWNoTW92ZTogaGFuZGxlVG91Y2hNb3ZlLFxuICAgIG9uVG91Y2hTdGFydDogaGFuZGxlVG91Y2hTdGFydCxcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4XG4gIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCBlbmFibGVUb3VjaFJpcHBsZSA/XG4gIC8qI19fUFVSRV9fKi9cblxuICAvKiBUb3VjaFJpcHBsZSBpcyBvbmx5IG5lZWRlZCBjbGllbnQtc2lkZSwgeDIgYm9vc3Qgb24gdGhlIHNlcnZlci4gKi9cbiAgUmVhY3QuY3JlYXRlRWxlbWVudChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmlwcGxlUmVmLFxuICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSA6IG51bGwpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b25CYXNlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIGBmb2N1c1Zpc2libGUoKWAgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFVzZSB0aGF0IHByb3AgdG8gcGFzcyBhIHJlZiB0byB0aGUgbmF0aXZlIGJ1dHRvbiBjb21wb25lbnQuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVmYCBpbnN0ZWFkLlxuICAgKi9cbiAgYnV0dG9uUmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGVzIHdpbGwgYmUgY2VudGVyZWQuXG4gICAqIFRoZXkgd29uJ3Qgc3RhcnQgYXQgdGhlIGN1cnNvciBpbnRlcmFjdGlvbiBwb3NpdGlvbi5cbiAgICovXG4gIGNlbnRlclJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqL1xuICBmb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIHNlbGVjdG9yXShodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvc2VsZWN0b3JzLTQvI3RoZS1mb2N1cy12aXNpYmxlLXBzZXVkbykuXG4gICAqIFRoZSByYXRpb25hbGUgZm9yIHVzaW5nIHRoaXMgZmVhdHVyZSBbaXMgZXhwbGFpbmVkIGhlcmVdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi9tYXN0ZXIvZXhwbGFpbmVyLm1kKS5cbiAgICogQSBbcG9seWZpbGwgY2FuIGJlIHVzZWRdKGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUpIHRvIGFwcGx5IGEgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIG90aGVyIGNvbXBvbmVudHNcbiAgICogaWYgbmVlZGVkLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25EcmFnTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQgd2l0aCBhIGtleWJvYXJkLlxuICAgKiBXZSB0cmlnZ2VyIGEgYG9uRm9jdXNgIGNhbGxiYWNrIHRvby5cbiAgICovXG4gIG9uRm9jdXNWaXNpYmxlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZUxlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaEVuZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hNb3ZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaFN0YXJ0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGFiSW5kZXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKSwgUHJvcFR5cGVzLnN0cmluZ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbkJhc2UnXG59KShCdXR0b25CYXNlKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZXh0ZW5kcyh7fSwgdGhlbWUudHlwb2dyYXBoeS5idXR0b24sIHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWluV2lkdGg6IDY0LFxuICAgICAgcGFkZGluZzogJzZweCAxNnB4JyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnYmFja2dyb3VuZC1jb2xvcicsICdib3gtc2hhZG93JywgJ2JvcmRlciddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNwYW4gZWxlbWVudCB0aGF0IHdyYXBzIHRoZSBjaGlsZHJlbi4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIC8vIEVuc3VyZSB0aGUgY29ycmVjdCB3aWR0aCBmb3IgaU9TIFNhZmFyaVxuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgYWxpZ25JdGVtczogJ2luaGVyaXQnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0OiB7XG4gICAgICBwYWRkaW5nOiAnNnB4IDhweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgdGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIHRleHRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBwYWRkaW5nOiAnNXB4IDE1cHgnLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBvdXRsaW5lZFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgb3V0bGluZWRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5LkExMDAsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s0XSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdXG4gICAgICAgIH0sXG4gICAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c1Zpc2libGUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s2XVxuICAgICAgfSxcbiAgICAgICcmOmFjdGl2ZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzhdXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZCxcbiAgICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzBdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbnRhaW5lZFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5kYXJrLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb250YWluZWRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5kYXJrLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZUVsZXZhdGlvbj17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVFbGV2YXRpb246IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOmFjdGl2ZSc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIEJ1dHRvbkJhc2Ugcm9vdCBlbGVtZW50IGlmIHRoZSBidXR0b24gaXMga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgICBmb2N1c1Zpc2libGU6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgYm9yZGVyQ29sb3I6ICdjdXJyZW50Q29sb3InXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYCBhbmQgYHZhcmlhbnQ9XCJ0ZXh0XCJgLiAqL1xuICAgIHRleHRTaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICc0cHggNXB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJ0ZXh0XCJgLiAqL1xuICAgIHRleHRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc4cHggMTFweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWRTaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICczcHggOXB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZFNpemVMYXJnZToge1xuICAgICAgcGFkZGluZzogJzdweCAyMXB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTUpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYCBhbmQgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkU2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDEwcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cImxhcmdlXCJgIGFuZCBgdmFyaWFudD1cImNvbnRhaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc4cHggMjJweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAuICovXG4gICAgc2l6ZVNtYWxsOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBzaXplTGFyZ2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZnVsbFdpZHRoPXt0cnVlfWAuICovXG4gICAgZnVsbFdpZHRoOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzdGFydEljb24gZWxlbWVudCBpZiBzdXBwbGllZC4gKi9cbiAgICBzdGFydEljb246IHtcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIG1hcmdpblJpZ2h0OiA4LFxuICAgICAgbWFyZ2luTGVmdDogLTQsXG4gICAgICAnJiRpY29uU2l6ZVNtYWxsJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAtMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgZW5kSWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkLiAqL1xuICAgIGVuZEljb246IHtcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIG1hcmdpblJpZ2h0OiAtNCxcbiAgICAgIG1hcmdpbkxlZnQ6IDgsXG4gICAgICAnJiRpY29uU2l6ZVNtYWxsJzoge1xuICAgICAgICBtYXJnaW5SaWdodDogLTJcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gZWxlbWVudCBpZiBzdXBwbGllZCBhbmQgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBpY29uU2l6ZVNtYWxsOiB7XG4gICAgICAnJiA+ICo6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIGZvbnRTaXplOiAxOFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkIGFuZCBgc2l6ZT1cIm1lZGl1bVwiYC4gKi9cbiAgICBpY29uU2l6ZU1lZGl1bToge1xuICAgICAgJyYgPiAqOmZpcnN0LWNoaWxkJzoge1xuICAgICAgICBmb250U2l6ZTogMjBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gZWxlbWVudCBpZiBzdXBwbGllZCBhbmQgYHNpemU9XCJsYXJnZVwiYC4gKi9cbiAgICBpY29uU2l6ZUxhcmdlOiB7XG4gICAgICAnJiA+ICo6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIGZvbnRTaXplOiAyMlxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgQnV0dG9uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQnV0dG9uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRWxldmF0aSA9IHByb3BzLmRpc2FibGVFbGV2YXRpb24sXG4gICAgICBkaXNhYmxlRWxldmF0aW9uID0gX3Byb3BzJGRpc2FibGVFbGV2YXRpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRWxldmF0aSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9IHByb3BzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wcyRkaXNhYmxlRm9jdXNSaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzUmksXG4gICAgICBlbmRJY29uUHJvcCA9IHByb3BzLmVuZEljb24sXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgc3RhcnRJY29uUHJvcCA9IHByb3BzLnN0YXJ0SWNvbixcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkdHlwZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVFbGV2YXRpb25cIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlbmRJY29uXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInN0YXJ0SWNvblwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgc3RhcnRJY29uID0gc3RhcnRJY29uUHJvcCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnN0YXJ0SWNvbiwgY2xhc3Nlc1tcImljb25TaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgc3RhcnRJY29uUHJvcCk7XG4gIHZhciBlbmRJY29uID0gZW5kSWNvblByb3AgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5lbmRJY29uLCBjbGFzc2VzW1wiaWNvblNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldKVxuICB9LCBlbmRJY29uUHJvcCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBjb2xvciA9PT0gJ2luaGVyaXQnID8gY2xhc3Nlcy5jb2xvckluaGVyaXQgOiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJcIi5jb25jYXQodmFyaWFudCkuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIHNpemUgIT09ICdtZWRpdW0nICYmIFtjbGFzc2VzW1wiXCIuY29uY2F0KHZhcmlhbnQsIFwiU2l6ZVwiKS5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV1dLCBkaXNhYmxlRWxldmF0aW9uICYmIGNsYXNzZXMuZGlzYWJsZUVsZXZhdGlvbiwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoKSxcbiAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZm9jdXNSaXBwbGU6ICFkaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBzdGFydEljb24sIGNoaWxkcmVuLCBlbmRJY29uKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgYnV0dG9uLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIG5vIGVsZXZhdGlvbiBpcyB1c2VkLlxuICAgKi9cbiAgZGlzYWJsZUVsZXZhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlICBrZXlib2FyZCBmb2N1cyByaXBwbGUgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGBmb2N1c1Zpc2libGVDbGFzc05hbWVgLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgcGxhY2VkIGFmdGVyIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIGVuZEljb246IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gbGluayB0byB3aGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICogSWYgZGVmaW5lZCwgYW4gYGFgIGVsZW1lbnQgd2lsbCBiZSB1c2VkIGFzIHRoZSByb290IG5vZGUuXG4gICAqL1xuICBocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBiZWZvcmUgdGhlIGNoaWxkcmVuLlxuICAgKi9cbiAgc3RhcnRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYnV0dG9uJywgJ3Jlc2V0JywgJ3N1Ym1pdCddKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydjb250YWluZWQnLCAnb3V0bGluZWQnLCAndGV4dCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b24nXG59KShCdXR0b24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIC8vIENocm9tZSBmaXggZm9yIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgyMDU0MVxuICAgICAgLy8gVG8gcmVtb3ZlIGF0IHNvbWUgcG9pbnQuXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzYpXG4gICAgfVxuICB9O1xufTtcbnZhciBJY29uID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSWNvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3BhbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBmb250U2l6ZSA9IF9wcm9wcyRmb250U2l6ZSA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGZvbnRTaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KCdtYXRlcmlhbC1pY29ucycsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiBmb250IGxpZ2F0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdhY3Rpb24nLCAnZXJyb3InLCAnZGlzYWJsZWQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdkZWZhdWx0JywgJ3NtYWxsJywgJ2xhcmdlJ10pXG59IDogdm9pZCAwO1xuSWNvbi5tdWlOYW1lID0gJ0ljb24nO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb24nXG59KShJY29uKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBfcmVmLm11aUZvcm1Db250cm9sO1xuICByZXR1cm4gc3RhdGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0ZSkge1xuICAgIGFjY1tzdGF0ZV0gPSBwcm9wc1tzdGF0ZV07XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIEZvcm1Db250cm9sQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRm9ybUNvbnRyb2xDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0Zvcm1Db250cm9sQ29udGV4dCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtQ29udHJvbCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoRm9ybUNvbnRyb2xDb250ZXh0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sQ29udGV4dDsiLCIvLyBDb3JyZXNwb25kcyB0byAxMCBmcmFtZXMgYXQgNjAgSHouXG4vLyBBIGZldyBieXRlcyBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzIH4zIGtCIGFuZCBkZWJvdW5jZSB+MzAwIEIuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKSB7XG4gIHZhciB3YWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxNjY7XG4gIHZhciB0aW1lb3V0O1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtdGhpc1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uIGxhdGVyKCkge1xuICAgICAgZnVuYy5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIH07XG5cbiAgcmV0dXJuIGRlYm91bmNlZDtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiBwYXJzZUludChjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSwgMTApIHx8IDA7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNoYWRvdyB0ZXh0YXJlYSBlbGVtZW50LiAqL1xuICBzaGFkb3c6IHtcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaVBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAvLyBSZW1vdmUgZnJvbSB0aGUgY29udGVudCBmbG93XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgLy8gSWdub3JlIHRoZSBzY3JvbGxiYXIgd2lkdGhcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIC8vIENyZWF0ZSBhIG5ldyBsYXllciwgaW5jcmVhc2UgdGhlIGlzb2xhdGlvbiBvZiB0aGUgY29tcHV0ZWQgdmFsdWVzXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKSdcbiAgfVxufTtcbnZhciBUZXh0YXJlYUF1dG9zaXplID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVGV4dGFyZWFBdXRvc2l6ZShwcm9wcywgcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgcm93cyA9IHByb3BzLnJvd3MsXG4gICAgICByb3dzTWF4ID0gcHJvcHMucm93c01heCxcbiAgICAgIF9wcm9wcyRyb3dzTWluID0gcHJvcHMucm93c01pbixcbiAgICAgIHJvd3NNaW5Qcm9wID0gX3Byb3BzJHJvd3NNaW4gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkcm93c01pbixcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIm9uQ2hhbmdlXCIsIFwicm93c1wiLCBcInJvd3NNYXhcIiwgXCJyb3dzTWluXCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIHJvd3NNaW4gPSByb3dzIHx8IHJvd3NNaW5Qcm9wO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZik7XG4gIHZhciBzaGFkb3dSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciByZW5kZXJzID0gUmVhY3QudXNlUmVmKDApO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh7fSksXG4gICAgICBzdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBzeW5jSGVpZ2h0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnB1dCA9IGlucHV0UmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCk7XG4gICAgdmFyIGlucHV0U2hhbGxvdyA9IHNoYWRvd1JlZi5jdXJyZW50O1xuICAgIGlucHV0U2hhbGxvdy5zdHlsZS53aWR0aCA9IGNvbXB1dGVkU3R5bGUud2lkdGg7XG4gICAgaW5wdXRTaGFsbG93LnZhbHVlID0gaW5wdXQudmFsdWUgfHwgcHJvcHMucGxhY2Vob2xkZXIgfHwgJ3gnO1xuXG4gICAgaWYgKGlucHV0U2hhbGxvdy52YWx1ZS5zbGljZSgtMSkgPT09ICdcXG4nKSB7XG4gICAgICAvLyBDZXJ0YWluIGZvbnRzIHdoaWNoIG92ZXJmbG93IHRoZSBsaW5lIGhlaWdodCB3aWxsIGNhdXNlIHRoZSB0ZXh0YXJlYVxuICAgICAgLy8gdG8gcmVwb3J0IGEgZGlmZmVyZW50IHNjcm9sbEhlaWdodCBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgbGFzdCBsaW5lXG4gICAgICAvLyBpcyBlbXB0eS4gTWFrZSBpdCBub24tZW1wdHkgdG8gYXZvaWQgdGhpcyBpc3N1ZS5cbiAgICAgIGlucHV0U2hhbGxvdy52YWx1ZSArPSAnICc7XG4gICAgfVxuXG4gICAgdmFyIGJveFNpemluZyA9IGNvbXB1dGVkU3R5bGVbJ2JveC1zaXppbmcnXTtcbiAgICB2YXIgcGFkZGluZyA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctYm90dG9tJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdwYWRkaW5nLXRvcCcpO1xuICAgIHZhciBib3JkZXIgPSBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItYm90dG9tLXdpZHRoJykgKyBnZXRTdHlsZVZhbHVlKGNvbXB1dGVkU3R5bGUsICdib3JkZXItdG9wLXdpZHRoJyk7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIGNvbnRlbnRcblxuICAgIHZhciBpbm5lckhlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQgLSBwYWRkaW5nOyAvLyBNZWFzdXJlIGhlaWdodCBvZiBhIHRleHRhcmVhIHdpdGggYSBzaW5nbGUgcm93XG5cbiAgICBpbnB1dFNoYWxsb3cudmFsdWUgPSAneCc7XG4gICAgdmFyIHNpbmdsZVJvd0hlaWdodCA9IGlucHV0U2hhbGxvdy5zY3JvbGxIZWlnaHQgLSBwYWRkaW5nOyAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBvdXRlciBjb250ZW50XG5cbiAgICB2YXIgb3V0ZXJIZWlnaHQgPSBpbm5lckhlaWdodDtcblxuICAgIGlmIChyb3dzTWluKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWF4KE51bWJlcihyb3dzTWluKSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChyb3dzTWF4KSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihyb3dzTWF4KSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7IC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG5cbiAgICB2YXIgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIHZhciBvdmVyZmxvdyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIHVwZGF0ZSB0aGUgaGVpZ2h0LlxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBpbmZpbml0ZSByZW5kZXJpbmcgbG9vcC5cbiAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPCAyMCAmJiAob3V0ZXJIZWlnaHRTdHlsZSA+IDAgJiYgTWF0aC5hYnMoKHByZXZTdGF0ZS5vdXRlckhlaWdodFN0eWxlIHx8IDApIC0gb3V0ZXJIZWlnaHRTdHlsZSkgPiAxIHx8IHByZXZTdGF0ZS5vdmVyZmxvdyAhPT0gb3ZlcmZsb3cpKSB7XG4gICAgICAgIHJlbmRlcnMuY3VycmVudCArPSAxO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG92ZXJmbG93OiBvdmVyZmxvdyxcbiAgICAgICAgICBvdXRlckhlaWdodFN0eWxlOiBvdXRlckhlaWdodFN0eWxlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChyZW5kZXJzLmN1cnJlbnQgPT09IDIwKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUb28gbWFueSByZS1yZW5kZXJzLiBUaGUgbGF5b3V0IGlzIHVuc3RhYmxlLicsICdUZXh0YXJlYUF1dG9zaXplIGxpbWl0cyB0aGUgbnVtYmVyIG9mIHJlbmRlcnMgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgIH0pO1xuICB9LCBbcm93c01heCwgcm93c01pbiwgcHJvcHMucGxhY2Vob2xkZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlUmVzaXplID0gZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgcmVuZGVycy5jdXJyZW50ID0gMDtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbc3luY0hlaWdodF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZW5kZXJzLmN1cnJlbnQgPSAwO1xuICB9LCBbdmFsdWVdKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgcmVuZGVycy5jdXJyZW50ID0gMDtcblxuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICBzeW5jSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICBvbkNoYW5nZShldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgcmVmOiBoYW5kbGVSZWYgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAsXG4gICAgcm93czogcm93c01pbixcbiAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgaGVpZ2h0OiBzdGF0ZS5vdXRlckhlaWdodFN0eWxlLFxuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbmNlIHRvIGFsbG93IHNjcm9sbGluZy5cbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AuXG4gICAgICBvdmVyZmxvdzogc3RhdGUub3ZlcmZsb3cgPyAnaGlkZGVuJyA6IG51bGxcbiAgICB9LCBzdHlsZSlcbiAgfSwgb3RoZXIpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgIHJlZjogc2hhZG93UmVmLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHN0eWxlKVxuICB9KSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRleHRhcmVhQXV0b3NpemUucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2UgYHJvd3NNaW5gIGluc3RlYWQuIFRoZSBwcm9wIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICByb3dzTWluOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzLCBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgRm9ybUNvbnRyb2xDb250ZXh0LCB7IHVzZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgVGV4dGFyZWFBdXRvc2l6ZSBmcm9tICcuLi9UZXh0YXJlYUF1dG9zaXplJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBwbGFjZWhvbGRlciA9IHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSlcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgJ0BnbG9iYWwnOiB7XG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsJzoge30sXG4gICAgICAnQGtleWZyYW1lcyBtdWktYXV0by1maWxsLWNhbmNlbCc6IHt9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe30sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGxpbmVIZWlnaHQ6ICcxLjE4NzZlbScsXG4gICAgICAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgLy8gUHJldmVudCBwYWRkaW5nIGlzc3VlIHdpdGggZnVsbFdpZHRoLlxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBjdXJzb3I6ICd0ZXh0JyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkLFxuICAgICAgICBjdXJzb3I6ICdkZWZhdWx0J1xuICAgICAgfVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGV0dGVyU3BhY2luZzogJ2luaGVyaXQnLFxuICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgaGVpZ2h0OiAnMS4xODc2ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAvLyBNYWtlIHRoZSBmbGV4IGl0ZW0gc2hyaW5rIHdpdGggRmlyZWZveFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRml4IElFIDExIHdpZHRoIGlzc3VlXG4gICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbC1jYW5jZWwnLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246ICcxMG1zJyxcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gSUUgMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9LFxuICAgICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgICAnJjppbnZhbGlkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgICAnbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYnOiB7XG4gICAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDEgLy8gUmVzZXQgaU9TIG9wYWNpdHlcblxuICAgICAgfSxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAnNTAwMHMnLFxuICAgICAgICBhbmltYXRpb25OYW1lOiAnbXVpLWF1dG8tZmlsbCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogNCAtIDFcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHtcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7XG4gICAgICAvLyBJbXByb3ZlIHR5cGUgc2VhcmNoIHN0eWxlLlxuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnLFxuICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICd0ZXh0ZmllbGQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGlucHV0QWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBoaWRkZW5MYWJlbD17dHJ1ZX1gLiAqL1xuICAgIGlucHV0SGlkZGVuTGFiZWw6IHt9XG4gIH07XG59O1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VFZmZlY3QgOiBSZWFjdC51c2VMYXlvdXRFZmZlY3Q7XG4vKipcbiAqIGBJbnB1dEJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhbiBpbnB1dC5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBzdGF0ZSBsb2dpYy5cbiAqL1xuXG52YXIgSW5wdXRCYXNlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFEZXNjcmliZWRieSA9IHByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgICBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZW5kQWRvcm5tZW50ID0gcHJvcHMuZW5kQWRvcm5tZW50LFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIGlucHV0UHJvcHNQcm9wID0gX3Byb3BzJGlucHV0UHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJGlucHV0UHJvcHMsXG4gICAgICBpbnB1dFJlZlByb3AgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQmx1ciA9IHByb3BzLm9uQmx1cixcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICBvbkNsaWNrID0gcHJvcHMub25DbGljayxcbiAgICAgIG9uRm9jdXMgPSBwcm9wcy5vbkZvY3VzLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgb25LZXlVcCA9IHByb3BzLm9uS2V5VXAsXG4gICAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgcmVhZE9ubHkgPSBwcm9wcy5yZWFkT25seSxcbiAgICAgIHJlbmRlclN1ZmZpeCA9IHByb3BzLnJlbmRlclN1ZmZpeCxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICByb3dzTWluID0gcHJvcHMucm93c01pbixcbiAgICAgIHN0YXJ0QWRvcm5tZW50ID0gcHJvcHMuc3RhcnRBZG9ybm1lbnQsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgdmFsdWVQcm9wID0gcHJvcHMudmFsdWUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYXJpYS1kZXNjcmliZWRieVwiLCBcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZW5kQWRvcm5tZW50XCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJpZFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibWFyZ2luXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwicm93c01pblwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcblxuICB2YXIgdmFsdWUgPSBpbnB1dFByb3BzUHJvcC52YWx1ZSAhPSBudWxsID8gaW5wdXRQcm9wc1Byb3AudmFsdWUgOiB2YWx1ZVByb3A7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZldhcm5pbmcgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLm5vZGVOYW1lICE9PSAnSU5QVVQnICYmICFpbnN0YW5jZS5mb2N1cykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGEgYGlucHV0Q29tcG9uZW50YCB0byB0aGUgaW5wdXQgY29tcG9uZW50JywgJ3RoYXQgZG9lcyBub3QgY29ycmVjdGx5IGhhbmRsZSB0aGUgYGlucHV0UmVmYCBwcm9wLicsICdNYWtlIHN1cmUgdGhlIGBpbnB1dFJlZmAgcHJvcCBpcyBjYWxsZWQgd2l0aCBhIEhUTUxJbnB1dEVsZW1lbnQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlSW5wdXRQcm9wc1JlZlByb3AgPSB1c2VGb3JrUmVmKGlucHV0UHJvcHNQcm9wLnJlZiwgaGFuZGxlSW5wdXRSZWZXYXJuaW5nKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRSZWZQcm9wLCBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCk7XG4gIHZhciBoYW5kbGVJbnB1dFJlZiA9IHVzZUZvcmtSZWYoaW5wdXRSZWYsIGhhbmRsZUlucHV0UmVmUHJvcCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c2VkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICAgIHJldHVybiBtdWlGb3JtQ29udHJvbC5yZWdpc3RlckVmZmVjdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sIFttdWlGb3JtQ29udHJvbF0pO1xuICB9XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2hpZGRlbkxhYmVsJywgJ21hcmdpbicsICdyZXF1aXJlZCcsICdmaWxsZWQnXVxuICB9KTtcbiAgZmNzLmZvY3VzZWQgPSBtdWlGb3JtQ29udHJvbCA/IG11aUZvcm1Db250cm9sLmZvY3VzZWQgOiBmb2N1c2VkOyAvLyBUaGUgYmx1ciB3b24ndCBmaXJlIHdoZW4gdGhlIGRpc2FibGVkIHN0YXRlIGlzIHNldCBvbiBhIGZvY3VzZWQgaW5wdXQuXG4gIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFtdWlGb3JtQ29udHJvbCAmJiBkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcblxuICAgICAgaWYgKG9uQmx1cikge1xuICAgICAgICBvbkJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttdWlGb3JtQ29udHJvbCwgZGlzYWJsZWQsIGZvY3VzZWQsIG9uQmx1cl0pO1xuICB2YXIgb25GaWxsZWQgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZpbGxlZDtcbiAgdmFyIG9uRW1wdHkgPSBtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkVtcHR5O1xuICB2YXIgY2hlY2tEaXJ0eSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAoaXNGaWxsZWQob2JqKSkge1xuICAgICAgaWYgKG9uRmlsbGVkKSB7XG4gICAgICAgIG9uRmlsbGVkKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbkVtcHR5KSB7XG4gICAgICBvbkVtcHR5KCk7XG4gICAgfVxuICB9LCBbb25GaWxsZWQsIG9uRW1wdHldKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0NvbnRyb2xsZWQpIHtcbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3ZhbHVlLCBjaGVja0RpcnR5LCBpc0NvbnRyb2xsZWRdKTtcblxuICB2YXIgaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiBoYW5kbGVGb2N1cyhldmVudCkge1xuICAgIC8vIEZpeCBhIGJ1ZyB3aXRoIElFIDExIHdoZXJlIHRoZSBmb2N1cy9ibHVyIGV2ZW50cyBhcmUgdHJpZ2dlcmVkXG4gICAgLy8gd2hpbGUgdGhlIGlucHV0IGlzIGRpc2FibGVkLlxuICAgIGlmIChmY3MuZGlzYWJsZWQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRQcm9wc1Byb3Aub25Gb2N1cykge1xuICAgICAgaW5wdXRQcm9wc1Byb3Aub25Gb2N1cyhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgIG11aUZvcm1Db250cm9sLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChpbnB1dFByb3BzUHJvcC5vbkJsdXIpIHtcbiAgICAgIGlucHV0UHJvcHNQcm9wLm9uQmx1cihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQgfHwgaW5wdXRSZWYuY3VycmVudDtcblxuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogRXhwZWN0ZWQgdmFsaWQgaW5wdXQgdGFyZ2V0LiBEaWQgeW91IHVzZSBhIGN1c3RvbSBgaW5wdXRDb21wb25lbnRgIGFuZCBmb3JnZXQgdG8gZm9yd2FyZCByZWZzPyBTZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxKSk7XG4gICAgICB9XG5cbiAgICAgIGNoZWNrRGlydHkoe1xuICAgICAgICB2YWx1ZTogZWxlbWVudC52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGlucHV0UHJvcHNQcm9wLm9uQ2hhbmdlKSB7XG4gICAgICBpbnB1dFByb3BzUHJvcC5vbkNoYW5nZS5hcHBseShpbnB1dFByb3BzUHJvcCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTsgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja0RpcnR5KGlucHV0UmVmLmN1cnJlbnQpO1xuICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBJbnB1dENvbXBvbmVudCA9IGlucHV0Q29tcG9uZW50O1xuXG4gIHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHNQcm9wLCB7XG4gICAgcmVmOiBoYW5kbGVJbnB1dFJlZlxuICB9KTtcblxuICBpZiAodHlwZW9mIElucHV0Q29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAvLyBSZW5hbWUgcmVmIHRvIGlucHV0UmVmIGFzIHdlIGRvbid0IGtub3cgdGhlXG4gICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgIGlucHV0UmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICByZWY6IG51bGxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChtdWx0aWxpbmUpIHtcbiAgICBpZiAocm93cyAmJiAhcm93c01heCAmJiAhcm93c01pbikge1xuICAgICAgSW5wdXRDb21wb25lbnQgPSAndGV4dGFyZWEnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3dzTWF4OiByb3dzTWF4XG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzKTtcbiAgfVxuXG4gIHZhciBoYW5kbGVBdXRvRmlsbCA9IGZ1bmN0aW9uIGhhbmRsZUF1dG9GaWxsKGV2ZW50KSB7XG4gICAgLy8gUHJvdmlkZSBhIGZha2UgdmFsdWUgYXMgQ2hyb21lIG1pZ2h0IG5vdCBsZXQgeW91IGFjY2VzcyBpdCBmb3Igc2VjdXJpdHkgcmVhc29ucy5cbiAgICBjaGVja0RpcnR5KGV2ZW50LmFuaW1hdGlvbk5hbWUgPT09ICdtdWktYXV0by1maWxsLWNhbmNlbCcgPyBpbnB1dFJlZi5jdXJyZW50IDoge1xuICAgICAgdmFsdWU6ICd4J1xuICAgIH0pO1xuICB9O1xuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG11aUZvcm1Db250cm9sKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5zZXRBZG9ybmVkU3RhcnQoQm9vbGVhbihzdGFydEFkb3JubWVudCkpO1xuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBzdGFydEFkb3JubWVudF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGZjcy5jb2xvciB8fCAncHJpbWFyeScpKV0sIGNsYXNzTmFtZSwgZmNzLmRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5lcnJvciAmJiBjbGFzc2VzLmVycm9yLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgbXVpRm9ybUNvbnRyb2wgJiYgY2xhc3Nlcy5mb3JtQ29udHJvbCwgbXVsdGlsaW5lICYmIGNsYXNzZXMubXVsdGlsaW5lLCBzdGFydEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuYWRvcm5lZEVuZCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlKSxcbiAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIHN0YXJ0QWRvcm5tZW50LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1pbnZhbGlkXCI6IGZjcy5lcnJvcixcbiAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogYXJpYURlc2NyaWJlZGJ5LFxuICAgIGF1dG9Db21wbGV0ZTogYXV0b0NvbXBsZXRlLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIGRpc2FibGVkOiBmY3MuZGlzYWJsZWQsXG4gICAgaWQ6IGlkLFxuICAgIG9uQW5pbWF0aW9uU3RhcnQ6IGhhbmRsZUF1dG9GaWxsLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgIHJvd3M6IHJvd3MsXG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgIG9uS2V5VXA6IG9uS2V5VXBcbiAgfSwgaW5wdXRQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmlucHV0LCBpbnB1dFByb3BzUHJvcC5jbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5pbnB1dE11bHRpbGluZSwgZmNzLmhpZGRlbkxhYmVsICYmIGNsYXNzZXMuaW5wdXRIaWRkZW5MYWJlbCwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5pbnB1dEFkb3JuZWRTdGFydCwgZW5kQWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkRW5kLCB0eXBlID09PSAnc2VhcmNoJyAmJiBjbGFzc2VzLmlucHV0VHlwZVNlYXJjaCwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLmlucHV0TWFyZ2luRGVuc2UpLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzXG4gIH0pKSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICBzdGFydEFkb3JubWVudDogc3RhcnRBZG9ybm1lbnRcbiAgfSkpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgaW5wdXQgaXMgYmx1cnJlZC5cbiAgICpcbiAgICogTm90aWNlIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IChldmVudCkgbWlnaHQgYmUgdW5kZWZpbmVkLlxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyU3VmZml4OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01pbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoSW5wdXRCYXNlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dEJhc2UgZnJvbSAnLi4vSW5wdXRCYXNlJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgICdsYWJlbCArICYnOiB7XG4gICAgICAgIG1hcmdpblRvcDogMTZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgY29sb3Igc2Vjb25kYXJ5LiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICAnJiR1bmRlcmxpbmU6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVVbmRlcmxpbmU9e2ZhbHNlfWAuICovXG4gICAgdW5kZXJsaW5lOiB7XG4gICAgICAnJjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjJweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4pLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDApJyxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsXG4gICAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQ6YWZ0ZXInOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvcjphZnRlcic6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJyAvLyBlcnJvciBpcyBhbHdheXMgdW5kZXJsaW5lZCBpbiByZWRcblxuICAgICAgfSxcbiAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXFxcXDAwYTBcIicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdib3JkZXItYm90dG9tLWNvbG9yJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiAnZG90dGVkJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGU9XCJzZWFyY2hcImAuICovXG4gICAgaW5wdXRUeXBlU2VhcmNoOiB7fVxuICB9O1xufTtcbnZhciBJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIElucHV0KHByb3BzLCByZWYpIHtcbiAgdmFyIGRpc2FibGVVbmRlcmxpbmUgPSBwcm9wcy5kaXNhYmxlVW5kZXJsaW5lLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImRpc2FibGVVbmRlcmxpbmVcIiwgXCJjbGFzc2VzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaW5wdXRDb21wb25lbnRcIiwgXCJtdWx0aWxpbmVcIiwgXCJ0eXBlXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXRCYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCAhZGlzYWJsZVVuZGVybGluZSAmJiBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICB1bmRlcmxpbmU6IG51bGxcbiAgICB9KSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBpbnB1dENvbXBvbmVudDogaW5wdXRDb21wb25lbnQsXG4gICAgbXVsdGlsaW5lOiBtdWx0aWxpbmUsXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGlzIHByb3AgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgW2ZvbGxvd2luZyB0aGUgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGwpLlxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBub3QgaGF2ZSBhbiB1bmRlcmxpbmUuXG4gICAqL1xuICBkaXNhYmxlVW5kZXJsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFtBdHRyaWJ1dGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjQXR0cmlidXRlcykgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUGFzcyBhIHJlZiB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbklucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0J1xufSkoSW5wdXQpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IElucHV0QmFzZSBmcm9tICcuLi9JbnB1dEJhc2UnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgYm90dG9tTGluZUNvbG9yID0gbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjQyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJztcbiAgdmFyIGJhY2tncm91bmRDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wOSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JhY2tncm91bmQtY29sb3InLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4xMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMyknLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjA5KScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA5KSdcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGNvbG9yIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkdW5kZXJsaW5lOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlVW5kZXJsaW5lPXtmYWxzZX1gLiAqL1xuICAgIHVuZGVybGluZToge1xuICAgICAgJyY6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIycHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkOmFmdGVyJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3I6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvciksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnkpXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQ6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b21TdHlsZTogJ2RvdHRlZCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAxMlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMTJcbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6ICcyN3B4IDEycHggMTBweCcsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgcGFkZGluZzogJzI3cHggMTJweCAxMHB4JyxcbiAgICAgICcmOi13ZWJraXQtYXV0b2ZpbGwnOiB7XG4gICAgICAgIFdlYmtpdEJveFNoYWRvdzogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcwIDAgMCAxMDBweCAjMjY2Nzk4IGluc2V0JyxcbiAgICAgICAgV2Via2l0VGV4dEZpbGxDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICAgICAgY2FyZXRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gbnVsbCA6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ2luaGVyaXQnLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDIzLFxuICAgICAgcGFkZGluZ0JvdHRvbTogNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBpZiBpbiBgPEZvcm1Db250cm9sIGhpZGRlbkxhYmVsIC8+YC4gKi9cbiAgICBpbnB1dEhpZGRlbkxhYmVsOiB7XG4gICAgICBwYWRkaW5nVG9wOiAxOCxcbiAgICAgIHBhZGRpbmdCb3R0b206IDE5LFxuICAgICAgJyYkaW5wdXRNYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogMTAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDExXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgRmlsbGVkSW5wdXQgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGaWxsZWRJbnB1dChwcm9wcywgcmVmKSB7XG4gIHZhciBkaXNhYmxlVW5kZXJsaW5lID0gcHJvcHMuZGlzYWJsZVVuZGVybGluZSxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRpbnB1dENvbXBvbmVudCA9IHByb3BzLmlucHV0Q29tcG9uZW50LFxuICAgICAgaW5wdXRDb21wb25lbnQgPSBfcHJvcHMkaW5wdXRDb21wb25lbnQgPT09IHZvaWQgMCA/ICdpbnB1dCcgOiBfcHJvcHMkaW5wdXRDb21wb25lbnQsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAndGV4dCcgOiBfcHJvcHMkdHlwZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibXVsdGlsaW5lXCIsIFwidHlwZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0QmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzZXM6IF9leHRlbmRzKHt9LCBjbGFzc2VzLCB7XG4gICAgICByb290OiBjbHN4KGNsYXNzZXMucm9vdCwgIWRpc2FibGVVbmRlcmxpbmUgJiYgY2xhc3Nlcy51bmRlcmxpbmUpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSksXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaW5wdXRDb21wb25lbnQ6IGlucHV0Q29tcG9uZW50LFxuICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGVcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRmlsbGVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgbm90IGhhdmUgYW4gdW5kZXJsaW5lLlxuICAgKi9cbiAgZGlzYWJsZVVuZGVybGluZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5GaWxsZWRJbnB1dC5tdWlOYW1lID0gJ0lucHV0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbn0pKEZpbGxlZElucHV0KTsiLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWVXaXRob3V0RGVmYXVsdCgpIHx8IGRlZmF1bHRUaGVtZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUodGhlbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IC01LFxuICAgICAgbGVmdDogMCxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgYm9yZGVyV2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50IHdoZW4gYGxhYmVsV2lkdGhgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGxlZ2VuZDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbGluZUhlaWdodDogJzExcHgnLFxuICAgICAgLy8gc3luYyB3aXRoIGBoZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcsIHtcbiAgICAgICAgZHVyYXRpb246IDE1MCxcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGxlZ2VuZCBlbGVtZW50LiAqL1xuICAgIGxlZ2VuZExhYmVsbGVkOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGhlaWdodDogMTEsXG4gICAgICAvLyBzeW5jIHdpdGggYGxpbmVIZWlnaHRgIGluIGBsZWdlbmRgIHN0eWxlc1xuICAgICAgZm9udFNpemU6ICcwLjc1ZW0nLFxuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgICBtYXhXaWR0aDogMC4wMSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogNTAsXG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgIH0pLFxuICAgICAgJyYgPiBzcGFuJzoge1xuICAgICAgICBwYWRkaW5nTGVmdDogNSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiA1LFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGVnZW5kIGVsZW1lbnQgaXMgbm90Y2hlZC4gKi9cbiAgICBsZWdlbmROb3RjaGVkOiB7XG4gICAgICBtYXhXaWR0aDogMTAwMCxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnbWF4LXdpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0LFxuICAgICAgICBkZWxheTogNTBcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgTm90Y2hlZE91dGxpbmUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOb3RjaGVkT3V0bGluZShwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgbGFiZWxXaWR0aFByb3AgPSBwcm9wcy5sYWJlbFdpZHRoLFxuICAgICAgbm90Y2hlZCA9IHByb3BzLm5vdGNoZWQsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImxhYmVsXCIsIFwibGFiZWxXaWR0aFwiLCBcIm5vdGNoZWRcIiwgXCJzdHlsZVwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgaWYgKGxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiLCBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgcmVmOiByZWYsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwibGVnZW5kXCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxlZ2VuZExhYmVsbGVkLCBub3RjaGVkICYmIGNsYXNzZXMubGVnZW5kTm90Y2hlZClcbiAgICB9LCBsYWJlbCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBsYWJlbCkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9XG5cbiAgdmFyIGxhYmVsV2lkdGggPSBsYWJlbFdpZHRoUHJvcCA+IDAgPyBsYWJlbFdpZHRoUHJvcCAqIDAuNzUgKyA4IDogMC4wMTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIiwgX2V4dGVuZHMoe1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBzdHlsZTogX2V4dGVuZHMoX2RlZmluZVByb3BlcnR5KHt9LCBcInBhZGRpbmdcIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpLCA4KSwgc3R5bGUpLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxlZ2VuZCxcbiAgICBzdHlsZToge1xuICAgICAgLy8gSUUgMTE6IGZpZWxkc2V0IHdpdGggbGVnZW5kIGRvZXMgbm90IHJlbmRlclxuICAgICAgLy8gYSBib3JkZXIgcmFkaXVzLiBUaGlzIG1haW50YWlucyBjb25zaXN0ZW5jeVxuICAgICAgLy8gYnkgYWx3YXlzIGhhdmluZyBhIGxlZ2VuZCByZW5kZXJlZFxuICAgICAgd2lkdGg6IG5vdGNoZWQgPyBsYWJlbFdpZHRoIDogMC4wMVxuICAgIH1cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5vdGNoZWRPdXRsaW5lLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbGFiZWwuXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG91dGxpbmUgaXMgbm90Y2hlZCB0byBhY2NvbW1vZGF0ZSB0aGUgbGFiZWwuXG4gICAqL1xuICBub3RjaGVkOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdQcml2YXRlTm90Y2hlZE91dGxpbmUnXG59KShOb3RjaGVkT3V0bGluZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJy4uL0lucHV0QmFzZSc7XG5pbXBvcnQgTm90Y2hlZE91dGxpbmUgZnJvbSAnLi9Ob3RjaGVkT3V0bGluZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgJyY6aG92ZXIgJG5vdGNoZWRPdXRsaW5lJzoge1xuICAgICAgICBib3JkZXJDb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICAgIH0sXG4gICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAnJjpob3ZlciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgICBib3JkZXJXaWR0aDogMlxuICAgICAgfSxcbiAgICAgICcmJGVycm9yICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7XG4gICAgICBwYWRkaW5nTGVmdDogMTRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBhZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAnMTguNXB4IDE0cHgnLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEwLjVcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBOb3RjaGVkT3V0bGluZWAgZWxlbWVudC4gKi9cbiAgICBub3RjaGVkT3V0bGluZToge1xuICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBhZGRpbmc6ICcxOC41cHggMTRweCcsXG4gICAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgICBXZWJraXRCb3hTaGFkb3c6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnMCAwIDAgMTAwcHggIzI2Njc5OCBpbnNldCcsXG4gICAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgICAgIGNhcmV0Q29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IG51bGwgOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDEwLjUsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxMC41XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHN0YXJ0QWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMFxuICAgIH1cbiAgfTtcbn07XG52YXIgT3V0bGluZWRJbnB1dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE91dGxpbmVkSW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBfcHJvcHMkZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgZnVsbFdpZHRoID0gX3Byb3BzJGZ1bGxXaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZnVsbFdpZHRoLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBfcHJvcHMkbGFiZWxXaWR0aCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBsYWJlbFdpZHRoID0gX3Byb3BzJGxhYmVsV2lkdGggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkbGFiZWxXaWR0aCxcbiAgICAgIF9wcm9wcyRtdWx0aWxpbmUgPSBwcm9wcy5tdWx0aWxpbmUsXG4gICAgICBtdWx0aWxpbmUgPSBfcHJvcHMkbXVsdGlsaW5lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRtdWx0aWxpbmUsXG4gICAgICBub3RjaGVkID0gcHJvcHMubm90Y2hlZCxcbiAgICAgIF9wcm9wcyR0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHR5cGUgPSBfcHJvcHMkdHlwZSA9PT0gdm9pZCAwID8gJ3RleHQnIDogX3Byb3BzJHR5cGUsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImZ1bGxXaWR0aFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwibGFiZWxcIiwgXCJsYWJlbFdpZHRoXCIsIFwibXVsdGlsaW5lXCIsIFwibm90Y2hlZFwiLCBcInR5cGVcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dEJhc2UsIF9leHRlbmRzKHtcbiAgICByZW5kZXJTdWZmaXg6IGZ1bmN0aW9uIHJlbmRlclN1ZmZpeChzdGF0ZSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5vdGNoZWRPdXRsaW5lLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5ub3RjaGVkT3V0bGluZSxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoLFxuICAgICAgICBub3RjaGVkOiB0eXBlb2Ygbm90Y2hlZCAhPT0gJ3VuZGVmaW5lZCcgPyBub3RjaGVkIDogQm9vbGVhbihzdGF0ZS5zdGFydEFkb3JubWVudCB8fCBzdGF0ZS5maWxsZWQgfHwgc3RhdGUuZm9jdXNlZClcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xhc3NlczogX2V4dGVuZHMoe30sIGNsYXNzZXMsIHtcbiAgICAgIHJvb3Q6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLnVuZGVybGluZSksXG4gICAgICBub3RjaGVkT3V0bGluZTogbnVsbFxuICAgIH0pLFxuICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICByZWY6IHJlZixcbiAgICB0eXBlOiB0eXBlXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE91dGxpbmVkSW5wdXQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGBpbnB1dGAgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFBhc3MgYSByZWYgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UmVmOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWwgb2YgdGhlIGlucHV0LiBJdCBpcyBvbmx5IHVzZWQgZm9yIGxheW91dC4gVGhlIGFjdHVhbCBsYWJlbGxpbmdcbiAgICogaXMgaGFuZGxlZCBieSBgSW5wdXRMYWJlbGAuIElmIHNwZWNpZmllZCBgbGFiZWxXaWR0aGAgaXMgaWdub3JlZC5cbiAgICovXG4gIGxhYmVsOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsYWJlbC4gSXMgaWdub3JlZCBpZiBgbGFiZWxgIGlzIHByb3ZpZGVkLiBQcmVmZXIgYGxhYmVsYFxuICAgKiBpZiB0aGUgaW5wdXQgbGFiZWwgYXBwZWFycyB3aXRoIGEgc3RyaWtlIHRocm91Z2guXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKHN0cmluZykuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbk91dGxpbmVkSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpT3V0bGluZWRJbnB1dCdcbn0pKE91dGxpbmVkSW5wdXQpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogX2V4dGVuZHMoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLCB7XG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbG9yIGlzIHNlY29uZGFyeS4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9jdXNlZD17dHJ1ZX1gLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpbGxlZD17dHJ1ZX1gLiAqL1xuICAgIGZpbGxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBhc3RlcmlzayBlbGVtZW50LiAqL1xuICAgIGFzdGVyaXNrOiB7XG4gICAgICAnJiRlcnJvcic6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgRm9ybUxhYmVsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRm9ybUxhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2xhYmVsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwicmVxdWlyZWRcIl0pO1xuXG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IHVzZUZvcm1Db250cm9sKCk7XG4gIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgbXVpRm9ybUNvbnRyb2w6IG11aUZvcm1Db250cm9sLFxuICAgIHN0YXRlczogWydjb2xvcicsICdyZXF1aXJlZCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCddXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoZmNzLmNvbG9yIHx8ICdwcmltYXJ5JykpXSwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIGZjcy5yZXF1aXJlZCAmJiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5hc3RlcmlzaywgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IpXG4gIH0sIFwiXFx1MjAwOVwiLCAnKicpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRm9ybUxhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCB1c2UgZmlsbGVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgZmlsbGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkICh1c2VkIGJ5IGBGb3JtR3JvdXBgIGNvbXBvbmVudHMpLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJ1xufSkoRm9ybUxhYmVsKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgRm9ybUxhYmVsIGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb2N1c2VkPXt0cnVlfWAuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgYXN0ZXJpc2sgZWxlbWVudC4gKi9cbiAgICBhc3Rlcmlzazoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGBGb3JtQ29udHJvbGAuICovXG4gICAgZm9ybUNvbnRyb2w6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIC8vIHNsaWdodCBhbHRlcmF0aW9uIHRvIHNwZWMgc3BhY2luZyB0byBtYXRjaCB2aXN1YWwgc3BlYyByZXN1bHRcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyNHB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgbWFyZ2luRGVuc2U6IHtcbiAgICAgIC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIGBJbnB1dC5pbnB1dERlbnNlYCBzdHlsZS5cbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAyMXB4KSBzY2FsZSgxKSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgc2hyaW5rPXt0cnVlfWAuICovXG4gICAgc2hyaW5rOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMCwgMS41cHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ3RvcCBsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBkaXNhYmxlQW5pbWF0aW9uPXtmYWxzZX1gLiAqL1xuICAgIGFuaW1hdGVkOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydjb2xvcicsICd0cmFuc2Zvcm0nXSwge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgIC8vIENocm9tZSdzIGF1dG9maWxsIGZlYXR1cmUgZ2l2ZXMgdGhlIGlucHV0IGZpZWxkIGEgeWVsbG93IGJhY2tncm91bmQuXG4gICAgICAvLyBTaW5jZSB0aGUgaW5wdXQgZmllbGQgaXMgYmVoaW5kIHRoZSBsYWJlbCBpbiB0aGUgSFRNTCB0cmVlLFxuICAgICAgLy8gdGhlIGlucHV0IGZpZWxkIGlzIGRyYXduIGxhc3QgYW5kIGhpZGVzIHRoZSBsYWJlbCB3aXRoIGFuIG9wYXF1ZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgICAgLy8gekluZGV4OiAxIHdpbGwgcmFpc2UgdGhlIGxhYmVsIGFib3ZlIG9wYXF1ZSBiYWNrZ3JvdW5kLWNvbG9ycyBvZiBpbnB1dC5cbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxMnB4LCAyMHB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDE3cHgpIHNjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJHNocmluayc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDEwcHgpIHNjYWxlKDAuNzUpJyxcbiAgICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDdweCkgc2NhbGUoMC43NSknXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICAvLyBzZWUgY29tbWVudCBhYm92ZSBvbiBmaWxsZWQuekluZGV4XG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgMjBweCkgc2NhbGUoMSknLFxuICAgICAgJyYkbWFyZ2luRGVuc2UnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAxMnB4KSBzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnJiRzaHJpbmsnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAtNnB4KSBzY2FsZSgwLjc1KSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIElucHV0TGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBJbnB1dExhYmVsKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVBbmltYXRpID0gcHJvcHMuZGlzYWJsZUFuaW1hdGlvbixcbiAgICAgIGRpc2FibGVBbmltYXRpb24gPSBfcHJvcHMkZGlzYWJsZUFuaW1hdGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBbmltYXRpLFxuICAgICAgbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgc2hyaW5rUHJvcCA9IHByb3BzLnNocmluayxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlQW5pbWF0aW9uXCIsIFwibWFyZ2luXCIsIFwic2hyaW5rXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIHNocmluayA9IHNocmlua1Byb3A7XG5cbiAgaWYgKHR5cGVvZiBzaHJpbmsgPT09ICd1bmRlZmluZWQnICYmIG11aUZvcm1Db250cm9sKSB7XG4gICAgc2hyaW5rID0gbXVpRm9ybUNvbnRyb2wuZmlsbGVkIHx8IG11aUZvcm1Db250cm9sLmZvY3VzZWQgfHwgbXVpRm9ybUNvbnRyb2wuYWRvcm5lZFN0YXJ0O1xuICB9XG5cbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ21hcmdpbicsICd2YXJpYW50J11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtTGFiZWwsIF9leHRlbmRzKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIG11aUZvcm1Db250cm9sICYmIGNsYXNzZXMuZm9ybUNvbnRyb2wsICFkaXNhYmxlQW5pbWF0aW9uICYmIGNsYXNzZXMuYW5pbWF0ZWQsIHNocmluayAmJiBjbGFzc2VzLnNocmluaywgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyAmJiBjbGFzc2VzLm1hcmdpbkRlbnNlLCB7XG4gICAgICAnZmlsbGVkJzogY2xhc3Nlcy5maWxsZWQsXG4gICAgICAnb3V0bGluZWQnOiBjbGFzc2VzLm91dGxpbmVkXG4gICAgfVtmY3MudmFyaWFudF0pLFxuICAgIGNsYXNzZXM6IHtcbiAgICAgIGZvY3VzZWQ6IGNsYXNzZXMuZm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkLFxuICAgICAgZXJyb3I6IGNsYXNzZXMuZXJyb3IsXG4gICAgICByZXF1aXJlZDogY2xhc3Nlcy5yZXF1aXJlZCxcbiAgICAgIGFzdGVyaXNrOiBjbGFzc2VzLmFzdGVyaXNrXG4gICAgfSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbnB1dExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVBbmltYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGFwcGx5IGRpc2FibGVkIGNsYXNzLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgb2YgdGhpcyBsYWJlbCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnXSksXG5cbiAgLyoqXG4gICAqIGlmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIGlzIHNocnVuay5cbiAgICovXG4gIHNocmluazogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJbnB1dExhYmVsJ1xufSkoSW5wdXRMYWJlbCk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNdWlFbGVtZW50KGVsZW1lbnQsIG11aU5hbWVzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGlzRmlsbGVkLCBpc0Fkb3JuZWRTdGFydCB9IGZyb20gJy4uL0lucHV0QmFzZS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBpc011aUVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvaXNNdWlFbGVtZW50JztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQgZnJvbSAnLi9Gb3JtQ29udHJvbENvbnRleHQnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIC8vIFJlc2V0IGZpZWxkc2V0IGRlZmF1bHQgc3R5bGUuXG4gICAgbWluV2lkdGg6IDAsXG4gICAgcGFkZGluZzogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgYm9yZGVyOiAwLFxuICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnIC8vIEZpeCBhbGlnbm1lbnQgaXNzdWUgb24gU2FmYXJpLlxuXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwibm9ybWFsXCJgLiAqL1xuICBtYXJnaW5Ob3JtYWw6IHtcbiAgICBtYXJnaW5Ub3A6IDE2LFxuICAgIG1hcmdpbkJvdHRvbTogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICBtYXJnaW5EZW5zZToge1xuICAgIG1hcmdpblRvcDogOCxcbiAgICBtYXJnaW5Cb3R0b206IDRcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgZnVsbFdpZHRoOiB7XG4gICAgd2lkdGg6ICcxMDAlJ1xuICB9XG59O1xuLyoqXG4gKiBQcm92aWRlcyBjb250ZXh0IHN1Y2ggYXMgZmlsbGVkL2ZvY3VzZWQvZXJyb3IvcmVxdWlyZWQgZm9yIGZvcm0gaW5wdXRzLlxuICogUmVseWluZyBvbiB0aGUgY29udGV4dCBwcm92aWRlcyBoaWdoIGZsZXhpYmlsaXR5IGFuZCBlbnN1cmVzIHRoYXQgdGhlIHN0YXRlIGFsd2F5cyBzdGF5c1xuICogY29uc2lzdGVudCBhY3Jvc3MgdGhlIGNoaWxkcmVuIG9mIHRoZSBgRm9ybUNvbnRyb2xgLlxuICogVGhpcyBjb250ZXh0IGlzIHVzZWQgYnkgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOlxuICpcbiAqICAtIEZvcm1MYWJlbFxuICogIC0gRm9ybUhlbHBlclRleHRcbiAqICAtIElucHV0XG4gKiAgLSBJbnB1dExhYmVsXG4gKlxuICogWW91IGNhbiBmaW5kIG9uZSBjb21wb3NpdGlvbiBleGFtcGxlIGJlbG93IGFuZCBtb3JlIGdvaW5nIHRvIFt0aGUgZGVtb3NdKC9jb21wb25lbnRzL3RleHQtZmllbGRzLyNjb21wb25lbnRzKS5cbiAqXG4gKiBgYGBqc3hcbiAqIDxGb3JtQ29udHJvbD5cbiAqICAgPElucHV0TGFiZWwgaHRtbEZvcj1cIm15LWlucHV0XCI+RW1haWwgYWRkcmVzczwvSW5wdXRMYWJlbD5cbiAqICAgPElucHV0IGlkPVwibXktaW5wdXRcIiBhcmlhLWRlc2NyaWJlZGJ5PVwibXktaGVscGVyLXRleHRcIiAvPlxuICogICA8Rm9ybUhlbHBlclRleHQgaWQ9XCJteS1oZWxwZXItdGV4dFwiPldlJ2xsIG5ldmVyIHNoYXJlIHlvdXIgZW1haWwuPC9Gb3JtSGVscGVyVGV4dD5cbiAqIDwvRm9ybUNvbnRyb2w+XG4gKiBgYGBcbiAqXG4gKiDimqDvuI9Pbmx5IG9uZSBpbnB1dCBjYW4gYmUgdXNlZCB3aXRoaW4gYSBGb3JtQ29udHJvbC5cbiAqL1xuXG52YXIgRm9ybUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBGb3JtQ29udHJvbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAncHJpbWFyeScgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGVycm9yID0gX3Byb3BzJGVycm9yID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICB2aXN1YWxseUZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgX3Byb3BzJGhpZGRlbkxhYmVsID0gcHJvcHMuaGlkZGVuTGFiZWwsXG4gICAgICBoaWRkZW5MYWJlbCA9IF9wcm9wcyRoaWRkZW5MYWJlbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaGlkZGVuTGFiZWwsXG4gICAgICBfcHJvcHMkbWFyZ2luID0gcHJvcHMubWFyZ2luLFxuICAgICAgbWFyZ2luID0gX3Byb3BzJG1hcmdpbiA9PT0gdm9pZCAwID8gJ25vbmUnIDogX3Byb3BzJG1hcmdpbixcbiAgICAgIF9wcm9wcyRyZXF1aXJlZCA9IHByb3BzLnJlcXVpcmVkLFxuICAgICAgcmVxdWlyZWQgPSBfcHJvcHMkcmVxdWlyZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHJlcXVpcmVkLFxuICAgICAgc2l6ZSA9IHByb3BzLnNpemUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJmb2N1c2VkXCIsIFwiaGlkZGVuTGFiZWxcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInNpemVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZnVuY3Rpb24gKCkge1xuICAgIC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICB2YXIgaW5pdGlhbEFkb3JuZWRTdGFydCA9IGZhbHNlO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFpc011aUVsZW1lbnQoY2hpbGQsIFsnSW5wdXQnLCAnU2VsZWN0J10pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gaXNNdWlFbGVtZW50KGNoaWxkLCBbJ1NlbGVjdCddKSA/IGNoaWxkLnByb3BzLmlucHV0IDogY2hpbGQ7XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIGlzQWRvcm5lZFN0YXJ0KGlucHV0LnByb3BzKSkge1xuICAgICAgICAgIGluaXRpYWxBZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5pdGlhbEFkb3JuZWRTdGFydDtcbiAgfSksXG4gICAgICBhZG9ybmVkU3RhcnQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRBZG9ybmVkU3RhcnQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNoaWxkcmVuIGFuZCBmaW5kIHRoZSBJbnB1dCBpbiBvcmRlclxuICAgIC8vIHRvIGZ1bGx5IHN1cHBvcnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIHZhciBpbml0aWFsRmlsbGVkID0gZmFsc2U7XG5cbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIWlzTXVpRWxlbWVudChjaGlsZCwgWydJbnB1dCcsICdTZWxlY3QnXSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGaWxsZWQoY2hpbGQucHJvcHMsIHRydWUpKSB7XG4gICAgICAgICAgaW5pdGlhbEZpbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBpbml0aWFsRmlsbGVkO1xuICB9KSxcbiAgICAgIGZpbGxlZCA9IF9SZWFjdCR1c2VTdGF0ZTJbMF0sXG4gICAgICBzZXRGaWxsZWQgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgX2ZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0Rm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZTNbMV07XG5cbiAgdmFyIGZvY3VzZWQgPSB2aXN1YWxseUZvY3VzZWQgIT09IHVuZGVmaW5lZCA/IHZpc3VhbGx5Rm9jdXNlZCA6IF9mb2N1c2VkO1xuXG4gIGlmIChkaXNhYmxlZCAmJiBmb2N1c2VkKSB7XG4gICAgc2V0Rm9jdXNlZChmYWxzZSk7XG4gIH1cblxuICB2YXIgcmVnaXN0ZXJFZmZlY3Q7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICB2YXIgcmVnaXN0ZXJlZElucHV0ID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAgIHJlZ2lzdGVyRWZmZWN0ID0gZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoKSB7XG4gICAgICBpZiAocmVnaXN0ZXJlZElucHV0LmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGVyZSBhcmUgbXVsdGlwbGUgSW5wdXRCYXNlIGNvbXBvbmVudHMgaW5zaWRlIGEgRm9ybUNvbnRyb2wuJywgJ1RoaXMgaXMgbm90IHN1cHBvcnRlZC4gSXQgbWlnaHQgY2F1c2UgaW5maW5pdGUgcmVuZGVyaW5nIGxvb3BzLicsICdPbmx5IHVzZSBvbmUgSW5wdXRCYXNlLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVnaXN0ZXJlZElucHV0LmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBvbkZpbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBzZXRGaWxsZWQodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgdmFyIG9uRW1wdHkgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0RmlsbGVkKGZhbHNlKTtcbiAgfSwgW10pO1xuICB2YXIgY2hpbGRDb250ZXh0ID0ge1xuICAgIGFkb3JuZWRTdGFydDogYWRvcm5lZFN0YXJ0LFxuICAgIHNldEFkb3JuZWRTdGFydDogc2V0QWRvcm5lZFN0YXJ0LFxuICAgIGNvbG9yOiBjb2xvcixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgZXJyb3I6IGVycm9yLFxuICAgIGZpbGxlZDogZmlsbGVkLFxuICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGhpZGRlbkxhYmVsLFxuICAgIG1hcmdpbjogKHNpemUgPT09ICdzbWFsbCcgPyAnZGVuc2UnIDogdW5kZWZpbmVkKSB8fCBtYXJnaW4sXG4gICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9LFxuICAgIG9uRW1wdHk6IG9uRW1wdHksXG4gICAgb25GaWxsZWQ6IG9uRmlsbGVkLFxuICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgICBzZXRGb2N1c2VkKHRydWUpO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJFZmZlY3Q6IHJlZ2lzdGVyRWZmZWN0LFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICB2YXJpYW50OiB2YXJpYW50XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2hpbGRDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgbWFyZ2luICE9PSAnbm9uZScgJiYgY2xhc3Nlc1tcIm1hcmdpblwiLmNvbmNhdChjYXBpdGFsaXplKG1hcmdpbikpXSwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEZvcm1Db250cm9sLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZm9ybSBjb250cm9sLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwsIGlucHV0IGFuZCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlIGRpc3BsYXllZCBpbiBmb2N1c2VkIHN0YXRlLlxuICAgKi9cbiAgZm9jdXNlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgYmUgaGlkZGVuLlxuICAgKiBUaGlzIGlzIHVzZWQgdG8gaW5jcmVhc2UgZGVuc2l0eSBmb3IgYSBgRmlsbGVkSW5wdXRgLlxuICAgKiBCZSBzdXJlIHRvIGFkZCBgYXJpYS1sYWJlbGAgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGhpZGRlbkxhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICovXG4gIG1hcmdpbjogUHJvcFR5cGVzLm9uZU9mKFsnZGVuc2UnLCAnbm9uZScsICdub3JtYWwnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSB0ZXh0IGZpZWxkLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydmaWxsZWQnLCAnb3V0bGluZWQnLCAnc3RhbmRhcmQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG59KShGb3JtQ29udHJvbCk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IGZvcm1Db250cm9sU3RhdGUgZnJvbSAnLi4vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZSc7XG5pbXBvcnQgdXNlRm9ybUNvbnRyb2wgZnJvbSAnLi4vRm9ybUNvbnRyb2wvdXNlRm9ybUNvbnRyb2wnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSwgdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLCB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIG1hcmdpblRvcDogMyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LmRpc2FibGVkXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3InOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge1xuICAgICAgbWFyZ2luVG9wOiA0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAgb3IgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IDE0LFxuICAgICAgbWFyZ2luUmlnaHQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpbGxlZD17dHJ1ZX1gLiAqL1xuICAgIGZpbGxlZDoge30sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fVxuICB9O1xufTtcbnZhciBGb3JtSGVscGVyVGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZvcm1IZWxwZXJUZXh0KHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAncCcgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnbWFyZ2luJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCAoZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnIHx8IGZjcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSAmJiBjbGFzc2VzLmNvbnRhaW5lZCwgY2xhc3NOYW1lLCBmY3MuZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZmNzLmVycm9yICYmIGNsYXNzZXMuZXJyb3IsIGZjcy5maWxsZWQgJiYgY2xhc3Nlcy5maWxsZWQsIGZjcy5mb2N1c2VkICYmIGNsYXNzZXMuZm9jdXNlZCwgZmNzLnJlcXVpcmVkICYmIGNsYXNzZXMucmVxdWlyZWQsIGZjcy5tYXJnaW4gPT09ICdkZW5zZScgJiYgY2xhc3Nlcy5tYXJnaW5EZW5zZSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbiA9PT0gJyAnID9cbiAgLyojX19QVVJFX18qL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGb3JtSGVscGVyVGV4dC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBJZiBgJyAnYCBpcyBwcm92aWRlZCwgdGhlIGNvbXBvbmVudCByZXNlcnZlcyBvbmUgbGluZSBoZWlnaHQgZm9yIGRpc3BsYXlpbmcgYSBmdXR1cmUgbWVzc2FnZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGVscGVyIHRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSBmaWxsZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmaWxsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZvY3VzZWQgY2xhc3NlcyBrZXkuXG4gICAqL1xuICBmb2N1c2VkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaGVscGVyIHRleHQgc2hvdWxkIHVzZSByZXF1aXJlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIHJlcXVpcmVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUZvcm1IZWxwZXJUZXh0J1xufSkoRm9ybUhlbHBlclRleHQpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59IiwiaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi9vd25lckRvY3VtZW50JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG93bmVyV2luZG93KG5vZGUpIHtcbiAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZ1bmMpIHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgZnVuY3Rpb24gKCkge30pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuLi91dGlscy9zZXRSZWYnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyOyAvLyAjU3RyaWN0TW9kZSByZWFkeVxuXG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShjb250YWluZXIpO1xufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogUG9ydGFscyBwcm92aWRlIGEgZmlyc3QtY2xhc3Mgd2F5IHRvIHJlbmRlciBjaGlsZHJlbiBpbnRvIGEgRE9NIG5vZGVcbiAqIHRoYXQgZXhpc3RzIG91dHNpZGUgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKi9cblxudmFyIFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgb25SZW5kZXJlZCA9IHByb3BzLm9uUmVuZGVyZWQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgbW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucmVmIDogbnVsbCwgcmVmKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0TW91bnROb2RlKGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgfSwgW2NvbnRhaW5lciwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1vdW50Tm9kZSAmJiAhZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbW91bnROb2RlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFJlZihyZWYsIG51bGwpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvblJlbmRlcmVkICYmIChtb3VudE5vZGUgfHwgZGlzYWJsZVBvcnRhbCkpIHtcbiAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICB9XG4gIH0sIFtvblJlbmRlcmVkLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcblxuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuaW5zdGFuY2VPZihSZWFjdC5Db21wb25lbnQpLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIG9uY2UgdGhlIGNoaWxkcmVuIGhhcyBiZWVuIG1vdW50ZWQgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIFRoaXMgcHJvcCB3aWxsIGJlIGRlcHJlY2F0ZWQgYW5kIHJlbW92ZWQgaW4gdjUsIHRoZSByZWYgY2FuIGJlIHVzZWQgaW5zdGVhZC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IFByb3BUeXBlcy5mdW5jXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgUG9ydGFsWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFBvcnRhbC5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwiLy8gQSBjaGFuZ2Ugb2YgdGhlIGJyb3dzZXIgem9vbSBjaGFuZ2UgdGhlIHNjcm9sbGJhciBzaXplLlxuLy8gQ3JlZGl0IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzNmZmUzYTVkODJmNmY1NjFiODJmZjc4ZDgyYjMyYTdkMTRhZWQ1NTgvanMvc3JjL21vZGFsLmpzI0w1MTItTDUxOVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyU2l6ZSgpIHtcbiAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnOTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS5oZWlnaHQgPSAnOTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gIHNjcm9sbERpdi5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gIHZhciBzY3JvbGxiYXJTaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gIHJldHVybiBzY3JvbGxiYXJTaXplO1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBnZXRTY3JvbGxiYXJTaXplIGZyb20gJy4uL3V0aWxzL2dldFNjcm9sbGJhclNpemUnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnOyAvLyBJcyBhIHZlcnRpY2FsIHNjcm9sbGJhciBkaXNwbGF5ZWQ/XG5cbmZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoY29udGFpbmVyKSB7XG4gIHZhciBkb2MgPSBvd25lckRvY3VtZW50KGNvbnRhaW5lcik7XG5cbiAgaWYgKGRvYy5ib2R5ID09PSBjb250YWluZXIpIHtcbiAgICByZXR1cm4gb3duZXJXaW5kb3coZG9jKS5pbm5lcldpZHRoID4gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuc2Nyb2xsSGVpZ2h0ID4gY29udGFpbmVyLmNsaWVudEhlaWdodDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyaWFIaWRkZW4obm9kZSwgc2hvdykge1xuICBpZiAoc2hvdykge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KG5vZGUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpWydwYWRkaW5nLXJpZ2h0J10sIDEwKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGN1cnJlbnROb2RlKSB7XG4gIHZhciBub2Rlc1RvRXhjbHVkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogW107XG4gIHZhciBzaG93ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiB1bmRlZmluZWQ7XG4gIHZhciBibGFja2xpc3QgPSBbbW91bnROb2RlLCBjdXJyZW50Tm9kZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShub2Rlc1RvRXhjbHVkZSkpO1xuICB2YXIgYmxhY2tsaXN0VGFnTmFtZXMgPSBbJ1RFTVBMQVRFJywgJ1NDUklQVCcsICdTVFlMRSddO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxICYmIGJsYWNrbGlzdC5pbmRleE9mKG5vZGUpID09PSAtMSAmJiBibGFja2xpc3RUYWdOYW1lcy5pbmRleE9mKG5vZGUudGFnTmFtZSkgPT09IC0xKSB7XG4gICAgICBhcmlhSGlkZGVuKG5vZGUsIHNob3cpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleE9mKGNvbnRhaW5lckluZm8sIGNhbGxiYWNrKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgY29udGFpbmVySW5mby5zb21lKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIGlmIChjYWxsYmFjayhpdGVtKSkge1xuICAgICAgaWR4ID0gaW5kZXg7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpIHtcbiAgdmFyIHJlc3RvcmVTdHlsZSA9IFtdO1xuICB2YXIgcmVzdG9yZVBhZGRpbmdzID0gW107XG4gIHZhciBjb250YWluZXIgPSBjb250YWluZXJJbmZvLmNvbnRhaW5lcjtcbiAgdmFyIGZpeGVkTm9kZXM7XG5cbiAgaWYgKCFwcm9wcy5kaXNhYmxlU2Nyb2xsTG9jaykge1xuICAgIGlmIChpc092ZXJmbG93aW5nKGNvbnRhaW5lcikpIHtcbiAgICAgIC8vIENvbXB1dGUgdGhlIHNpemUgYmVmb3JlIGFwcGx5aW5nIG92ZXJmbG93IGhpZGRlbiB0byBhdm9pZCBhbnkgc2Nyb2xsIGp1bXBzLlxuICAgICAgdmFyIHNjcm9sbGJhclNpemUgPSBnZXRTY3JvbGxiYXJTaXplKCk7XG4gICAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICAgIHZhbHVlOiBjb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0LFxuICAgICAgICBrZXk6ICdwYWRkaW5nLXJpZ2h0JyxcbiAgICAgICAgZWw6IGNvbnRhaW5lclxuICAgICAgfSk7IC8vIFVzZSBjb21wdXRlZCBzdHlsZSwgaGVyZSB0byBnZXQgdGhlIHJlYWwgcGFkZGluZyB0byBhZGQgb3VyIHNjcm9sbGJhciB3aWR0aC5cblxuICAgICAgY29udGFpbmVyLnN0eWxlWydwYWRkaW5nLXJpZ2h0J10gPSBcIlwiLmNvbmNhdChnZXRQYWRkaW5nUmlnaHQoY29udGFpbmVyKSArIHNjcm9sbGJhclNpemUsIFwicHhcIik7IC8vIC5tdWktZml4ZWQgaXMgYSBnbG9iYWwgaGVscGVyLlxuXG4gICAgICBmaXhlZE5vZGVzID0gb3duZXJEb2N1bWVudChjb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdWktZml4ZWQnKTtcbiAgICAgIFtdLmZvckVhY2guY2FsbChmaXhlZE5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXN0b3JlUGFkZGluZ3MucHVzaChub2RlLnN0eWxlLnBhZGRpbmdSaWdodCk7XG4gICAgICAgIG5vZGUuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KG5vZGUpICsgc2Nyb2xsYmFyU2l6ZSwgXCJweFwiKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gSW1wcm92ZSBHYXRzYnkgc3VwcG9ydFxuICAgIC8vIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2ZvcmNlLXZlcnRpY2FsLXNjcm9sbGJhci9cblxuXG4gICAgdmFyIHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxDb250YWluZXIgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJyAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpWydvdmVyZmxvdy15J10gPT09ICdzY3JvbGwnID8gcGFyZW50IDogY29udGFpbmVyOyAvLyBCbG9jayB0aGUgc2Nyb2xsIGV2ZW4gaWYgbm8gc2Nyb2xsYmFyIGlzIHZpc2libGUgdG8gYWNjb3VudCBmb3IgbW9iaWxlIGtleWJvYXJkXG4gICAgLy8gc2NyZWVuc2l6ZSBzaHJpbmsuXG5cbiAgICByZXN0b3JlU3R5bGUucHVzaCh7XG4gICAgICB2YWx1ZTogc2Nyb2xsQ29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgICAga2V5OiAnb3ZlcmZsb3cnLFxuICAgICAgZWw6IHNjcm9sbENvbnRhaW5lclxuICAgIH0pO1xuICAgIHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICB9XG5cbiAgdmFyIHJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgIGlmIChmaXhlZE5vZGVzKSB7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWROb2RlcywgZnVuY3Rpb24gKG5vZGUsIGkpIHtcbiAgICAgICAgaWYgKHJlc3RvcmVQYWRkaW5nc1tpXSkge1xuICAgICAgICAgIG5vZGUuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcmVzdG9yZVBhZGRpbmdzW2ldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVzdG9yZVN0eWxlLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICAgICAgZWwgPSBfcmVmLmVsLFxuICAgICAgICAgIGtleSA9IF9yZWYua2V5O1xuXG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiByZXN0b3JlO1xufVxuXG5mdW5jdGlvbiBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpIHtcbiAgdmFyIGhpZGRlblNpYmxpbmdzID0gW107XG4gIFtdLmZvckVhY2guY2FsbChjb250YWluZXIuY2hpbGRyZW4sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZScpIHtcbiAgICAgIGhpZGRlblNpYmxpbmdzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGhpZGRlblNpYmxpbmdzO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gZG8gbm90IGRvY3VtZW50LlxuICpcbiAqIFByb3BlciBzdGF0ZSBtYW5hZ2VtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKiBTaW1wbGlmaWVkLCBidXQgaW5zcGlyZWQgYnkgcmVhY3Qtb3ZlcmxheSdzIE1vZGFsTWFuYWdlciBjbGFzcy5cbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5cblxudmFyIE1vZGFsTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1vZGFsTWFuYWdlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTW9kYWxNYW5hZ2VyKTtcblxuICAgIC8vIHRoaXMubW9kYWxzW21vZGFsSW5kZXhdID0gbW9kYWxcbiAgICB0aGlzLm1vZGFscyA9IFtdOyAvLyB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdID0ge1xuICAgIC8vICAgbW9kYWxzOiBbXSxcbiAgICAvLyAgIGNvbnRhaW5lcixcbiAgICAvLyAgIHJlc3RvcmU6IG51bGwsXG4gICAgLy8gfVxuXG4gICAgdGhpcy5jb250YWluZXJzID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTW9kYWxNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJhZGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG1vZGFsLCBjb250YWluZXIpIHtcbiAgICAgIHZhciBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICAgIGlmIChtb2RhbEluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICAgIH1cblxuICAgICAgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmxlbmd0aDtcbiAgICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpOyAvLyBJZiB0aGUgbW9kYWwgd2UgYXJlIGFkZGluZyBpcyBhbHJlYWR5IGluIHRoZSBET00uXG5cbiAgICAgIGlmIChtb2RhbC5tb2RhbFJlZikge1xuICAgICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRkZW5TaWJsaW5nTm9kZXMgPSBnZXRIaWRkZW5TaWJsaW5ncyhjb250YWluZXIpO1xuICAgICAgYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW9kYWwubW91bnROb2RlLCBtb2RhbC5tb2RhbFJlZiwgaGlkZGVuU2libGluZ05vZGVzLCB0cnVlKTtcbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uY29udGFpbmVyID09PSBjb250YWluZXI7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGNvbnRhaW5lckluZGV4ICE9PSAtMSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGFpbmVycy5wdXNoKHtcbiAgICAgICAgbW9kYWxzOiBbbW9kYWxdLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgcmVzdG9yZTogbnVsbCxcbiAgICAgICAgaGlkZGVuU2libGluZ05vZGVzOiBoaWRkZW5TaWJsaW5nTm9kZXNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50KG1vZGFsLCBwcm9wcykge1xuICAgICAgdmFyIGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICB2YXIgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG5cbiAgICAgIGlmICghY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgIGNvbnRhaW5lckluZm8ucmVzdG9yZSA9IGhhbmRsZUNvbnRhaW5lcihjb250YWluZXJJbmZvLCBwcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUobW9kYWwpIHtcbiAgICAgIHZhciBtb2RhbEluZGV4ID0gdGhpcy5tb2RhbHMuaW5kZXhPZihtb2RhbCk7XG5cbiAgICAgIGlmIChtb2RhbEluZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lckluZGV4ID0gZmluZEluZGV4T2YodGhpcy5jb250YWluZXJzLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5tb2RhbHMuaW5kZXhPZihtb2RhbCkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICB2YXIgY29udGFpbmVySW5mbyA9IHRoaXMuY29udGFpbmVyc1tjb250YWluZXJJbmRleF07XG4gICAgICBjb250YWluZXJJbmZvLm1vZGFscy5zcGxpY2UoY29udGFpbmVySW5mby5tb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuICAgICAgdGhpcy5tb2RhbHMuc3BsaWNlKG1vZGFsSW5kZXgsIDEpOyAvLyBJZiB0aGF0IHdhcyB0aGUgbGFzdCBtb2RhbCBpbiBhIGNvbnRhaW5lciwgY2xlYW4gdXAgdGhlIGNvbnRhaW5lci5cblxuICAgICAgaWYgKGNvbnRhaW5lckluZm8ubW9kYWxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBUaGUgbW9kYWwgbWlnaHQgYmUgY2xvc2VkIGJlZm9yZSBpdCBoYWQgdGhlIGNoYW5jZSB0byBiZSBtb3VudGVkIGluIHRoZSBET00uXG4gICAgICAgIGlmIChjb250YWluZXJJbmZvLnJlc3RvcmUpIHtcbiAgICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb2RhbC5tb2RhbFJlZikge1xuICAgICAgICAgIC8vIEluIGNhc2UgdGhlIG1vZGFsIHdhc24ndCBpbiB0aGUgRE9NIHlldC5cbiAgICAgICAgICBhcmlhSGlkZGVuKG1vZGFsLm1vZGFsUmVmLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXJJbmZvLmNvbnRhaW5lciwgbW9kYWwubW91bnROb2RlLCBtb2RhbC5tb2RhbFJlZiwgY29udGFpbmVySW5mby5oaWRkZW5TaWJsaW5nTm9kZXMsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJzLnNwbGljZShjb250YWluZXJJbmRleCwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWVuIHJlYWRlci5cbiAgICAgICAgdmFyIG5leHRUb3AgPSBjb250YWluZXJJbmZvLm1vZGFsc1tjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggLSAxXTsgLy8gYXMgc29vbiBhcyBhIG1vZGFsIGlzIGFkZGluZyBpdHMgbW9kYWxSZWYgaXMgdW5kZWZpbmVkLiBpdCBjYW4ndCBzZXRcbiAgICAgICAgLy8gYXJpYS1oaWRkZW4gYmVjYXVzZSB0aGUgZG9tIGVsZW1lbnQgZG9lc24ndCBleGlzdCBlaXRoZXJcbiAgICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcblxuICAgICAgICBpZiAobmV4dFRvcC5tb2RhbFJlZikge1xuICAgICAgICAgIGFyaWFIaWRkZW4obmV4dFRvcC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1RvcE1vZGFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzVG9wTW9kYWwobW9kYWwpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGFscy5sZW5ndGggPiAwICYmIHRoaXMubW9kYWxzW3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdID09PSBtb2RhbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTW9kYWxNYW5hZ2VyO1xufSgpO1xuXG5leHBvcnQgeyBNb2RhbE1hbmFnZXIgYXMgZGVmYXVsdCB9OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59IiwiLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4sIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLXRhYmluZGV4LCBjYW1lbGNhc2UgKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG4vKipcbiAqIFV0aWxpdHkgY29tcG9uZW50IHRoYXQgbG9ja3MgZm9jdXMgaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gVW5zdGFibGVfVHJhcEZvY3VzKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGRpc2FibGVBdXRvRm9jID0gcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJGRpc2FibGVFbmZvcmNlID0gcHJvcHMuZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFbmZvcmNlLFxuICAgICAgX3Byb3BzJGRpc2FibGVSZXN0b3JlID0gcHJvcHMuZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVSZXN0b3JlLFxuICAgICAgZ2V0RG9jID0gcHJvcHMuZ2V0RG9jLFxuICAgICAgaXNFbmFibGVkID0gcHJvcHMuaXNFbmFibGVkLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW47XG4gIHZhciBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBzZW50aW5lbFN0YXJ0ID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgc2VudGluZWxFbmQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBub2RlVG9SZXN0b3JlID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciByb290UmVmID0gUmVhY3QudXNlUmVmKG51bGwpOyAvLyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGRyb3Agc3VwcG9ydCBmb3Igbm9uIHJlZiBmb3J3YXJkaW5nIGNsYXNzIGNvbXBvbmVudHNcblxuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICByb290UmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBoYW5kbGVPd25SZWYpO1xuICB2YXIgcHJldk9wZW5SZWYgPSBSZWFjdC51c2VSZWYoKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBwcmV2T3BlblJlZi5jdXJyZW50ID0gb3BlbjtcbiAgfSwgW29wZW5dKTtcblxuICBpZiAoIXByZXZPcGVuUmVmLmN1cnJlbnQgJiYgb3BlbiAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIFdBUk5JTkc6IFBvdGVudGlhbGx5IHVuc2FmZSBpbiBjb25jdXJyZW50IG1vZGUuXG4gICAgLy8gVGhlIHdheSB0aGUgcmVhZCBvbiBgbm9kZVRvUmVzdG9yZWAgaXMgc2V0dXAgY291bGQgbWFrZSB0aGlzIGFjdHVhbGx5IHNhZmUuXG4gICAgLy8gU2F5IHdlIHJlbmRlciBgb3Blbj17ZmFsc2V9YCAtPiBgb3Blbj17dHJ1ZX1gIGJ1dCBuZXZlciBjb21taXQuXG4gICAgLy8gV2UgaGF2ZSBub3cgd3JpdHRlbiBhIHN0YXRlIHRoYXQgd2Fzbid0IGNvbW1pdHRlZC4gQnV0IG5vIGNvbW1pdHRlZCBlZmZlY3RcbiAgICAvLyB3aWxsIHJlYWQgdGhpcyB3cm9uZyB2YWx1ZS4gV2Ugb25seSByZWFkIGZyb20gYG5vZGVUb1Jlc3RvcmVgIGluIGVmZmVjdHNcbiAgICAvLyB0aGF0IHdlcmUgY29tbWl0dGVkIG9uIGBvcGVuPXt0cnVlfWBcbiAgICAvLyBXQVJOSU5HOiBQcmV2ZW50cyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZC4gU2hvdWxkIG9ubHlcbiAgICAvLyBob2xkIGEgd2VhayByZWYuXG4gICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50ID0gZ2V0RG9jKCkuYWN0aXZlRWxlbWVudDtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFvcGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQocm9vdFJlZi5jdXJyZW50KTsgLy8gV2UgbWlnaHQgcmVuZGVyIGFuIGVtcHR5IGNoaWxkLlxuXG4gICAgaWYgKCFkaXNhYmxlQXV0b0ZvY3VzICYmIHJvb3RSZWYuY3VycmVudCAmJiAhcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgaWYgKCFyb290UmVmLmN1cnJlbnQuaGFzQXR0cmlidXRlKCd0YWJJbmRleCcpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgbW9kYWwgY29udGVudCBub2RlIGRvZXMgbm90IGFjY2VwdCBmb2N1cy4nLCAnRm9yIHRoZSBiZW5lZml0IG9mIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsICcgKyAndGhlIHRhYkluZGV4IG9mIHRoZSBub2RlIGlzIGJlaW5nIHNldCB0byBcIi0xXCIuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcm9vdFJlZi5jdXJyZW50LnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIHJvb3RSZWYuY3VycmVudC5mb2N1cygpO1xuICAgIH1cblxuICAgIHZhciBjb250YWluID0gZnVuY3Rpb24gY29udGFpbigpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHJvb3RSZWYuY3VycmVudDsgLy8gQ2xlYW51cCBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkIGxhemlseSBpbiBSZWFjdCAxNy5cbiAgICAgIC8vIENvbnRhaW4gY2FuIGJlIGNhbGxlZCBiZXR3ZWVuIHRoZSBjb21wb25lbnQgYmVpbmcgdW5tb3VudGVkIGFuZCBpdHMgY2xlYW51cCBmdW5jdGlvbiBiZWluZyBydW4uXG5cbiAgICAgIGlmIChyb290RWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZG9jLmhhc0ZvY3VzKCkgfHwgZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhaXNFbmFibGVkKCkgfHwgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50KSB7XG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChyb290UmVmLmN1cnJlbnQgJiYgIXJvb3RSZWYuY3VycmVudC5jb250YWlucyhkb2MuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBsb29wRm9jdXMgPSBmdW5jdGlvbiBsb29wRm9jdXMoZXZlbnQpIHtcbiAgICAgIC8vIDkgPSBUYWJcbiAgICAgIGlmIChkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBldmVudC5rZXlDb2RlICE9PSA5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gTWFrZSBzdXJlIHRoZSBuZXh0IHRhYiBzdGFydHMgZnJvbSB0aGUgcmlnaHQgcGxhY2UuXG5cblxuICAgICAgaWYgKGRvYy5hY3RpdmVFbGVtZW50ID09PSByb290UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBpZ25vcmUgdGhlIG5leHQgY29udGFpbiBhc1xuICAgICAgICAvLyBpdCB3aWxsIHRyeSB0byBtb3ZlIHRoZSBmb2N1cyBiYWNrIHRvIHRoZSByb290UmVmIGVsZW1lbnQuXG4gICAgICAgIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMuY3VycmVudCA9IHRydWU7XG5cbiAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgc2VudGluZWxFbmQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbnRpbmVsU3RhcnQuY3VycmVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGNvbnRhaW4sIHRydWUpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgbG9vcEZvY3VzLCB0cnVlKTsgLy8gV2l0aCBFZGdlLCBTYWZhcmkgYW5kIEZpcmVmb3gsIG5vIGZvY3VzIHJlbGF0ZWQgZXZlbnRzIGFyZSBmaXJlZCB3aGVuIHRoZSBmb2N1c2VkIGFyZWEgc3RvcHMgYmVpbmcgYSBmb2N1c2VkIGFyZWFcbiAgICAvLyBlLmcuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTU1OTU2MS5cbiAgICAvL1xuICAgIC8vIFRoZSB3aGF0d2cgc3BlYyBkZWZpbmVzIGhvdyB0aGUgYnJvd3NlciBzaG91bGQgYmVoYXZlIGJ1dCBkb2VzIG5vdCBleHBsaWNpdGx5IG1lbnRpb24gYW55IGV2ZW50czpcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2ZvY3VzLWZpeHVwLXJ1bGUuXG5cbiAgICB2YXIgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBjb250YWluKCk7XG4gICAgfSwgNTApO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGNvbnRhaW4sIHRydWUpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpOyAvLyByZXN0b3JlTGFzdEZvY3VzKClcblxuICAgICAgaWYgKCFkaXNhYmxlUmVzdG9yZUZvY3VzKSB7XG4gICAgICAgIC8vIEluIElFIDExIGl0IGlzIHBvc3NpYmxlIGZvciBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHRvIGJlIG51bGwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIG5vZGVUb1Jlc3RvcmUuY3VycmVudCBiZWluZyBudWxsLlxuICAgICAgICAvLyBOb3QgYWxsIGVsZW1lbnRzIGluIElFIDExIGhhdmUgYSBmb2N1cyBtZXRob2QuXG4gICAgICAgIC8vIE9uY2UgSUUgMTEgc3VwcG9ydCBpcyBkcm9wcGVkIHRoZSBmb2N1cygpIGNhbGwgY2FuIGJlIHVuY29uZGl0aW9uYWwuXG4gICAgICAgIGlmIChub2RlVG9SZXN0b3JlLmN1cnJlbnQgJiYgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKSB7XG4gICAgICAgICAgbm9kZVRvUmVzdG9yZS5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtkaXNhYmxlQXV0b0ZvY3VzLCBkaXNhYmxlRW5mb3JjZUZvY3VzLCBkaXNhYmxlUmVzdG9yZUZvY3VzLCBpc0VuYWJsZWQsIG9wZW5dKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgdGFiSW5kZXg6IDAsXG4gICAgcmVmOiBzZW50aW5lbFN0YXJ0LFxuICAgIFwiZGF0YS10ZXN0XCI6IFwic2VudGluZWxTdGFydFwiXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsRW5kLFxuICAgIFwiZGF0YS10ZXN0XCI6IFwic2VudGluZWxFbmRcIlxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVuc3RhYmxlX1RyYXBGb2N1cy5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgYXV0b21hdGljYWxseSBzaGlmdCBmb2N1cyB0byBpdHNlbGYgd2hlbiBpdCBvcGVucywgYW5kXG4gICAqIHJlcGxhY2UgaXQgdG8gdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gaXQgY2xvc2VzLlxuICAgKiBUaGlzIGFsc28gd29ya3MgY29ycmVjdGx5IHdpdGggYW55IHRyYXAgZm9jdXMgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIHRyYXAgZm9jdXMgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgdHJhcCBmb2N1cyB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgdHJhcCBmb2N1cyBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IHJlc3RvcmUgZm9jdXMgdG8gcHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgb25jZVxuICAgKiB0cmFwIGZvY3VzIGlzIGhpZGRlbi5cbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGRvY3VtZW50IHRvIGNvbnNpZGVyLlxuICAgKiBXZSB1c2UgaXQgdG8gaW1wbGVtZW50IHRoZSByZXN0b3JlIGZvY3VzIGJldHdlZW4gZGlmZmVyZW50IGJyb3dzZXIgZG9jdW1lbnRzLlxuICAgKi9cbiAgZ2V0RG9jOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBEbyB3ZSBzdGlsbCB3YW50IHRvIGVuZm9yY2UgdGhlIGZvY3VzP1xuICAgKiBUaGlzIHByb3AgaGVscHMgbmVzdGluZyBUcmFwRm9jdXMgZWxlbWVudHMuXG4gICAqL1xuICBpc0VuYWJsZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZm9jdXMgd2lsbCBiZSBsb2NrZWQuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgVW5zdGFibGVfVHJhcEZvY3VzWydwcm9wVHlwZXMnICsgJyddID0gZXhhY3RQcm9wKFVuc3RhYmxlX1RyYXBGb2N1cy5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBVbnN0YWJsZV9UcmFwRm9jdXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgekluZGV4OiAtMSxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGludmlzaWJsZT17dHJ1ZX1gLiAqL1xuICBpbnZpc2libGU6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgfVxufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgU2ltcGxlQmFja2Ryb3AgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTaW1wbGVCYWNrZHJvcChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkaW52aXNpYmxlID0gcHJvcHMuaW52aXNpYmxlLFxuICAgICAgaW52aXNpYmxlID0gX3Byb3BzJGludmlzaWJsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW52aXNpYmxlLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiaW52aXNpYmxlXCIsIFwib3BlblwiXSk7XG5cbiAgcmV0dXJuIG9wZW4gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBzdHlsZXMucm9vdCwgaW52aXNpYmxlID8gc3R5bGVzLmludmlzaWJsZSA6IHt9LCBvdGhlci5zdHlsZSlcbiAgfSkpIDogbnVsbDtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU2ltcGxlQmFja2Ryb3AucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgaW52aXNpYmxlLlxuICAgKiBJdCBjYW4gYmUgdXNlZCB3aGVuIHJlbmRlcmluZyBhIHBvcG92ZXIgb3IgYSBjdXN0b20gc2VsZWN0IGNvbXBvbmVudC5cbiAgICovXG4gIGludmlzaWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgU2ltcGxlQmFja2Ryb3A7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBnZXRUaGVtZVByb3BzLCB1c2VUaGVtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiwgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IFBvcnRhbCBmcm9tICcuLi9Qb3J0YWwnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlRXZlbnRDYWxsYmFjayBmcm9tICcuLi91dGlscy91c2VFdmVudENhbGxiYWNrJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi4vc3R5bGVzL3pJbmRleCc7XG5pbXBvcnQgTW9kYWxNYW5hZ2VyLCB7IGFyaWFIaWRkZW4gfSBmcm9tICcuL01vZGFsTWFuYWdlcic7XG5pbXBvcnQgVHJhcEZvY3VzIGZyb20gJy4uL1Vuc3RhYmxlX1RyYXBGb2N1cyc7XG5pbXBvcnQgU2ltcGxlQmFja2Ryb3AgZnJvbSAnLi9TaW1wbGVCYWNrZHJvcCc7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gUmVhY3RET00uZmluZERPTU5vZGUoY29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzVHJhbnNpdGlvbihwcm9wcykge1xuICByZXR1cm4gcHJvcHMuY2hpbGRyZW4gPyBwcm9wcy5jaGlsZHJlbi5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgnaW4nKSA6IGZhbHNlO1xufSAvLyBBIG1vZGFsIG1hbmFnZXIgdXNlZCB0byB0cmFjayBhbmQgbWFuYWdlIHRoZSBzdGF0ZSBvZiBvcGVuIE1vZGFscy5cbi8vIE1vZGFscyBkb24ndCBvcGVuIG9uIHRoZSBzZXJ2ZXIgc28gdGhpcyB3b24ndCBjb25mbGljdCB3aXRoIGNvbmN1cnJlbnQgcmVxdWVzdHMuXG5cblxudmFyIGRlZmF1bHRNYW5hZ2VyID0gbmV3IE1vZGFsTWFuYWdlcigpO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXgubW9kYWwsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgYE1vZGFsYCBoYXMgZXhpdGVkLiAqL1xuICAgIGhpZGRlbjoge1xuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBNb2RhbCBpcyBhIGxvd2VyLWxldmVsIGNvbnN0cnVjdCB0aGF0IGlzIGxldmVyYWdlZCBieSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6XG4gKlxuICogLSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pXG4gKiAtIFtEcmF3ZXJdKC9hcGkvZHJhd2VyLylcbiAqIC0gW01lbnVdKC9hcGkvbWVudS8pXG4gKiAtIFtQb3BvdmVyXSgvYXBpL3BvcG92ZXIvKVxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSBtb2RhbCBkaWFsb2csIHlvdSBwcm9iYWJseSB3YW50IHRvIHVzZSB0aGUgW0RpYWxvZ10oL2FwaS9kaWFsb2cvKSBjb21wb25lbnRcbiAqIHJhdGhlciB0aGFuIGRpcmVjdGx5IHVzaW5nIE1vZGFsLlxuICpcbiAqIFRoaXMgY29tcG9uZW50IHNoYXJlcyBtYW55IGNvbmNlcHRzIHdpdGggW3JlYWN0LW92ZXJsYXlzXShodHRwczovL3JlYWN0LWJvb3RzdHJhcC5naXRodWIuaW8vcmVhY3Qtb3ZlcmxheXMvI21vZGFscykuXG4gKi9cblxudmFyIE1vZGFsID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTW9kYWwoaW5Qcm9wcywgcmVmKSB7XG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBwcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIG5hbWU6ICdNdWlNb2RhbCcsXG4gICAgcHJvcHM6IF9leHRlbmRzKHt9LCBpblByb3BzKSxcbiAgICB0aGVtZTogdGhlbWVcbiAgfSk7XG5cbiAgdmFyIF9wcm9wcyRCYWNrZHJvcENvbXBvbiA9IHByb3BzLkJhY2tkcm9wQ29tcG9uZW50LFxuICAgICAgQmFja2Ryb3BDb21wb25lbnQgPSBfcHJvcHMkQmFja2Ryb3BDb21wb24gPT09IHZvaWQgMCA/IFNpbXBsZUJhY2tkcm9wIDogX3Byb3BzJEJhY2tkcm9wQ29tcG9uLFxuICAgICAgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuID0gcHJvcHMuY2xvc2VBZnRlclRyYW5zaXRpb24sXG4gICAgICBjbG9zZUFmdGVyVHJhbnNpdGlvbiA9IF9wcm9wcyRjbG9zZUFmdGVyVHJhbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2xvc2VBZnRlclRyYW4sXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1cyA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPSBwcm9wcy5kaXNhYmxlQmFja2Ryb3BDbGljayxcbiAgICAgIGRpc2FibGVCYWNrZHJvcENsaWNrID0gX3Byb3BzJGRpc2FibGVCYWNrZHJvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQmFja2RybyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9IHByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICBkaXNhYmxlRW5mb3JjZUZvY3VzID0gX3Byb3BzJGRpc2FibGVFbmZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlRXNjYXBlSyA9IHByb3BzLmRpc2FibGVFc2NhcGVLZXlEb3duLFxuICAgICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBfcHJvcHMkZGlzYWJsZUVzY2FwZUsgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFc2NhcGVLLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgX3Byb3BzJGRpc2FibGVSZXN0b3JlID0gcHJvcHMuZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgIGRpc2FibGVSZXN0b3JlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVSZXN0b3JlLFxuICAgICAgX3Byb3BzJGRpc2FibGVTY3JvbGxMID0gcHJvcHMuZGlzYWJsZVNjcm9sbExvY2ssXG4gICAgICBkaXNhYmxlU2Nyb2xsTG9jayA9IF9wcm9wcyRkaXNhYmxlU2Nyb2xsTCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNjcm9sbEwsXG4gICAgICBfcHJvcHMkaGlkZUJhY2tkcm9wID0gcHJvcHMuaGlkZUJhY2tkcm9wLFxuICAgICAgaGlkZUJhY2tkcm9wID0gX3Byb3BzJGhpZGVCYWNrZHJvcCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaGlkZUJhY2tkcm9wLFxuICAgICAgX3Byb3BzJGtlZXBNb3VudGVkID0gcHJvcHMua2VlcE1vdW50ZWQsXG4gICAgICBrZWVwTW91bnRlZCA9IF9wcm9wcyRrZWVwTW91bnRlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMka2VlcE1vdW50ZWQsXG4gICAgICBfcHJvcHMkbWFuYWdlciA9IHByb3BzLm1hbmFnZXIsXG4gICAgICBtYW5hZ2VyID0gX3Byb3BzJG1hbmFnZXIgPT09IHZvaWQgMCA/IGRlZmF1bHRNYW5hZ2VyIDogX3Byb3BzJG1hbmFnZXIsXG4gICAgICBvbkJhY2tkcm9wQ2xpY2sgPSBwcm9wcy5vbkJhY2tkcm9wQ2xpY2ssXG4gICAgICBvbkNsb3NlID0gcHJvcHMub25DbG9zZSxcbiAgICAgIG9uRXNjYXBlS2V5RG93biA9IHByb3BzLm9uRXNjYXBlS2V5RG93bixcbiAgICAgIG9uUmVuZGVyZWQgPSBwcm9wcy5vblJlbmRlcmVkLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiQmFja2Ryb3BDb21wb25lbnRcIiwgXCJCYWNrZHJvcFByb3BzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbG9zZUFmdGVyVHJhbnNpdGlvblwiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVBdXRvRm9jdXNcIiwgXCJkaXNhYmxlQmFja2Ryb3BDbGlja1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiZGlzYWJsZVNjcm9sbExvY2tcIiwgXCJoaWRlQmFja2Ryb3BcIiwgXCJrZWVwTW91bnRlZFwiLCBcIm1hbmFnZXJcIiwgXCJvbkJhY2tkcm9wQ2xpY2tcIiwgXCJvbkNsb3NlXCIsIFwib25Fc2NhcGVLZXlEb3duXCIsIFwib25SZW5kZXJlZFwiLCBcIm9wZW5cIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh0cnVlKSxcbiAgICAgIGV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgbW9kYWwgPSBSZWFjdC51c2VSZWYoe30pO1xuICB2YXIgbW91bnROb2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbW9kYWxSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKG1vZGFsUmVmLCByZWYpO1xuICB2YXIgaGFzVHJhbnNpdGlvbiA9IGdldEhhc1RyYW5zaXRpb24ocHJvcHMpO1xuXG4gIHZhciBnZXREb2MgPSBmdW5jdGlvbiBnZXREb2MoKSB7XG4gICAgcmV0dXJuIG93bmVyRG9jdW1lbnQobW91bnROb2RlUmVmLmN1cnJlbnQpO1xuICB9O1xuXG4gIHZhciBnZXRNb2RhbCA9IGZ1bmN0aW9uIGdldE1vZGFsKCkge1xuICAgIG1vZGFsLmN1cnJlbnQubW9kYWxSZWYgPSBtb2RhbFJlZi5jdXJyZW50O1xuICAgIG1vZGFsLmN1cnJlbnQubW91bnROb2RlID0gbW91bnROb2RlUmVmLmN1cnJlbnQ7XG4gICAgcmV0dXJuIG1vZGFsLmN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZU1vdW50ZWQgPSBmdW5jdGlvbiBoYW5kbGVNb3VudGVkKCkge1xuICAgIG1hbmFnZXIubW91bnQoZ2V0TW9kYWwoKSwge1xuICAgICAgZGlzYWJsZVNjcm9sbExvY2s6IGRpc2FibGVTY3JvbGxMb2NrXG4gICAgfSk7IC8vIEZpeCBhIGJ1ZyBvbiBDaHJvbWUgd2hlcmUgdGhlIHNjcm9sbCBpc24ndCBpbml0aWFsbHkgMC5cblxuICAgIG1vZGFsUmVmLmN1cnJlbnQuc2Nyb2xsVG9wID0gMDtcbiAgfTtcblxuICB2YXIgaGFuZGxlT3BlbiA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXNvbHZlZENvbnRhaW5lciA9IGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGdldERvYygpLmJvZHk7XG4gICAgbWFuYWdlci5hZGQoZ2V0TW9kYWwoKSwgcmVzb2x2ZWRDb250YWluZXIpOyAvLyBUaGUgZWxlbWVudCB3YXMgYWxyZWFkeSBtb3VudGVkLlxuXG4gICAgaWYgKG1vZGFsUmVmLmN1cnJlbnQpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaXNUb3BNb2RhbCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWFuYWdlci5pc1RvcE1vZGFsKGdldE1vZGFsKCkpO1xuICB9LCBbbWFuYWdlcl0pO1xuICB2YXIgaGFuZGxlUG9ydGFsUmVmID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIG1vdW50Tm9kZVJlZi5jdXJyZW50ID0gbm9kZTtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvblJlbmRlcmVkKSB7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfVxuXG4gICAgaWYgKG9wZW4gJiYgaXNUb3BNb2RhbCgpKSB7XG4gICAgICBoYW5kbGVNb3VudGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyaWFIaWRkZW4obW9kYWxSZWYuY3VycmVudCwgdHJ1ZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUNsb3NlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIG1hbmFnZXIucmVtb3ZlKGdldE1vZGFsKCkpO1xuICB9LCBbbWFuYWdlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH07XG4gIH0sIFtoYW5kbGVDbG9zZV0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvcGVuKSB7XG4gICAgICBoYW5kbGVPcGVuKCk7XG4gICAgfSBlbHNlIGlmICghaGFzVHJhbnNpdGlvbiB8fCAhY2xvc2VBZnRlclRyYW5zaXRpb24pIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9LCBbb3BlbiwgaGFuZGxlQ2xvc2UsIGhhc1RyYW5zaXRpb24sIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uLCBoYW5kbGVPcGVuXSk7XG5cbiAgaWYgKCFrZWVwTW91bnRlZCAmJiAhb3BlbiAmJiAoIWhhc1RyYW5zaXRpb24gfHwgZXhpdGVkKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKCkge1xuICAgIHNldEV4aXRlZCh0cnVlKTtcblxuICAgIGlmIChjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUJhY2tkcm9wQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVCYWNrZHJvcENsaWNrKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgIG9uQmFja2Ryb3BDbGljayhldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNhYmxlQmFja2Ryb3BDbGljayAmJiBvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnYmFja2Ryb3BDbGljaycpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICAvLyBUaGUgaGFuZGxlciBkb2Vzbid0IHRha2UgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCBpbnRvIGFjY291bnQ6XG4gICAgLy9cbiAgICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpIGlzIG1lYW50IHRvIHN0b3AgZGVmYXVsdCBiZWhhdmlvdXJzIGxpa2VcbiAgICAvLyBjbGlja2luZyBhIGNoZWNrYm94IHRvIGNoZWNrIGl0LCBoaXR0aW5nIGEgYnV0dG9uIHRvIHN1Ym1pdCBhIGZvcm0sXG4gICAgLy8gYW5kIGhpdHRpbmcgbGVmdCBhcnJvdyB0byBtb3ZlIHRoZSBjdXJzb3IgaW4gYSB0ZXh0IGlucHV0IGV0Yy5cbiAgICAvLyBPbmx5IHNwZWNpYWwgSFRNTCBlbGVtZW50cyBoYXZlIHRoZXNlIGRlZmF1bHQgYmVoYXZpb3JzLlxuICAgIGlmIChldmVudC5rZXkgIT09ICdFc2NhcGUnIHx8ICFpc1RvcE1vZGFsKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob25Fc2NhcGVLZXlEb3duKSB7XG4gICAgICBvbkVzY2FwZUtleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIGlmICghZGlzYWJsZUVzY2FwZUtleURvd24pIHtcbiAgICAgIC8vIFN3YWxsb3cgdGhlIGV2ZW50LCBpbiBjYXNlIHNvbWVvbmUgaXMgbGlzdGVuaW5nIGZvciB0aGUgZXNjYXBlIGtleSBvbiB0aGUgYm9keS5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAob25DbG9zZSkge1xuICAgICAgICBvbkNsb3NlKGV2ZW50LCAnZXNjYXBlS2V5RG93bicpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaW5saW5lU3R5bGUgPSBzdHlsZXModGhlbWUgfHwge1xuICAgIHpJbmRleDogekluZGV4XG4gIH0pO1xuICB2YXIgY2hpbGRQcm9wcyA9IHt9O1xuXG4gIGlmIChjaGlsZHJlbi5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hpbGRQcm9wcy50YWJJbmRleCA9IGNoaWxkcmVuLnByb3BzLnRhYkluZGV4IHx8ICctMSc7XG4gIH0gLy8gSXQncyBhIFRyYW5zaXRpb24gbGlrZSBjb21wb25lbnRcblxuXG4gIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgY2hpbGRQcm9wcy5vbkVudGVyID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUVudGVyLCBjaGlsZHJlbi5wcm9wcy5vbkVudGVyKTtcbiAgICBjaGlsZFByb3BzLm9uRXhpdGVkID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKGhhbmRsZUV4aXRlZCwgY2hpbGRyZW4ucHJvcHMub25FeGl0ZWQpO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwge1xuICAgIHJlZjogaGFuZGxlUG9ydGFsUmVmLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWxcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93bixcbiAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gIH0sIG90aGVyLCB7XG4gICAgc3R5bGU6IF9leHRlbmRzKHt9LCBpbmxpbmVTdHlsZS5yb290LCAhb3BlbiAmJiBleGl0ZWQgPyBpbmxpbmVTdHlsZS5oaWRkZW4gOiB7fSwgb3RoZXIuc3R5bGUpXG4gIH0pLCBoaWRlQmFja2Ryb3AgPyBudWxsIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQmFja2Ryb3BDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xpY2s6IGhhbmRsZUJhY2tkcm9wQ2xpY2tcbiAgfSwgQmFja2Ryb3BQcm9wcykpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFwRm9jdXMsIHtcbiAgICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBkaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgIGRpc2FibGVBdXRvRm9jdXM6IGRpc2FibGVBdXRvRm9jdXMsXG4gICAgZGlzYWJsZVJlc3RvcmVGb2N1czogZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICBnZXREb2M6IGdldERvYyxcbiAgICBpc0VuYWJsZWQ6IGlzVG9wTW9kYWwsXG4gICAgb3Blbjogb3BlblxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKSkpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTW9kYWwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogQSBiYWNrZHJvcCBjb21wb25lbnQuIFRoaXMgcHJvcCBlbmFibGVzIGN1c3RvbSBiYWNrZHJvcCByZW5kZXJpbmcuXG4gICAqL1xuICBCYWNrZHJvcENvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYEJhY2tkcm9wYF0oL2FwaS9iYWNrZHJvcC8pIGVsZW1lbnQuXG4gICAqL1xuICBCYWNrZHJvcFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBNb2RhbCB3YWl0cyB1bnRpbCBhIG5lc3RlZCBUcmFuc2l0aW9uIGlzIGNvbXBsZXRlZCBiZWZvcmUgY2xvc2luZy5cbiAgICovXG4gIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuaW5zdGFuY2VPZihSZWFjdC5Db21wb25lbnQpLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgbW9kYWwgY2hpbGRyZW4gdGhhdCBoYXZlIHRoZSBgZGlzYWJsZUF1dG9Gb2N1c2AgcHJvcC5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY2xpY2tpbmcgdGhlIGJhY2tkcm9wIHdpbGwgbm90IGZpcmUgYG9uQ2xvc2VgLlxuICAgKi9cbiAgZGlzYWJsZUJhY2tkcm9wQ2xpY2s6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSBgb25DbG9zZWAuXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlbi5cbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgbm90IHJlbmRlcmVkLlxuICAgKi9cbiAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTogYFwiZXNjYXBlS2V5RG93blwiYCwgYFwiYmFja2Ryb3BDbGlja1wiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQsXG4gICAqIGBkaXNhYmxlRXNjYXBlS2V5RG93bmAgaXMgZmFsc2UgYW5kIHRoZSBtb2RhbCBpcyBpbiBmb2N1cy5cbiAgICovXG4gIG9uRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIG9uY2UgdGhlIGNoaWxkcmVuIGhhcyBiZWVuIG1vdW50ZWQgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqIEl0IHNpZ25hbHMgdGhhdCB0aGUgYG9wZW49e3RydWV9YCBwcm9wIHRvb2sgZWZmZWN0LlxuICAgKlxuICAgKiBUaGlzIHByb3Agd2lsbCBiZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkIGluIHY1LCB0aGUgcmVmIGNhbiBiZSB1c2VkIGluc3RlYWQuXG4gICAqL1xuICBvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNb2RhbDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dHNTaGFwZSB9IGZyb20gJy4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5leHBvcnQgdmFyIFVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnO1xuZXhwb3J0IHZhciBFWElURUQgPSAnZXhpdGVkJztcbmV4cG9ydCB2YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0IHZhciBFTlRFUkVEID0gJ2VudGVyZWQnO1xuZXhwb3J0IHZhciBFWElUSU5HID0gJ2V4aXRpbmcnO1xuLyoqXG4gKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudFxuICogc3RhdGUgdG8gYW5vdGhlciBfb3ZlciB0aW1lXyB3aXRoIGEgc2ltcGxlIGRlY2xhcmF0aXZlIEFQSS4gTW9zdCBjb21tb25seVxuICogaXQncyB1c2VkIHRvIGFuaW1hdGUgdGhlIG1vdW50aW5nIGFuZCB1bm1vdW50aW5nIG9mIGEgY29tcG9uZW50LCBidXQgY2FuIGFsc29cbiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC5cbiAqXG4gKiAtLS1cbiAqXG4gKiAqKk5vdGUqKjogYFRyYW5zaXRpb25gIGlzIGEgcGxhdGZvcm0tYWdub3N0aWMgYmFzZSBjb21wb25lbnQuIElmIHlvdSdyZSB1c2luZ1xuICogdHJhbnNpdGlvbnMgaW4gQ1NTLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2VcbiAqIFtgQ1NTVHJhbnNpdGlvbmBdKGh0dHBzOi8vcmVhY3Rjb21tdW5pdHkub3JnL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvY3NzLXRyYW5zaXRpb24pXG4gKiBpbnN0ZWFkLiBJdCBpbmhlcml0cyBhbGwgdGhlIGZlYXR1cmVzIG9mIGBUcmFuc2l0aW9uYCwgYnV0IGNvbnRhaW5zXG4gKiBhZGRpdGlvbmFsIGZlYXR1cmVzIG5lY2Vzc2FyeSB0byBwbGF5IG5pY2Ugd2l0aCBDU1MgdHJhbnNpdGlvbnMgKGhlbmNlIHRoZVxuICogbmFtZSBvZiB0aGUgY29tcG9uZW50KS5cbiAqXG4gKiAtLS1cbiAqXG4gKiBCeSBkZWZhdWx0IHRoZSBgVHJhbnNpdGlvbmAgY29tcG9uZW50IGRvZXMgbm90IGFsdGVyIHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyBcImVudGVyXCIgYW5kIFwiZXhpdFwiIHN0YXRlcyBmb3IgdGhlXG4gKiBjb21wb25lbnRzLiBJdCdzIHVwIHRvIHlvdSB0byBnaXZlIG1lYW5pbmcgYW5kIGVmZmVjdCB0byB0aG9zZSBzdGF0ZXMuIEZvclxuICogZXhhbXBsZSB3ZSBjYW4gYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czpcbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogICBleGl0aW5nOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiAgIGV4aXRlZDogIHsgb3BhY2l0eTogMCB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgPGRpdiBzdHlsZT17e1xuICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsXG4gKiAgICAgICAgIC4uLnRyYW5zaXRpb25TdHlsZXNbc3RhdGVdXG4gKiAgICAgICB9fT5cbiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIVxuICogICAgICAgPC9kaXY+XG4gKiAgICAgKX1cbiAqICAgPC9UcmFuc2l0aW9uPlxuICogKTtcbiAqIGBgYFxuICpcbiAqIFRoZXJlIGFyZSA0IG1haW4gc3RhdGVzIGEgVHJhbnNpdGlvbiBjYW4gYmUgaW46XG4gKiAgLSBgJ2VudGVyaW5nJ2BcbiAqICAtIGAnZW50ZXJlZCdgXG4gKiAgLSBgJ2V4aXRpbmcnYFxuICogIC0gYCdleGl0ZWQnYFxuICpcbiAqIFRyYW5zaXRpb24gc3RhdGUgaXMgdG9nZ2xlZCB2aWEgdGhlIGBpbmAgcHJvcC4gV2hlbiBgdHJ1ZWAgdGhlIGNvbXBvbmVudFxuICogYmVnaW5zIHRoZSBcIkVudGVyXCIgc3RhZ2UuIER1cmluZyB0aGlzIHN0YWdlLCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgZnJvbVxuICogaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwgdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlXG4gKiB0cmFuc2l0aW9uIGFuZCB0aGVuIHRvIHRoZSBgJ2VudGVyZWQnYCBzdGFnZSBvbmNlIGl0J3MgY29tcGxldGUuIExldCdzIHRha2VcbiAqIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSAod2UnbGwgdXNlIHRoZVxuICogW3VzZVN0YXRlXShodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlc3RhdGUpIGhvb2spOlxuICpcbiAqIGBgYGpzeFxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBbaW5Qcm9wLCBzZXRJblByb3BdID0gdXNlU3RhdGUoZmFsc2UpO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXs1MDB9PlxuICogICAgICAgICB7c3RhdGUgPT4gKFxuICogICAgICAgICAgIC8vIC4uLlxuICogICAgICAgICApfVxuICogICAgICAgPC9UcmFuc2l0aW9uPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRJblByb3AodHJ1ZSl9PlxuICogICAgICAgICBDbGljayB0byBFbnRlclxuICogICAgICAgPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZVxuICogYW5kIHN0YXkgdGhlcmUgZm9yIDUwMG1zICh0aGUgdmFsdWUgb2YgYHRpbWVvdXRgKSBiZWZvcmUgaXQgZmluYWxseSBzd2l0Y2hlc1xuICogdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb21cbiAqIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuXG4gKi9cblxudmFyIFRyYW5zaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQ7IC8vIEluIHRoZSBjb250ZXh0IG9mIGEgVHJhbnNpdGlvbkdyb3VwIGFsbCBlbnRlcnMgYXJlIHJlYWxseSBhcHBlYXJzXG5cbiAgICB2YXIgYXBwZWFyID0gcGFyZW50R3JvdXAgJiYgIXBhcmVudEdyb3VwLmlzTW91bnRpbmcgPyBwcm9wcy5lbnRlciA6IHByb3BzLmFwcGVhcjtcbiAgICB2YXIgaW5pdGlhbFN0YXR1cztcbiAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByb3BzLmluKSB7XG4gICAgICBpZiAoYXBwZWFyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IEVOVEVSSU5HO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVOVEVSRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy51bm1vdW50T25FeGl0IHx8IHByb3BzLm1vdW50T25FbnRlcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gVU5NT1VOVEVEO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHN0YXR1czogaW5pdGlhbFN0YXR1c1xuICAgIH07XG4gICAgX3RoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cbiAgO1xuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7IC8vIFRPRE86IHJlbW92ZSBmYWxsYmFjayBmb3IgbmV4dCBtYWpvclxuXG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhciAhPT0gdW5kZWZpbmVkID8gdGltZW91dC5hcHBlYXIgOiBlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnVubW91bnRPbkV4aXQgJiYgdGhpcy5zdGF0ZS5zdGF0dXMgPT09IEVYSVRFRCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogVU5NT1VOVEVEXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIHBlcmZvcm1FbnRlcihtb3VudGluZykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGVudGVyID0gdGhpcy5wcm9wcy5lbnRlcjtcbiAgICB2YXIgYXBwZWFyaW5nID0gdGhpcy5jb250ZXh0ID8gdGhpcy5jb250ZXh0LmlzTW91bnRpbmcgOiBtb3VudGluZztcblxuICAgIHZhciBfcmVmMiA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFthcHBlYXJpbmddIDogW1JlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpLCBhcHBlYXJpbmddLFxuICAgICAgICBtYXliZU5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgbWF5YmVBcHBlYXJpbmcgPSBfcmVmMlsxXTtcblxuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgZW50ZXJUaW1lb3V0ID0gYXBwZWFyaW5nID8gdGltZW91dHMuYXBwZWFyIDogdGltZW91dHMuZW50ZXI7IC8vIG5vIGVudGVyIGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVOVEVSRURcbiAgICAvLyBpZiB3ZSBhcmUgbW91bnRpbmcgYW5kIHJ1bm5pbmcgdGhpcyBpdCBtZWFucyBhcHBlYXIgX211c3RfIGJlIHNldFxuXG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFTlRFUklOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyaW5nKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuXG4gICAgICBfdGhpczIub25UcmFuc2l0aW9uRW5kKGVudGVyVGltZW91dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobWF5YmVOb2RlLCBtYXliZUFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgZXhpdCA9IHRoaXMucHJvcHMuZXhpdDtcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIG1heWJlTm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHVuZGVmaW5lZCA6IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0IHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG1heWJlTm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhtYXliZU5vZGUpO1xuXG4gICAgICBfdGhpczMub25UcmFuc2l0aW9uRW5kKHRpbWVvdXRzLmV4aXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChtYXliZU5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQodGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuICAgIHZhciBub2RlID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gdGhpcy5wcm9wcy5ub2RlUmVmLmN1cnJlbnQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lciA9IHRpbWVvdXQgPT0gbnVsbCAmJiAhdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcjtcblxuICAgIGlmICghbm9kZSB8fCBkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcikge1xuICAgICAgdmFyIF9yZWYzID0gdGhpcy5wcm9wcy5ub2RlUmVmID8gW3RoaXMubmV4dENhbGxiYWNrXSA6IFtub2RlLCB0aGlzLm5leHRDYWxsYmFja10sXG4gICAgICAgICAgbWF5YmVOb2RlID0gX3JlZjNbMF0sXG4gICAgICAgICAgbWF5YmVOZXh0Q2FsbGJhY2sgPSBfcmVmM1sxXTtcblxuICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihtYXliZU5vZGUsIG1heWJlTmV4dENhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCB0aW1lb3V0KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIF9pbiA9IF90aGlzJHByb3BzLmluLFxuICAgICAgICBfbW91bnRPbkVudGVyID0gX3RoaXMkcHJvcHMubW91bnRPbkVudGVyLFxuICAgICAgICBfdW5tb3VudE9uRXhpdCA9IF90aGlzJHByb3BzLnVubW91bnRPbkV4aXQsXG4gICAgICAgIF9hcHBlYXIgPSBfdGhpcyRwcm9wcy5hcHBlYXIsXG4gICAgICAgIF9lbnRlciA9IF90aGlzJHByb3BzLmVudGVyLFxuICAgICAgICBfZXhpdCA9IF90aGlzJHByb3BzLmV4aXQsXG4gICAgICAgIF90aW1lb3V0ID0gX3RoaXMkcHJvcHMudGltZW91dCxcbiAgICAgICAgX2FkZEVuZExpc3RlbmVyID0gX3RoaXMkcHJvcHMuYWRkRW5kTGlzdGVuZXIsXG4gICAgICAgIF9vbkVudGVyID0gX3RoaXMkcHJvcHMub25FbnRlcixcbiAgICAgICAgX29uRW50ZXJpbmcgPSBfdGhpcyRwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgICBfb25FbnRlcmVkID0gX3RoaXMkcHJvcHMub25FbnRlcmVkLFxuICAgICAgICBfb25FeGl0ID0gX3RoaXMkcHJvcHMub25FeGl0LFxuICAgICAgICBfb25FeGl0aW5nID0gX3RoaXMkcHJvcHMub25FeGl0aW5nLFxuICAgICAgICBfb25FeGl0ZWQgPSBfdGhpcyRwcm9wcy5vbkV4aXRlZCxcbiAgICAgICAgX25vZGVSZWYgPSBfdGhpcyRwcm9wcy5ub2RlUmVmLFxuICAgICAgICBjaGlsZFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiaW5cIiwgXCJtb3VudE9uRW50ZXJcIiwgXCJ1bm1vdW50T25FeGl0XCIsIFwiYXBwZWFyXCIsIFwiZW50ZXJcIiwgXCJleGl0XCIsIFwidGltZW91dFwiLCBcImFkZEVuZExpc3RlbmVyXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvbkV4aXRlZFwiLCBcIm5vZGVSZWZcIl0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIC8vIGFsbG93cyBmb3IgbmVzdGVkIFRyYW5zaXRpb25zXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Hcm91cENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0sIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcykgOiBSZWFjdC5jbG9uZUVsZW1lbnQoUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbiksIGNoaWxkUHJvcHMpKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb24uY29udGV4dFR5cGUgPSBUcmFuc2l0aW9uR3JvdXBDb250ZXh0O1xuVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBIFJlYWN0IHJlZmVyZW5jZSB0byBET00gZWxlbWVudCB0aGF0IG5lZWQgdG8gdHJhbnNpdGlvbjpcbiAgICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUxMTI3MTMwLzQ2NzE5MzJcbiAgICpcbiAgICogICAtIFdoZW4gYG5vZGVSZWZgIHByb3AgaXMgdXNlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQgdG8gY2FsbGJhY2sgZnVuY3Rpb25zXG4gICAqICAgICAgKGUuZy4gYG9uRW50ZXJgKSBiZWNhdXNlIHVzZXIgYWxyZWFkeSBoYXMgZGlyZWN0IGFjY2VzcyB0byB0aGUgbm9kZS5cbiAgICogICAtIFdoZW4gY2hhbmdpbmcgYGtleWAgcHJvcCBvZiBgVHJhbnNpdGlvbmAgaW4gYSBgVHJhbnNpdGlvbkdyb3VwYCBhIG5ld1xuICAgKiAgICAgYG5vZGVSZWZgIG5lZWQgdG8gYmUgcHJvdmlkZWQgdG8gYFRyYW5zaXRpb25gIHdpdGggY2hhbmdlZCBga2V5YCBwcm9wXG4gICAqICAgICAoc2VlXG4gICAqICAgICBbdGVzdC9DU1NUcmFuc2l0aW9uLXRlc3QuanNdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi8xMzQzNWY4OTdiM2FiNzFmNmUxOWQ3MjRmMTQ1NTk2ZjU5MTA1ODFjL3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzI0wzNjItTDQzNykpLlxuICAgKi9cbiAgbm9kZVJlZjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiB0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgPyBQcm9wVHlwZXMuYW55IDogUHJvcFR5cGVzLmluc3RhbmNlT2YoRWxlbWVudClcbiAgfSksXG5cbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBpc1xuICAgKiBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1cyAoYCdlbnRlcmluZydgLCBgJ2VudGVyZWQnYCxcbiAgICogYCdleGl0aW5nJ2AsIGAnZXhpdGVkJ2ApLCB3aGljaCBjYW4gYmUgdXNlZCB0byBhcHBseSBjb250ZXh0XG4gICAqIHNwZWNpZmljIHByb3BzIHRvIGEgY29tcG9uZW50LlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezE1MH0+XG4gICAqICAge3N0YXRlID0+IChcbiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0ZX1gfSAvPlxuICAgKiAgICl9XG4gICAqIDwvVHJhbnNpdGlvbj5cbiAgICogYGBgXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCwgUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZF0pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGNvbXBvbmVudDsgdHJpZ2dlcnMgdGhlIGVudGVyIG9yIGV4aXQgc3RhdGVzXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBtb3VudGVkIGltbWVkaWF0ZWx5IGFsb25nIHdpdGhcbiAgICogdGhlIHBhcmVudCBgVHJhbnNpdGlvbmAgY29tcG9uZW50LiBJZiB5b3Ugd2FudCB0byBcImxhenkgbW91bnRcIiB0aGUgY29tcG9uZW50IG9uIHRoZVxuICAgKiBmaXJzdCBgaW49e3RydWV9YCB5b3UgY2FuIHNldCBgbW91bnRPbkVudGVyYC4gQWZ0ZXIgdGhlIGZpcnN0IGVudGVyIHRyYW5zaXRpb24gdGhlIGNvbXBvbmVudCB3aWxsIHN0YXlcbiAgICogbW91bnRlZCwgZXZlbiBvbiBcImV4aXRlZFwiLCB1bmxlc3MgeW91IGFsc28gc3BlY2lmeSBgdW5tb3VudE9uRXhpdGAuXG4gICAqL1xuICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgc3RheXMgbW91bnRlZCBhZnRlciBpdCByZWFjaGVzIHRoZSBgJ2V4aXRlZCdgIHN0YXRlLlxuICAgKiBTZXQgYHVubW91bnRPbkV4aXRgIGlmIHlvdSdkIHByZWZlciB0byB1bm1vdW50IHRoZSBjb21wb25lbnQgYWZ0ZXIgaXQgZmluaXNoZXMgZXhpdGluZy5cbiAgICovXG4gIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgZG9lcyBub3QgcGVyZm9ybSB0aGUgZW50ZXIgdHJhbnNpdGlvbiB3aGVuXG4gICAqIGl0IGZpcnN0IG1vdW50cywgcmVnYXJkbGVzcyBvZiB0aGUgdmFsdWUgb2YgYGluYC4gSWYgeW91IHdhbnQgdGhpc1xuICAgKiBiZWhhdmlvciwgc2V0IGJvdGggYGFwcGVhcmAgYW5kIGBpbmAgdG8gYHRydWVgLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiB0aGVyZSBhcmUgbm8gc3BlY2lhbCBhcHBlYXIgc3RhdGVzIGxpa2UgYGFwcGVhcmluZ2AvYGFwcGVhcmVkYCwgdGhpcyBwcm9wXG4gICAqID4gb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgZW50ZXIgdHJhbnNpdGlvbi4gSG93ZXZlciwgaW4gdGhlXG4gICAqID4gYDxDU1NUcmFuc2l0aW9uPmAgY29tcG9uZW50IHRoYXQgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiBkb2VzIHJlc3VsdCBpblxuICAgKiA+IGFkZGl0aW9uYWwgYC5hcHBlYXItKmAgY2xhc3NlcywgdGhhdCB3YXkgeW91IGNhbiBjaG9vc2UgdG8gc3R5bGUgaXRcbiAgICogPiBkaWZmZXJlbnRseS5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHRpbWVvdXRzU2hhcGU7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiBUaW1lb3V0cyBhcmUgc3RpbGwgdXNlZCBhcyBhIGZhbGxiYWNrIGlmIHByb3ZpZGVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBgYGBqc3hcbiAgICogYWRkRW5kTGlzdGVuZXI9eyhub2RlLCBkb25lKSA9PiB7XG4gICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uXG4gICAqICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZG9uZSwgZmFsc2UpO1xuICAgKiB9fVxuICAgKiBgYGBcbiAgICovXG4gIGFkZEVuZExpc3RlbmVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKSAtPiB2b2lkXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlIFwiZW50ZXJlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRpbmdcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImV4aXRlZFwiIHN0YXR1cyBpcyBhcHBsaWVkLlxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmNcbn0gOiB7fTsgLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQgaXMgY2xlYXJlciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuXG5mdW5jdGlvbiBub29wKCkge31cblxuVHJhbnNpdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGluOiBmYWxzZSxcbiAgbW91bnRPbkVudGVyOiBmYWxzZSxcbiAgdW5tb3VudE9uRXhpdDogZmFsc2UsXG4gIGFwcGVhcjogZmFsc2UsXG4gIGVudGVyOiB0cnVlLFxuICBleGl0OiB0cnVlLFxuICBvbkVudGVyOiBub29wLFxuICBvbkVudGVyaW5nOiBub29wLFxuICBvbkVudGVyZWQ6IG5vb3AsXG4gIG9uRXhpdDogbm9vcCxcbiAgb25FeGl0aW5nOiBub29wLFxuICBvbkV4aXRlZDogbm9vcFxufTtcblRyYW5zaXRpb24uVU5NT1VOVEVEID0gVU5NT1VOVEVEO1xuVHJhbnNpdGlvbi5FWElURUQgPSBFWElURUQ7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gRU5URVJJTkc7XG5UcmFuc2l0aW9uLkVOVEVSRUQgPSBFTlRFUkVEO1xuVHJhbnNpdGlvbi5FWElUSU5HID0gRVhJVElORztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb247IiwiZXhwb3J0IHZhciByZWZsb3cgPSBmdW5jdGlvbiByZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICBfcHJvcHMkc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHN0eWxlID0gX3Byb3BzJHN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRzdHlsZTtcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uIHx8IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBkZWxheTogc3R5bGUudHJhbnNpdGlvbkRlbGF5XG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBnZXRTY2FsZSh2YWx1ZSkge1xuICByZXR1cm4gXCJzY2FsZShcIi5jb25jYXQodmFsdWUsIFwiLCBcIikuY29uY2F0KE1hdGgucG93KHZhbHVlLCAyKSwgXCIpXCIpO1xufVxuXG52YXIgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgxKVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB0cmFuc2Zvcm06ICdub25lJ1xuICB9XG59O1xuLyoqXG4gKiBUaGUgR3JvdyB0cmFuc2l0aW9uIGlzIHVzZWQgYnkgdGhlIFtUb29sdGlwXSgvY29tcG9uZW50cy90b29sdGlwcy8pIGFuZFxuICogW1BvcG92ZXJdKC9jb21wb25lbnRzL3BvcG92ZXIvKSBjb21wb25lbnRzLlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgR3JvdyA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyb3cocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9IHByb3BzLmRpc2FibGVTdHJpY3RNb2RlQ29tcGF0LFxuICAgICAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQgPSBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTdHJpY3RNLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9wcm9wcyR0aW1lb3V0LFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IFRyYW5zaXRpb24gOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdFwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHZhciB0aW1lciA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgYXV0b1RpbWVvdXQgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0aGVtZS51bnN0YWJsZV9zdHJpY3RNb2RlICYmICFkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLCBmb3JlaWduUmVmKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZW50ZXInXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZHVyYXRpb24sXG4gICAgICAgIGRlbGF5ID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kZWxheTtcblxuICAgIHZhciBkdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgIGF1dG9UaW1lb3V0LmN1cnJlbnQgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gW3RoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgIGRlbGF5OiBkZWxheVxuICAgIH0pLCB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiAqIDAuNjY2LFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSldLmpvaW4oJywnKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRW50ZXJlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmVkKTtcbiAgdmFyIGhhbmRsZUV4aXRpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRXhpdGluZyk7XG4gIHZhciBoYW5kbGVFeGl0ID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzMiA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmRlbGF5O1xuXG4gICAgdmFyIGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheTogZGVsYXkgfHwgZHVyYXRpb24gKiAwLjMzM1xuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gZ2V0U2NhbGUoMC43NSk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKG5vZGVPck5leHQsIG1heWJlTmV4dCkge1xuICAgIHZhciBuZXh0ID0gZW5hYmxlU3RyaWN0TW9kZUNvbXBhdCA/IG5vZGVPck5leHQgOiBtYXliZU5leHQ7XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVGltZW91dC5jdXJyZW50IHx8IDApO1xuICAgIH1cbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgYWRkRW5kTGlzdGVuZXI6IGFkZEVuZExpc3RlbmVyLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQgPT09ICdhdXRvJyA/IG51bGwgOiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMC43NSksXG4gICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHN0eWxlLCBjaGlsZHJlbi5wcm9wcy5zdHlsZSksXG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyb3cucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBFbmFibGUgdGhpcyBwcm9wIGlmIHlvdSBlbmNvdW50ZXIgJ0Z1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnMnLFxuICAgKiB1c2UgYHVuc3RhYmxlX2NyZWF0ZVN0cmljdE1vZGVUaGVtZWAsXG4gICAqIGFuZCBjYW4ndCBmb3J3YXJkIHRoZSByZWYgaW4gdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICovXG4gIGRpc2FibGVTdHJpY3RNb2RlQ29tcGF0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBzaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IGFuaW1hdGlvbi5cbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gZm9yIHRoZSB0cmFuc2l0aW9uLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnMsIG9yIGluZGl2aWR1YWxseSB3aXRoIGFuIG9iamVjdC5cbiAgICpcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBHcm93OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5wYXBlcixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm94LXNoYWRvdycpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9XG4gIH0sIGVsZXZhdGlvbnMpO1xufTtcbnZhciBQYXBlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBhcGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBzcXVhcmUgPSBfcHJvcHMkc3F1YXJlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzcXVhcmUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdlbGV2YXRpb24nIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNxdWFyZVwiLCBcImVsZXZhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgPyBjbGFzc2VzLm91dGxpbmVkIDogY2xhc3Nlc1tcImVsZXZhdGlvblwiLmNvbmNhdChlbGV2YXRpb24pXSwgIXNxdWFyZSAmJiBjbGFzc2VzLnJvdW5kZWQpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogU2hhZG93IGRlcHRoLCBjb3JyZXNwb25kcyB0byBgZHBgIGluIHRoZSBzcGVjLlxuICAgKiBJdCBhY2NlcHRzIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm51bWJlciwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgICBlbGV2YXRpb24gPSBwcm9wcy5lbGV2YXRpb247IC8vIGluIGNhc2UgYHdpdGhTdHlsZXNgIGZhaWxzIHRvIGluamVjdCB3ZSBkb24ndCBuZWVkIHRoaXMgd2FybmluZ1xuXG4gICAgaWYgKGNsYXNzZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGVsZXZhdGlvbiAhPSBudWxsICYmIGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGlzIGVsZXZhdGlvbiBgXCIuY29uY2F0KGVsZXZhdGlvbiwgXCJgIGlzIG5vdCBpbXBsZW1lbnRlZC5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZWxldmF0aW9uJywgJ291dGxpbmVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBhcGVyJ1xufSkoUGFwZXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gJy4uL3V0aWxzL2RlYm91bmNlJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgb3duZXJXaW5kb3cgZnJvbSAnLi4vdXRpbHMvb3duZXJXaW5kb3cnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4uL01vZGFsJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IFBhcGVyIGZyb20gJy4uL1BhcGVyJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRPZmZzZXRUb3AocmVjdCwgdmVydGljYWwpIHtcbiAgdmFyIG9mZnNldCA9IDA7XG5cbiAgaWYgKHR5cGVvZiB2ZXJ0aWNhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSB2ZXJ0aWNhbDtcbiAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ2NlbnRlcicpIHtcbiAgICBvZmZzZXQgPSByZWN0LmhlaWdodCAvIDI7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdib3R0b20nKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9mZnNldExlZnQocmVjdCwgaG9yaXpvbnRhbCkge1xuICB2YXIgb2Zmc2V0ID0gMDtcblxuICBpZiAodHlwZW9mIGhvcml6b250YWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gaG9yaXpvbnRhbDtcbiAgfSBlbHNlIGlmIChob3Jpem9udGFsID09PSAnY2VudGVyJykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGggLyAyO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdyaWdodCcpIHtcbiAgICBvZmZzZXQgPSByZWN0LndpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKSB7XG4gIHJldHVybiBbdHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwsIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbF0ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG4sIFwicHhcIikgOiBuO1xuICB9KS5qb2luKCcgJyk7XG59IC8vIFN1bSB0aGUgc2Nyb2xsVG9wIGJldHdlZW4gdHdvIGVsZW1lbnRzLlxuXG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBlbGVtZW50ID0gY2hpbGQ7XG4gIHZhciBzY3JvbGxUb3AgPSAwO1xuXG4gIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQgIT09IHBhcmVudCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgc2Nyb2xsVG9wICs9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgcmV0dXJuIHNjcm9sbFRvcDtcbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbmNob3JFbCA9PT0gJ2Z1bmN0aW9uJyA/IGFuY2hvckVsKCkgOiBhbmNob3JFbDtcbn1cblxuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICBvdmVyZmxvd1g6ICdoaWRkZW4nLFxuICAgIC8vIFNvIHdlIHNlZSB0aGUgcG9wb3ZlciB3aGVuIGl0J3MgZW1wdHkuXG4gICAgLy8gSXQncyBtb3N0IGxpa2VseSBvbiBpc3N1ZSBvbiB1c2VybGFuZC5cbiAgICBtaW5XaWR0aDogMTYsXG4gICAgbWluSGVpZ2h0OiAxNixcbiAgICBtYXhXaWR0aDogJ2NhbGMoMTAwJSAtIDMycHgpJyxcbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICBvdXRsaW5lOiAwXG4gIH1cbn07XG52YXIgUG9wb3ZlciA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcG92ZXIocHJvcHMsIHJlZikge1xuICB2YXIgYWN0aW9uID0gcHJvcHMuYWN0aW9uLFxuICAgICAgYW5jaG9yRWwgPSBwcm9wcy5hbmNob3JFbCxcbiAgICAgIF9wcm9wcyRhbmNob3JPcmlnaW4gPSBwcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICBhbmNob3JPcmlnaW4gPSBfcHJvcHMkYW5jaG9yT3JpZ2luID09PSB2b2lkIDAgPyB7XG4gICAgdmVydGljYWw6ICd0b3AnLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9IDogX3Byb3BzJGFuY2hvck9yaWdpbixcbiAgICAgIGFuY2hvclBvc2l0aW9uID0gcHJvcHMuYW5jaG9yUG9zaXRpb24sXG4gICAgICBfcHJvcHMkYW5jaG9yUmVmZXJlbmMgPSBwcm9wcy5hbmNob3JSZWZlcmVuY2UsXG4gICAgICBhbmNob3JSZWZlcmVuY2UgPSBfcHJvcHMkYW5jaG9yUmVmZXJlbmMgPT09IHZvaWQgMCA/ICdhbmNob3JFbCcgOiBfcHJvcHMkYW5jaG9yUmVmZXJlbmMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb250YWluZXJQcm9wID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGVsZXZhdGlvbiA9IF9wcm9wcyRlbGV2YXRpb24gPT09IHZvaWQgMCA/IDggOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgZ2V0Q29udGVudEFuY2hvckVsID0gcHJvcHMuZ2V0Q29udGVudEFuY2hvckVsLFxuICAgICAgX3Byb3BzJG1hcmdpblRocmVzaG9sID0gcHJvcHMubWFyZ2luVGhyZXNob2xkLFxuICAgICAgbWFyZ2luVGhyZXNob2xkID0gX3Byb3BzJG1hcmdpblRocmVzaG9sID09PSB2b2lkIDAgPyAxNiA6IF9wcm9wcyRtYXJnaW5UaHJlc2hvbCxcbiAgICAgIG9uRW50ZXIgPSBwcm9wcy5vbkVudGVyLFxuICAgICAgb25FbnRlcmVkID0gcHJvcHMub25FbnRlcmVkLFxuICAgICAgb25FbnRlcmluZyA9IHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBvbkV4aXRlZCA9IHByb3BzLm9uRXhpdGVkLFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkUGFwZXJQcm9wcyA9IHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICBQYXBlclByb3BzID0gX3Byb3BzJFBhcGVyUHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJFBhcGVyUHJvcHMsXG4gICAgICBfcHJvcHMkdHJhbnNmb3JtT3JpZ2kgPSBwcm9wcy50cmFuc2Zvcm1PcmlnaW4sXG4gICAgICB0cmFuc2Zvcm1PcmlnaW4gPSBfcHJvcHMkdHJhbnNmb3JtT3JpZ2kgPT09IHZvaWQgMCA/IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0gOiBfcHJvcHMkdHJhbnNmb3JtT3JpZ2ksXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gR3JvdyA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvblByb3AgPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/ICdhdXRvJyA6IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSxcbiAgICAgIF9wcm9wcyRUcmFuc2l0aW9uUHJvcCA9IHByb3BzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IF9wcm9wcyRUcmFuc2l0aW9uUHJvcCA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkVHJhbnNpdGlvblByb3AsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYWN0aW9uXCIsIFwiYW5jaG9yRWxcIiwgXCJhbmNob3JPcmlnaW5cIiwgXCJhbmNob3JQb3NpdGlvblwiLCBcImFuY2hvclJlZmVyZW5jZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRhaW5lclwiLCBcImVsZXZhdGlvblwiLCBcImdldENvbnRlbnRBbmNob3JFbFwiLCBcIm1hcmdpblRocmVzaG9sZFwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJvbkV4aXRpbmdcIiwgXCJvcGVuXCIsIFwiUGFwZXJQcm9wc1wiLCBcInRyYW5zZm9ybU9yaWdpblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuXG4gIHZhciBwYXBlclJlZiA9IFJlYWN0LnVzZVJlZigpOyAvLyBSZXR1cm5zIHRoZSB0b3AvbGVmdCBvZmZzZXQgb2YgdGhlIHBvc2l0aW9uXG4gIC8vIHRvIGF0dGFjaCB0byBvbiB0aGUgYW5jaG9yIGVsZW1lbnQgKG9yIGJvZHkgaWYgbm9uZSBpcyBwcm92aWRlZClcblxuICB2YXIgZ2V0QW5jaG9yT2Zmc2V0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGNvbnRlbnRBbmNob3JPZmZzZXQpIHtcbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yUG9zaXRpb24nKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWFuY2hvclBvc2l0aW9uKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBuZWVkIHRvIHByb3ZpZGUgYSBgYW5jaG9yUG9zaXRpb25gIHByb3Agd2hlbiB1c2luZyAnICsgJzxQb3BvdmVyIGFuY2hvclJlZmVyZW5jZT1cImFuY2hvclBvc2l0aW9uXCIgLz4uJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFuY2hvclBvc2l0aW9uO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpOyAvLyBJZiBhbiBhbmNob3IgZWxlbWVudCB3YXNuJ3QgcHJvdmlkZWQsIGp1c3QgdXNlIHRoZSBwYXJlbnQgYm9keSBlbGVtZW50IG9mIHRoaXMgUG9wb3ZlclxuXG4gICAgdmFyIGFuY2hvckVsZW1lbnQgPSByZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEgPyByZXNvbHZlZEFuY2hvckVsIDogb3duZXJEb2N1bWVudChwYXBlclJlZi5jdXJyZW50KS5ib2R5O1xuICAgIHZhciBhbmNob3JSZWN0ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgYm94ID0gYW5jaG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogVGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFuY2hvclZlcnRpY2FsID0gY29udGVudEFuY2hvck9mZnNldCA9PT0gMCA/IGFuY2hvck9yaWdpbi52ZXJ0aWNhbCA6ICdjZW50ZXInO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGFuY2hvclJlY3QudG9wICsgZ2V0T2Zmc2V0VG9wKGFuY2hvclJlY3QsIGFuY2hvclZlcnRpY2FsKSxcbiAgICAgIGxlZnQ6IGFuY2hvclJlY3QubGVmdCArIGdldE9mZnNldExlZnQoYW5jaG9yUmVjdCwgYW5jaG9yT3JpZ2luLmhvcml6b250YWwpXG4gICAgfTtcbiAgfSwgW2FuY2hvckVsLCBhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCwgYW5jaG9yT3JpZ2luLnZlcnRpY2FsLCBhbmNob3JQb3NpdGlvbiwgYW5jaG9yUmVmZXJlbmNlXSk7IC8vIFJldHVybnMgdGhlIHZlcnRpY2FsIG9mZnNldCBvZiBpbm5lciBjb250ZW50IHRvIGFuY2hvciB0aGUgdHJhbnNmb3JtIG9uIGlmIHByb3ZpZGVkXG5cbiAgdmFyIGdldENvbnRlbnRBbmNob3JPZmZzZXQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHZhciBjb250ZW50QW5jaG9yT2Zmc2V0ID0gMDtcblxuICAgIGlmIChnZXRDb250ZW50QW5jaG9yRWwgJiYgYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yRWwnKSB7XG4gICAgICB2YXIgY29udGVudEFuY2hvckVsID0gZ2V0Q29udGVudEFuY2hvckVsKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoY29udGVudEFuY2hvckVsICYmIGVsZW1lbnQuY29udGFpbnMoY29udGVudEFuY2hvckVsKSkge1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQsIGNvbnRlbnRBbmNob3JFbCk7XG4gICAgICAgIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBjb250ZW50QW5jaG9yRWwub2Zmc2V0VG9wICsgY29udGVudEFuY2hvckVsLmNsaWVudEhlaWdodCAvIDIgLSBzY3JvbGxUb3AgfHwgMDtcbiAgICAgIH0gLy8gIT0gdGhlIGRlZmF1bHQgdmFsdWVcblxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoYW5jaG9yT3JpZ2luLnZlcnRpY2FsICE9PSAndG9wJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IGNhbiBub3QgY2hhbmdlIHRoZSBkZWZhdWx0IGBhbmNob3JPcmlnaW4udmVydGljYWxgIHZhbHVlICcsICd3aGVuIGFsc28gcHJvdmlkaW5nIHRoZSBgZ2V0Q29udGVudEFuY2hvckVsYCBwcm9wIHRvIHRoZSBwb3BvdmVyIGNvbXBvbmVudC4nLCAnT25seSB1c2Ugb25lIG9mIHRoZSB0d28gcHJvcHMuJywgJ1NldCBgZ2V0Q29udGVudEFuY2hvckVsYCB0byBgbnVsbCB8IHVuZGVmaW5lZGAnICsgJyBvciBsZWF2ZSBgYW5jaG9yT3JpZ2luLnZlcnRpY2FsYCB1bmNoYW5nZWQuJ10uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRlbnRBbmNob3JPZmZzZXQ7XG4gIH0sIFthbmNob3JPcmlnaW4udmVydGljYWwsIGFuY2hvclJlZmVyZW5jZSwgZ2V0Q29udGVudEFuY2hvckVsXSk7IC8vIFJldHVybiB0aGUgYmFzZSB0cmFuc2Zvcm0gb3JpZ2luIHVzaW5nIHRoZSBlbGVtZW50XG4gIC8vIGFuZCB0YWtpbmcgdGhlIGNvbnRlbnQgYW5jaG9yIG9mZnNldCBpbnRvIGFjY291bnQgaWYgaW4gdXNlXG5cbiAgdmFyIGdldFRyYW5zZm9ybU9yaWdpbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbGVtUmVjdCkge1xuICAgIHZhciBjb250ZW50QW5jaG9yT2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJ0aWNhbDogZ2V0T2Zmc2V0VG9wKGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwpICsgY29udGVudEFuY2hvck9mZnNldCxcbiAgICAgIGhvcml6b250YWw6IGdldE9mZnNldExlZnQoZWxlbVJlY3QsIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsKVxuICAgIH07XG4gIH0sIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXSk7XG4gIHZhciBnZXRQb3NpdGlvbmluZ1N0eWxlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBDaGVjayBpZiB0aGUgcGFyZW50IGhhcyByZXF1ZXN0ZWQgYW5jaG9yaW5nIG9uIGFuIGlubmVyIGNvbnRlbnQgbm9kZVxuICAgIHZhciBjb250ZW50QW5jaG9yT2Zmc2V0ID0gZ2V0Q29udGVudEFuY2hvck9mZnNldChlbGVtZW50KTtcbiAgICB2YXIgZWxlbVJlY3QgPSB7XG4gICAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICB9OyAvLyBHZXQgdGhlIHRyYW5zZm9ybSBvcmlnaW4gcG9pbnQgb24gdGhlIGVsZW1lbnQgaXRzZWxmXG5cbiAgICB2YXIgZWxlbVRyYW5zZm9ybU9yaWdpbiA9IGdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCwgY29udGVudEFuY2hvck9mZnNldCk7XG5cbiAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgbGVmdDogbnVsbCxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9IC8vIEdldCB0aGUgb2Zmc2V0IG9mIG9mIHRoZSBhbmNob3JpbmcgZWxlbWVudFxuXG5cbiAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gZ2V0QW5jaG9yT2Zmc2V0KGNvbnRlbnRBbmNob3JPZmZzZXQpOyAvLyBDYWxjdWxhdGUgZWxlbWVudCBwb3NpdGlvbmluZ1xuXG4gICAgdmFyIHRvcCA9IGFuY2hvck9mZnNldC50b3AgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgIHZhciBsZWZ0ID0gYW5jaG9yT2Zmc2V0LmxlZnQgLSBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWw7XG4gICAgdmFyIGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgZWxlbVJlY3Qud2lkdGg7IC8vIFVzZSB0aGUgcGFyZW50IHdpbmRvdyBvZiB0aGUgYW5jaG9yRWwgaWYgcHJvdmlkZWRcblxuICAgIHZhciBjb250YWluZXJXaW5kb3cgPSBvd25lcldpbmRvdyhnZXRBbmNob3JFbChhbmNob3JFbCkpOyAvLyBXaW5kb3cgdGhyZXNob2xkcyB0YWtpbmcgcmVxdWlyZWQgbWFyZ2luIGludG8gYWNjb3VudFxuXG4gICAgdmFyIGhlaWdodFRocmVzaG9sZCA9IGNvbnRhaW5lcldpbmRvdy5pbm5lckhlaWdodCAtIG1hcmdpblRocmVzaG9sZDtcbiAgICB2YXIgd2lkdGhUaHJlc2hvbGQgPSBjb250YWluZXJXaW5kb3cuaW5uZXJXaWR0aCAtIG1hcmdpblRocmVzaG9sZDsgLy8gQ2hlY2sgaWYgdGhlIHZlcnRpY2FsIGF4aXMgbmVlZHMgc2hpZnRpbmdcblxuICAgIGlmICh0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgIHZhciBkaWZmID0gdG9wIC0gbWFyZ2luVGhyZXNob2xkO1xuICAgICAgdG9wIC09IGRpZmY7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsICs9IGRpZmY7XG4gICAgfSBlbHNlIGlmIChib3R0b20gPiBoZWlnaHRUaHJlc2hvbGQpIHtcbiAgICAgIHZhciBfZGlmZiA9IGJvdHRvbSAtIGhlaWdodFRocmVzaG9sZDtcblxuICAgICAgdG9wIC09IF9kaWZmO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBfZGlmZjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGVsZW1SZWN0LmhlaWdodCA+IGhlaWdodFRocmVzaG9sZCAmJiBlbGVtUmVjdC5oZWlnaHQgJiYgaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIHBvcG92ZXIgY29tcG9uZW50IGlzIHRvbyB0YWxsLicsIFwiU29tZSBwYXJ0IG9mIGl0IGNhbiBub3QgYmUgc2VlbiBvbiB0aGUgc2NyZWVuIChcIi5jb25jYXQoZWxlbVJlY3QuaGVpZ2h0IC0gaGVpZ2h0VGhyZXNob2xkLCBcInB4KS5cIiksICdQbGVhc2UgY29uc2lkZXIgYWRkaW5nIGEgYG1heC1oZWlnaHRgIHRvIGltcHJvdmUgdGhlIHVzZXItZXhwZXJpZW5jZS4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSAvLyBDaGVjayBpZiB0aGUgaG9yaXpvbnRhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cblxuICAgIGlmIChsZWZ0IDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICB2YXIgX2RpZmYyID0gbGVmdCAtIG1hcmdpblRocmVzaG9sZDtcblxuICAgICAgbGVmdCAtPSBfZGlmZjI7XG4gICAgICBlbGVtVHJhbnNmb3JtT3JpZ2luLmhvcml6b250YWwgKz0gX2RpZmYyO1xuICAgIH0gZWxzZSBpZiAocmlnaHQgPiB3aWR0aFRocmVzaG9sZCkge1xuICAgICAgdmFyIF9kaWZmMyA9IHJpZ2h0IC0gd2lkdGhUaHJlc2hvbGQ7XG5cbiAgICAgIGxlZnQgLT0gX2RpZmYzO1xuICAgICAgZWxlbVRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IF9kaWZmMztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKHRvcCksIFwicHhcIiksXG4gICAgICBsZWZ0OiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKGxlZnQpLCBcInB4XCIpLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZShlbGVtVHJhbnNmb3JtT3JpZ2luKVxuICAgIH07XG4gIH0sIFthbmNob3JFbCwgYW5jaG9yUmVmZXJlbmNlLCBnZXRBbmNob3JPZmZzZXQsIGdldENvbnRlbnRBbmNob3JPZmZzZXQsIGdldFRyYW5zZm9ybU9yaWdpbiwgbWFyZ2luVGhyZXNob2xkXSk7XG4gIHZhciBzZXRQb3NpdGlvbmluZ1N0eWxlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHBhcGVyUmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcG9zaXRpb25pbmcgPSBnZXRQb3NpdGlvbmluZ1N0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgZWxlbWVudC5zdHlsZS50b3AgPSBwb3NpdGlvbmluZy50b3A7XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uaW5nLmxlZnQgIT09IG51bGwpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IHBvc2l0aW9uaW5nLmxlZnQ7XG4gICAgfVxuXG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwb3NpdGlvbmluZy50cmFuc2Zvcm1PcmlnaW47XG4gIH0sIFtnZXRQb3NpdGlvbmluZ1N0eWxlXSk7XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcoZWxlbWVudCwgaXNBcHBlYXJpbmcpIHtcbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUGFwZXJSZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHBhcGVyUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgc2V0UG9zaXRpb25pbmdTdHlsZXMoKTtcbiAgICB9XG4gIH0pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGFjdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBvcGVuID8ge1xuICAgICAgdXBkYXRlUG9zaXRpb246IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgICBzZXRQb3NpdGlvbmluZ1N0eWxlcygpO1xuICAgICAgfVxuICAgIH0gOiBudWxsO1xuICB9LCBbb3Blbiwgc2V0UG9zaXRpb25pbmdTdHlsZXNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFBvc2l0aW9uaW5nU3R5bGVzKCk7XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW29wZW4sIHNldFBvc2l0aW9uaW5nU3R5bGVzXSk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wO1xuXG4gIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID09PSAnYXV0bycgJiYgIVRyYW5zaXRpb25Db21wb25lbnQubXVpU3VwcG9ydEF1dG8pIHtcbiAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB1bmRlZmluZWQ7XG4gIH0gLy8gSWYgdGhlIGNvbnRhaW5lciBwcm9wIGlzIHByb3ZpZGVkLCB1c2UgdGhhdFxuICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgLy8gSWYgbmVpdGhlciBhcmUgcHJvdmlkZWQgbGV0IHRoZSBNb2RhbCB0YWtlIGNhcmUgb2YgY2hvb3NpbmcgdGhlIGNvbnRhaW5lclxuXG5cbiAgdmFyIGNvbnRhaW5lciA9IGNvbnRhaW5lclByb3AgfHwgKGFuY2hvckVsID8gb3duZXJEb2N1bWVudChnZXRBbmNob3JFbChhbmNob3JFbCkpLmJvZHkgOiB1bmRlZmluZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTW9kYWwsIF9leHRlbmRzKHtcbiAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICBvcGVuOiBvcGVuLFxuICAgIHJlZjogcmVmLFxuICAgIEJhY2tkcm9wUHJvcHM6IHtcbiAgICAgIGludmlzaWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlciksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb25Db21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IG9wZW4sXG4gICAgb25FbnRlcjogb25FbnRlcixcbiAgICBvbkVudGVyZWQ6IG9uRW50ZXJlZCxcbiAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICBvbkV4aXRlZDogb25FeGl0ZWQsXG4gICAgb25FeGl0aW5nOiBvbkV4aXRpbmcsXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIFRyYW5zaXRpb25Qcm9wcywge1xuICAgIG9uRW50ZXJpbmc6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFbnRlcmluZywgVHJhbnNpdGlvblByb3BzLm9uRW50ZXJpbmcpXG4gIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogZWxldmF0aW9uLFxuICAgIHJlZjogaGFuZGxlUGFwZXJSZWZcbiAgfSwgUGFwZXJQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnBhcGVyLCBQYXBlclByb3BzLmNsYXNzTmFtZSlcbiAgfSksIGNoaWxkcmVuKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgcmVmIGZvciBpbXBlcmF0aXZlIGFjdGlvbnMuXG4gICAqIEl0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHVwZGF0ZVBvc2l0aW9uKCkgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOiByZWZUeXBlLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXQuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgYW5jaG9yRWw6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLm9wZW4gJiYgKCFwcm9wcy5hbmNob3JSZWZlcmVuY2UgfHwgcHJvcHMuYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yRWwnKSkge1xuICAgICAgdmFyIHJlc29sdmVkQW5jaG9yRWwgPSBnZXRBbmNob3JFbChwcm9wcy5hbmNob3JFbCk7XG5cbiAgICAgIGlmIChyZXNvbHZlZEFuY2hvckVsICYmIHJlc29sdmVkQW5jaG9yRWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgdmFyIGJveCA9IHJlc29sdmVkQW5jaG9yRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgYm94LnRvcCA9PT0gMCAmJiBib3gubGVmdCA9PT0gMCAmJiBib3gucmlnaHQgPT09IDAgJiYgYm94LmJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgXCJJdCBzaG91bGQgYmUgYW4gRWxlbWVudCBpbnN0YW5jZSBidXQgaXQncyBgXCIuY29uY2F0KHJlc29sdmVkQW5jaG9yRWwsIFwiYCBpbnN0ZWFkLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIGFuY2hvciB3aGVyZSB0aGUgcG9wb3ZlcidzXG4gICAqIGBhbmNob3JFbGAgd2lsbCBhdHRhY2ggdG8uIFRoaXMgaXMgbm90IHVzZWQgd2hlbiB0aGVcbiAgICogYW5jaG9yUmVmZXJlbmNlIGlzICdhbmNob3JQb3NpdGlvbicuXG4gICAqXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0XS5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9zaXRpb24gdGhhdCBtYXkgYmUgdXNlZFxuICAgKiB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgY29vcmRpbmF0ZXMgYXJlIHJlbGF0aXZlIHRvXG4gICAqIHRoZSBhcHBsaWNhdGlvbidzIGNsaWVudCBhcmVhLlxuICAgKi9cbiAgYW5jaG9yUG9zaXRpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgbGVmdDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIHRvcDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGRldGVybWluZXMgd2hpY2ggYW5jaG9yIHByb3AgdG8gcmVmZXIgdG8gdG8gc2V0XG4gICAqIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvclJlZmVyZW5jZTogUHJvcFR5cGVzLm9uZU9mKFsnYW5jaG9yRWwnLCAnYW5jaG9yUG9zaXRpb24nLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgSFRNTCBlbGVtZW50LCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIHBhc3NlZCB0byB0aGUgTW9kYWwgY29tcG9uZW50LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSBhbmNob3JFbCdzIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIFRoZSBlbGV2YXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBlbGV2YXRpb246IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGluIG9yZGVyIHRvIHJldHJpZXZlIHRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50LlxuICAgKiBJdCdzIHRoZSBvcHBvc2l0ZSBvZiB0aGUgYGFuY2hvckVsYCBwcm9wLlxuICAgKiBUaGUgY29udGVudCBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgYW4gZWxlbWVudCBpbnNpZGUgdGhlIHBvcG92ZXIuXG4gICAqIEl0J3MgdXNlZCB0byBjb3JyZWN0bHkgc2Nyb2xsIGFuZCBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgcG9zaXRpb25pbmcgc3RyYXRlZ3kgdHJpZXMgdG8gbWFrZSB0aGUgY29udGVudCBhbmNob3IgZWxlbWVudCBqdXN0IGFib3ZlIHRoZVxuICAgKiBhbmNob3IgZWxlbWVudC5cbiAgICovXG4gIGdldENvbnRlbnRBbmNob3JFbDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBob3cgY2xvc2UgdG8gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdyB0aGUgcG9wb3ZlciBjYW4gYXBwZWFyLlxuICAgKi9cbiAgbWFyZ2luVGhyZXNob2xkOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGVudGVyaW5nLlxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBleGl0aW5nLlxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcG9wb3ZlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLnNoYXBlKHtcbiAgICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaFxuICAgKiB3aWxsIGF0dGFjaCB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b20sIHgocHgpXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHQsIHgocHgpXS5cbiAgICovXG4gIHRyYW5zZm9ybU9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSwgUHJvcFR5cGVzLm51bWJlcl0pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICdjZW50ZXInLCAndG9wJ10pLCBQcm9wVHlwZXMubnVtYmVyXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgdHJhbnNpdGlvbi5cbiAgICogW0ZvbGxvdyB0aGlzIGd1aWRlXSgvY29tcG9uZW50cy90cmFuc2l0aW9ucy8jdHJhbnNpdGlvbmNvbXBvbmVudC1wcm9wKSB0byBsZWFybiBtb3JlIGFib3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BUcmFuc2l0aW9uYF0oaHR0cDovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3RyYW5zaXRpb24jVHJhbnNpdGlvbi1wcm9wcykgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQb3BvdmVyJ1xufSkoUG9wb3Zlcik7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBMaXN0Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBMaXN0Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdMaXN0Q29udGV4dCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDb250ZXh0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBMaXN0Q29udGV4dCBmcm9tICcuL0xpc3RDb250ZXh0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlUGFkZGluZz17ZmFsc2V9YC4gKi9cbiAgcGFkZGluZzoge1xuICAgIHBhZGRpbmdUb3A6IDgsXG4gICAgcGFkZGluZ0JvdHRvbTogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgZGVuc2UuICovXG4gIGRlbnNlOiB7fSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGEgYHN1YmhlYWRlcmAgaXMgcHJvdmlkZWQuICovXG4gIHN1YmhlYWRlcjoge1xuICAgIHBhZGRpbmdUb3A6IDBcbiAgfVxufTtcbnZhciBMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlzdChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3VsJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGVuc2UgPSBwcm9wcy5kZW5zZSxcbiAgICAgIGRlbnNlID0gX3Byb3BzJGRlbnNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkZW5zZSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlUGFkZGluZyA9IHByb3BzLmRpc2FibGVQYWRkaW5nLFxuICAgICAgZGlzYWJsZVBhZGRpbmcgPSBfcHJvcHMkZGlzYWJsZVBhZGRpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQYWRkaW5nLFxuICAgICAgc3ViaGVhZGVyID0gcHJvcHMuc3ViaGVhZGVyLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRlbnNlXCIsIFwiZGlzYWJsZVBhZGRpbmdcIiwgXCJzdWJoZWFkZXJcIl0pO1xuXG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlbnNlOiBkZW5zZVxuICAgIH07XG4gIH0sIFtkZW5zZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGlzdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGRlbnNlICYmIGNsYXNzZXMuZGVuc2UsICFkaXNhYmxlUGFkZGluZyAmJiBjbGFzc2VzLnBhZGRpbmcsIHN1YmhlYWRlciAmJiBjbGFzc2VzLnN1YmhlYWRlciksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBzdWJoZWFkZXIsIGNoaWxkcmVuKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IExpc3QucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgd2lsbCBiZSB1c2VkIGZvclxuICAgKiB0aGUgbGlzdCBhbmQgbGlzdCBpdGVtcy5cbiAgICogVGhlIHByb3AgaXMgYXZhaWxhYmxlIHRvIGRlc2NlbmRhbnQgY29tcG9uZW50cyBhcyB0aGUgYGRlbnNlYCBjb250ZXh0LlxuICAgKi9cbiAgZGVuc2U6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHZlcnRpY2FsIHBhZGRpbmcgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGxpc3QuXG4gICAqL1xuICBkaXNhYmxlUGFkZGluZzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBzdWJoZWFkZXIsIG5vcm1hbGx5IGBMaXN0U3ViaGVhZGVyYC5cbiAgICovXG4gIHN1YmhlYWRlcjogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdCdcbn0pKExpc3QpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IExpc3QgZnJvbSAnLi4vTGlzdCc7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuXG5mdW5jdGlvbiBuZXh0SXRlbShsaXN0LCBpdGVtLCBkaXNhYmxlTGlzdFdyYXApIHtcbiAgaWYgKGxpc3QgPT09IGl0ZW0pIHtcbiAgICByZXR1cm4gbGlzdC5maXJzdENoaWxkO1xuICB9XG5cbiAgaWYgKGl0ZW0gJiYgaXRlbS5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICByZXR1cm4gaXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbnVsbCA6IGxpc3QuZmlyc3RDaGlsZDtcbn1cblxuZnVuY3Rpb24gcHJldmlvdXNJdGVtKGxpc3QsIGl0ZW0sIGRpc2FibGVMaXN0V3JhcCkge1xuICBpZiAobGlzdCA9PT0gaXRlbSkge1xuICAgIHJldHVybiBkaXNhYmxlTGlzdFdyYXAgPyBsaXN0LmZpcnN0Q2hpbGQgOiBsaXN0Lmxhc3RDaGlsZDtcbiAgfVxuXG4gIGlmIChpdGVtICYmIGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIHJldHVybiBpdGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gZGlzYWJsZUxpc3RXcmFwID8gbnVsbCA6IGxpc3QubGFzdENoaWxkO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q3JpdGVyaWFNYXRjaGVzKG5leHRGb2N1cywgdGV4dENyaXRlcmlhKSB7XG4gIGlmICh0ZXh0Q3JpdGVyaWEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHRleHQgPSBuZXh0Rm9jdXMuaW5uZXJUZXh0O1xuXG4gIGlmICh0ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBqc2RvbSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJUZXh0XG4gICAgdGV4dCA9IG5leHRGb2N1cy50ZXh0Q29udGVudDtcbiAgfVxuXG4gIHRleHQgPSB0ZXh0LnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0ZXh0Q3JpdGVyaWEucmVwZWF0aW5nKSB7XG4gICAgcmV0dXJuIHRleHRbMF0gPT09IHRleHRDcml0ZXJpYS5rZXlzWzBdO1xuICB9XG5cbiAgcmV0dXJuIHRleHQuaW5kZXhPZih0ZXh0Q3JpdGVyaWEua2V5cy5qb2luKCcnKSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgdHJhdmVyc2FsRnVuY3Rpb24sIHRleHRDcml0ZXJpYSkge1xuICB2YXIgd3JhcHBlZE9uY2UgPSBmYWxzZTtcbiAgdmFyIG5leHRGb2N1cyA9IHRyYXZlcnNhbEZ1bmN0aW9uKGxpc3QsIGN1cnJlbnRGb2N1cywgY3VycmVudEZvY3VzID8gZGlzYWJsZUxpc3RXcmFwIDogZmFsc2UpO1xuXG4gIHdoaWxlIChuZXh0Rm9jdXMpIHtcbiAgICAvLyBQcmV2ZW50IGluZmluaXRlIGxvb3AuXG4gICAgaWYgKG5leHRGb2N1cyA9PT0gbGlzdC5maXJzdENoaWxkKSB7XG4gICAgICBpZiAod3JhcHBlZE9uY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB3cmFwcGVkT25jZSA9IHRydWU7XG4gICAgfSAvLyBTYW1lIGxvZ2ljIGFzIHVzZUF1dG9jb21wbGV0ZS5qc1xuXG5cbiAgICB2YXIgbmV4dEZvY3VzRGlzYWJsZWQgPSBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlID8gZmFsc2UgOiBuZXh0Rm9jdXMuZGlzYWJsZWQgfHwgbmV4dEZvY3VzLmdldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcpID09PSAndHJ1ZSc7XG5cbiAgICBpZiAoIW5leHRGb2N1cy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgfHwgIXRleHRDcml0ZXJpYU1hdGNoZXMobmV4dEZvY3VzLCB0ZXh0Q3JpdGVyaWEpIHx8IG5leHRGb2N1c0Rpc2FibGVkKSB7XG4gICAgICAvLyBNb3ZlIHRvIHRoZSBuZXh0IGVsZW1lbnQuXG4gICAgICBuZXh0Rm9jdXMgPSB0cmF2ZXJzYWxGdW5jdGlvbihsaXN0LCBuZXh0Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRGb2N1cy5mb2N1cygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogQSBwZXJtYW5lbnRseSBkaXNwbGF5ZWQgbWVudSBmb2xsb3dpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLXByYWN0aWNlcy8jbWVudWJ1dHRvbi5cbiAqIEl0J3MgZXhwb3NlZCB0byBoZWxwIGN1c3RvbWl6YXRpb24gb2YgdGhlIFtgTWVudWBdKC9hcGkvbWVudS8pIGNvbXBvbmVudC4gSWYgeW91XG4gKiB1c2UgaXQgc2VwYXJhdGVseSB5b3UgbmVlZCB0byBtb3ZlIGZvY3VzIGludG8gdGhlIGNvbXBvbmVudCBtYW51YWxseS4gT25jZVxuICogdGhlIGZvY3VzIGlzIHBsYWNlZCBpbnNpZGUgdGhlIGNvbXBvbmVudCBpdCBpcyBmdWxseSBrZXlib2FyZCBhY2Nlc3NpYmxlLlxuICovXG5cbnZhciBNZW51TGlzdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE1lbnVMaXN0KHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbnMgPSBwcm9wcy5hY3Rpb25zLFxuICAgICAgX3Byb3BzJGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9Gb2N1cyA9IF9wcm9wcyRhdXRvRm9jdXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGF1dG9Gb2N1cyxcbiAgICAgIF9wcm9wcyRhdXRvRm9jdXNJdGVtID0gcHJvcHMuYXV0b0ZvY3VzSXRlbSxcbiAgICAgIGF1dG9Gb2N1c0l0ZW0gPSBfcHJvcHMkYXV0b0ZvY3VzSXRlbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzSXRlbSxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWRJdGVtc0YgPSBwcm9wcy5kaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLFxuICAgICAgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSA9IF9wcm9wcyRkaXNhYmxlZEl0ZW1zRiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWRJdGVtc0YsXG4gICAgICBfcHJvcHMkZGlzYWJsZUxpc3RXcmEgPSBwcm9wcy5kaXNhYmxlTGlzdFdyYXAsXG4gICAgICBkaXNhYmxlTGlzdFdyYXAgPSBfcHJvcHMkZGlzYWJsZUxpc3RXcmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVMaXN0V3JhLFxuICAgICAgb25LZXlEb3duID0gcHJvcHMub25LZXlEb3duLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc2VsZWN0ZWRNZW51JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvbnNcIiwgXCJhdXRvRm9jdXNcIiwgXCJhdXRvRm9jdXNJdGVtXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlXCIsIFwiZGlzYWJsZUxpc3RXcmFwXCIsIFwib25LZXlEb3duXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGxpc3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciB0ZXh0Q3JpdGVyaWFSZWYgPSBSZWFjdC51c2VSZWYoe1xuICAgIGtleXM6IFtdLFxuICAgIHJlcGVhdGluZzogdHJ1ZSxcbiAgICBwcmV2aW91c0tleU1hdGNoZWQ6IHRydWUsXG4gICAgbGFzdFRpbWU6IG51bGxcbiAgfSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzKSB7XG4gICAgICBsaXN0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG4gIH0sIFthdXRvRm9jdXNdKTtcbiAgUmVhY3QudXNlSW1wZXJhdGl2ZUhhbmRsZShhY3Rpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyOiBmdW5jdGlvbiBhZGp1c3RTdHlsZUZvclNjcm9sbGJhcihjb250YWluZXJFbGVtZW50LCB0aGVtZSkge1xuICAgICAgICAvLyBMZXQncyBpZ25vcmUgdGhhdCBwaWVjZSBvZiBsb2dpYyBpZiB1c2VycyBhcmUgYWxyZWFkeSBvdmVycmlkaW5nIHRoZSB3aWR0aFxuICAgICAgICAvLyBvZiB0aGUgbWVudS5cbiAgICAgICAgdmFyIG5vRXhwbGljaXRXaWR0aCA9ICFsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGg7XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgbGlzdFJlZi5jdXJyZW50LmNsaWVudEhlaWdodCAmJiBub0V4cGxpY2l0V2lkdGgpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsYmFyU2l6ZSA9IFwiXCIuY29uY2F0KGdldFNjcm9sbGJhclNpemUodHJ1ZSksIFwicHhcIik7XG4gICAgICAgICAgbGlzdFJlZi5jdXJyZW50LnN0eWxlW3RoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCddID0gc2Nyb2xsYmFyU2l6ZTtcbiAgICAgICAgICBsaXN0UmVmLmN1cnJlbnQuc3R5bGUud2lkdGggPSBcImNhbGMoMTAwJSArIFwiLmNvbmNhdChzY3JvbGxiYXJTaXplLCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdFJlZi5jdXJyZW50O1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICB2YXIgaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgICB2YXIgbGlzdCA9IGxpc3RSZWYuY3VycmVudDtcbiAgICB2YXIga2V5ID0gZXZlbnQua2V5O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtFbGVtZW50fSAtIHdpbGwgYWx3YXlzIGJlIGRlZmluZWQgc2luY2Ugd2UgYXJlIGluIGEga2V5ZG93biBoYW5kbGVyXG4gICAgICogYXR0YWNoZWQgdG8gYW4gZWxlbWVudC4gQSBrZXlkb3duIGV2ZW50IGlzIGVpdGhlciBkaXNwYXRjaGVkIHRvIHRoZSBhY3RpdmVFbGVtZW50XG4gICAgICogb3IgZG9jdW1lbnQuYm9keSBvciBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuIE9ubHkgdGhlIGZpcnN0IGNhc2Ugd2lsbFxuICAgICAqIHRyaWdnZXIgdGhpcyBzcGVjaWZpYyBoYW5kbGVyLlxuICAgICAqL1xuXG4gICAgdmFyIGN1cnJlbnRGb2N1cyA9IG93bmVyRG9jdW1lbnQobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmIChrZXkgPT09ICdBcnJvd0Rvd24nKSB7XG4gICAgICAvLyBQcmV2ZW50IHNjcm9sbCBvZiB0aGUgcGFnZVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBjdXJyZW50Rm9jdXMsIGRpc2FibGVMaXN0V3JhcCwgZGlzYWJsZWRJdGVtc0ZvY3VzYWJsZSwgbmV4dEl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnQXJyb3dVcCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgY3VycmVudEZvY3VzLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIHByZXZpb3VzSXRlbSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdIb21lJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1vdmVGb2N1cyhsaXN0LCBudWxsLCBkaXNhYmxlTGlzdFdyYXAsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBtb3ZlRm9jdXMobGlzdCwgbnVsbCwgZGlzYWJsZUxpc3RXcmFwLCBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlLCBwcmV2aW91c0l0ZW0pO1xuICAgIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNyaXRlcmlhID0gdGV4dENyaXRlcmlhUmVmLmN1cnJlbnQ7XG4gICAgICB2YXIgbG93ZXJLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBjdXJyVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEua2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFJlc2V0XG4gICAgICAgIGlmIChjdXJyVGltZSAtIGNyaXRlcmlhLmxhc3RUaW1lID4gNTAwKSB7XG4gICAgICAgICAgY3JpdGVyaWEua2V5cyA9IFtdO1xuICAgICAgICAgIGNyaXRlcmlhLnJlcGVhdGluZyA9IHRydWU7XG4gICAgICAgICAgY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjcml0ZXJpYS5yZXBlYXRpbmcgJiYgbG93ZXJLZXkgIT09IGNyaXRlcmlhLmtleXNbMF0pIHtcbiAgICAgICAgICBjcml0ZXJpYS5yZXBlYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjcml0ZXJpYS5sYXN0VGltZSA9IGN1cnJUaW1lO1xuICAgICAgY3JpdGVyaWEua2V5cy5wdXNoKGxvd2VyS2V5KTtcbiAgICAgIHZhciBrZWVwRm9jdXNPbkN1cnJlbnQgPSBjdXJyZW50Rm9jdXMgJiYgIWNyaXRlcmlhLnJlcGVhdGluZyAmJiB0ZXh0Q3JpdGVyaWFNYXRjaGVzKGN1cnJlbnRGb2N1cywgY3JpdGVyaWEpO1xuXG4gICAgICBpZiAoY3JpdGVyaWEucHJldmlvdXNLZXlNYXRjaGVkICYmIChrZWVwRm9jdXNPbkN1cnJlbnQgfHwgbW92ZUZvY3VzKGxpc3QsIGN1cnJlbnRGb2N1cywgZmFsc2UsIGRpc2FibGVkSXRlbXNGb2N1c2FibGUsIG5leHRJdGVtLCBjcml0ZXJpYSkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcml0ZXJpYS5wcmV2aW91c0tleU1hdGNoZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlT3duUmVmID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gI1N0cmljdE1vZGUgcmVhZHlcbiAgICBsaXN0UmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYoaGFuZGxlT3duUmVmLCByZWYpO1xuICAvKipcbiAgICogdGhlIGluZGV4IG9mIHRoZSBpdGVtIHNob3VsZCByZWNlaXZlIGZvY3VzXG4gICAqIGluIGEgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAgaXQncyB0aGUgZmlyc3QgYHNlbGVjdGVkYCBpdGVtXG4gICAqIG90aGVyd2lzZSBpdCdzIHRoZSB2ZXJ5IGZpcnN0IGl0ZW0uXG4gICAqL1xuXG4gIHZhciBhY3RpdmVJdGVtSW5kZXggPSAtMTsgLy8gc2luY2Ugd2UgaW5qZWN0IGZvY3VzIHJlbGF0ZWQgcHJvcHMgaW50byBjaGlsZHJlbiB3ZSBoYXZlIHRvIGRvIGEgbG9va2FoZWFkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgYHNlbGVjdGVkYCBpdGVtLiBXZSdyZSBsb29raW5nIGZvciB0aGUgbGFzdCBgc2VsZWN0ZWRgXG4gIC8vIGl0ZW0gYW5kIHVzZSB0aGUgZmlyc3QgdmFsaWQgaXRlbSBhcyBhIGZhbGxiYWNrXG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmICghIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBNZW51IGNvbXBvbmVudCBkb2Vzbid0IGFjY2VwdCBhIEZyYWdtZW50IGFzIGEgY2hpbGQuXCIsICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgaWYgKHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnICYmIGNoaWxkLnByb3BzLnNlbGVjdGVkKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBpdGVtcyA9IFJlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgIGlmIChpbmRleCA9PT0gYWN0aXZlSXRlbUluZGV4KSB7XG4gICAgICB2YXIgbmV3Q2hpbGRQcm9wcyA9IHt9O1xuXG4gICAgICBpZiAoYXV0b0ZvY3VzSXRlbSkge1xuICAgICAgICBuZXdDaGlsZFByb3BzLmF1dG9Gb2N1cyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZC5wcm9wcy50YWJJbmRleCA9PT0gdW5kZWZpbmVkICYmIHZhcmlhbnQgPT09ICdzZWxlY3RlZE1lbnUnKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvcHMudGFiSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgbmV3Q2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpc3QsIF9leHRlbmRzKHtcbiAgICByb2xlOiBcIm1lbnVcIixcbiAgICByZWY6IGhhbmRsZVJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgdGFiSW5kZXg6IGF1dG9Gb2N1cyA/IDAgOiAtMVxuICB9LCBvdGhlciksIGl0ZW1zKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudUxpc3QucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB3aWxsIGZvY3VzIHRoZSBgW3JvbGU9XCJtZW51XCJdYCBjb250YWluZXIgYW5kIG1vdmUgaW50byB0YWIgb3JkZXIuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgZm9jdXMgdGhlIGZpcnN0IG1lbnVpdGVtIGlmIGB2YXJpYW50PVwibWVudVwiYCBvciBzZWxlY3RlZCBpdGVtXG4gICAqIGlmIGB2YXJpYW50PVwic2VsZWN0ZWRNZW51XCJgLlxuICAgKi9cbiAgYXV0b0ZvY3VzSXRlbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE1lbnVMaXN0IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHdpbGwgYWxsb3cgZm9jdXMgb24gZGlzYWJsZWQgaXRlbXMuXG4gICAqL1xuICBkaXNhYmxlZEl0ZW1zRm9jdXNhYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbWVudSBpdGVtcyB3aWxsIG5vdCB3cmFwIGZvY3VzLlxuICAgKi9cbiAgZGlzYWJsZUxpc3RXcmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25LZXlEb3duOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLiBVc2UgYG1lbnVgIHRvIHByZXZlbnQgc2VsZWN0ZWQgaXRlbXMgZnJvbSBpbXBhY3RpbmcgdGhlIGluaXRpYWwgZm9jdXNcbiAgICogYW5kIHRoZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgcmVsYXRpdmUgdG8gdGhlIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnbWVudScsICdzZWxlY3RlZE1lbnUnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBNZW51TGlzdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc0ZyYWdtZW50IH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgSFRNTEVsZW1lbnRUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBQb3BvdmVyIGZyb20gJy4uL1BvcG92ZXInO1xuaW1wb3J0IE1lbnVMaXN0IGZyb20gJy4uL01lbnVMaXN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbnZhciBSVExfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdyaWdodCdcbn07XG52YXIgTFRSX09SSUdJTiA9IHtcbiAgdmVydGljYWw6ICd0b3AnLFxuICBob3Jpem9udGFsOiAnbGVmdCdcbn07XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICBwYXBlcjoge1xuICAgIC8vIHNwZWNaOiBUaGUgbWF4aW11bSBoZWlnaHQgb2YgYSBzaW1wbGUgbWVudSBzaG91bGQgYmUgb25lIG9yIG1vcmUgcm93cyBsZXNzIHRoYW4gdGhlIHZpZXdcbiAgICAvLyBoZWlnaHQuIFRoaXMgZW5zdXJlcyBhIHRhcGFibGUgYXJlYSBvdXRzaWRlIG9mIHRoZSBzaW1wbGUgbWVudSB3aXRoIHdoaWNoIHRvIGRpc21pc3NcbiAgICAvLyB0aGUgbWVudS5cbiAgICBtYXhIZWlnaHQ6ICdjYWxjKDEwMCUgLSA5NnB4KScsXG4gICAgLy8gQWRkIGlPUyBtb21lbnR1bSBzY3JvbGxpbmcuXG4gICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYExpc3RgIGNvbXBvbmVudCB2aWEgYE1lbnVMaXN0YC4gKi9cbiAgbGlzdDoge1xuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMFxuICB9XG59O1xudmFyIE1lbnUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNZW51KHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBhdXRvRm9jdXMgPSBfcHJvcHMkYXV0b0ZvY3VzID09PSB2b2lkIDAgPyB0cnVlIDogX3Byb3BzJGF1dG9Gb2N1cyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXNJdGVtLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gPSBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVBdXRvRm9jLFxuICAgICAgX3Byb3BzJE1lbnVMaXN0UHJvcHMgPSBwcm9wcy5NZW51TGlzdFByb3BzLFxuICAgICAgTWVudUxpc3RQcm9wcyA9IF9wcm9wcyRNZW51TGlzdFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNZW51TGlzdFByb3BzLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyaW5nID0gcHJvcHMub25FbnRlcmluZyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgUG9wb3ZlckNsYXNzZXMgPSBwcm9wcy5Qb3BvdmVyQ2xhc3NlcyxcbiAgICAgIF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9IHByb3BzLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9wcm9wcyR0cmFuc2l0aW9uRHVyYSA9PT0gdm9pZCAwID8gJ2F1dG8nIDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc2VsZWN0ZWRNZW51JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImF1dG9Gb2N1c1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImRpc2FibGVBdXRvRm9jdXNJdGVtXCIsIFwiTWVudUxpc3RQcm9wc1wiLCBcIm9uQ2xvc2VcIiwgXCJvbkVudGVyaW5nXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJQb3BvdmVyQ2xhc3Nlc1wiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBhdXRvRm9jdXNJdGVtID0gYXV0b0ZvY3VzICYmICFkaXNhYmxlQXV0b0ZvY3VzSXRlbSAmJiBvcGVuO1xuICB2YXIgbWVudUxpc3RBY3Rpb25zUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgY29udGVudEFuY2hvclJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgZ2V0Q29udGVudEFuY2hvckVsID0gZnVuY3Rpb24gZ2V0Q29udGVudEFuY2hvckVsKCkge1xuICAgIHJldHVybiBjb250ZW50QW5jaG9yUmVmLmN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcoZWxlbWVudCwgaXNBcHBlYXJpbmcpIHtcbiAgICBpZiAobWVudUxpc3RBY3Rpb25zUmVmLmN1cnJlbnQpIHtcbiAgICAgIG1lbnVMaXN0QWN0aW9uc1JlZi5jdXJyZW50LmFkanVzdFN0eWxlRm9yU2Nyb2xsYmFyKGVsZW1lbnQsIHRoZW1lKTtcbiAgICB9XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhlbGVtZW50LCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVMaXN0S2V5RG93biA9IGZ1bmN0aW9uIGhhbmRsZUxpc3RLZXlEb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ1RhYicpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICd0YWJLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogdGhlIGluZGV4IG9mIHRoZSBpdGVtIHNob3VsZCByZWNlaXZlIGZvY3VzXG4gICAqIGluIGEgYHZhcmlhbnQ9XCJzZWxlY3RlZE1lbnVcImAgaXQncyB0aGUgZmlyc3QgYHNlbGVjdGVkYCBpdGVtXG4gICAqIG90aGVyd2lzZSBpdCdzIHRoZSB2ZXJ5IGZpcnN0IGl0ZW0uXG4gICAqL1xuXG5cbiAgdmFyIGFjdGl2ZUl0ZW1JbmRleCA9IC0xOyAvLyBzaW5jZSB3ZSBpbmplY3QgZm9jdXMgcmVsYXRlZCBwcm9wcyBpbnRvIGNoaWxkcmVuIHdlIGhhdmUgdG8gZG8gYSBsb29rYWhlYWRcbiAgLy8gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBgc2VsZWN0ZWRgIGl0ZW0uIFdlJ3JlIGxvb2tpbmcgZm9yIHRoZSBsYXN0IGBzZWxlY3RlZGBcbiAgLy8gaXRlbSBhbmQgdXNlIHRoZSBmaXJzdCB2YWxpZCBpdGVtIGFzIGEgZmFsbGJhY2tcblxuICBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpc0ZyYWdtZW50KGNoaWxkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgTWVudSBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGlmICh2YXJpYW50ICE9PSBcIm1lbnVcIiAmJiBjaGlsZC5wcm9wcy5zZWxlY3RlZCkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aXZlSXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaXRlbXMgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IGFjdGl2ZUl0ZW1JbmRleCkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoaW5zdGFuY2UpIHtcbiAgICAgICAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgICAgICAgIGNvbnRlbnRBbmNob3JSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgICAgICAgICBzZXRSZWYoY2hpbGQucmVmLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZDtcbiAgfSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQb3BvdmVyLCBfZXh0ZW5kcyh7XG4gICAgZ2V0Q29udGVudEFuY2hvckVsOiBnZXRDb250ZW50QW5jaG9yRWwsXG4gICAgY2xhc3NlczogUG9wb3ZlckNsYXNzZXMsXG4gICAgb25DbG9zZTogb25DbG9zZSxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBhbmNob3JPcmlnaW46IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyBSVExfT1JJR0lOIDogTFRSX09SSUdJTixcbiAgICB0cmFuc2Zvcm1PcmlnaW46IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyBSVExfT1JJR0lOIDogTFRSX09SSUdJTixcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgUGFwZXJQcm9wcywge1xuICAgICAgY2xhc3NlczogX2V4dGVuZHMoe30sIFBhcGVyUHJvcHMuY2xhc3Nlcywge1xuICAgICAgICByb290OiBjbGFzc2VzLnBhcGVyXG4gICAgICB9KVxuICAgIH0pLFxuICAgIG9wZW46IG9wZW4sXG4gICAgcmVmOiByZWYsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNZW51TGlzdCwgX2V4dGVuZHMoe1xuICAgIG9uS2V5RG93bjogaGFuZGxlTGlzdEtleURvd24sXG4gICAgYWN0aW9uczogbWVudUxpc3RBY3Rpb25zUmVmLFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzICYmIChhY3RpdmVJdGVtSW5kZXggPT09IC0xIHx8IGRpc2FibGVBdXRvRm9jdXNJdGVtKSxcbiAgICBhdXRvRm9jdXNJdGVtOiBhdXRvRm9jdXNJdGVtLFxuICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgfSwgTWVudUxpc3RQcm9wcywge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLmxpc3QsIE1lbnVMaXN0UHJvcHMuY2xhc3NOYW1lKVxuICB9KSwgaXRlbXMpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTWVudS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXQuXG4gICAqIEl0J3MgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBtZW51LlxuICAgKi9cbiAgYW5jaG9yRWw6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5vbmVPZlR5cGUoW0hUTUxFbGVtZW50VHlwZSwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgIChEZWZhdWx0KSB3aWxsIGZvY3VzIHRoZSBgW3JvbGU9XCJtZW51XCJdYCBpZiBubyBmb2N1c2FibGUgY2hpbGQgaXMgZm91bmQuIERpc2FibGVkXG4gICAqIGNoaWxkcmVuIGFyZSBub3QgZm9jdXNhYmxlLiBJZiB5b3Ugc2V0IHRoaXMgcHJvcCB0byBgZmFsc2VgIGZvY3VzIHdpbGwgYmUgcGxhY2VkXG4gICAqIG9uIHRoZSBwYXJlbnQgbW9kYWwgY29udGFpbmVyLiBUaGlzIGhhcyBzZXZlcmUgYWNjZXNzaWJpbGl0eSBpbXBsaWNhdGlvbnNcbiAgICogYW5kIHNob3VsZCBvbmx5IGJlIGNvbnNpZGVyZWQgaWYgeW91IG1hbmFnZSBmb2N1cyBvdGhlcndpc2UuXG4gICAqL1xuICBhdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBNZW51IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBXaGVuIG9wZW5pbmcgdGhlIG1lbnUgd2lsbCBub3QgZm9jdXMgdGhlIGFjdGl2ZSBpdGVtIGJ1dCB0aGUgYFtyb2xlPVwibWVudVwiXWBcbiAgICogdW5sZXNzIGBhdXRvRm9jdXNgIGlzIGFsc28gc2V0IHRvIGBmYWxzZWAuIE5vdCB1c2luZyB0aGUgZGVmYXVsdCBtZWFucyBub3RcbiAgICogZm9sbG93aW5nIFdBSS1BUklBIGF1dGhvcmluZyBwcmFjdGljZXMuIFBsZWFzZSBiZSBjb25zaWRlcmF0ZSBhYm91dCBwb3NzaWJsZVxuICAgKiBhY2Nlc3NpYmlsaXR5IGltcGxpY2F0aW9ucy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXNJdGVtOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51TGlzdGBdKC9hcGkvbWVudS1saXN0LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVMaXN0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAsIGBcInRhYktleURvd25cImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNZW51IGVudGVycy5cbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGhhcyBlbnRlcmVkLlxuICAgKi9cbiAgb25FbnRlcmVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIE1lbnUgZXhpdHMuXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1lbnUgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIFBhcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wIGFwcGxpZWQgdG8gdGhlIFtgUG9wb3ZlcmBdKC9hcGkvcG9wb3Zlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQb3BvdmVyQ2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgdHJhbnNpdGlvbiBpbiBgbXNgLCBvciAnYXV0bydcbiAgICovXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBhcHBlYXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuIFVzZSBgbWVudWAgdG8gcHJldmVudCBzZWxlY3RlZCBpdGVtcyBmcm9tIGltcGFjdGluZyB0aGUgaW5pdGlhbCBmb2N1c1xuICAgKiBhbmQgdGhlIHZlcnRpY2FsIGFsaWdubWVudCByZWxhdGl2ZSB0byB0aGUgYW5jaG9yIGVsZW1lbnQuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydtZW51JywgJ3NlbGVjdGVkTWVudSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlNZW51J1xufSkoTWVudSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzRnJhZ21lbnQgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgTWVudSBmcm9tICcuLi9NZW51L01lbnUnO1xuaW1wb3J0IHsgaXNGaWxsZWQgfSBmcm9tICcuLi9JbnB1dEJhc2UvdXRpbHMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgdXNlQ29udHJvbGxlZCBmcm9tICcuLi91dGlscy91c2VDb250cm9sbGVkJztcblxuZnVuY3Rpb24gYXJlRXF1YWxWYWx1ZXMoYSwgYikge1xuICBpZiAoX3R5cGVvZihiKSA9PT0gJ29iamVjdCcgJiYgYiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KGRpc3BsYXkpIHtcbiAgcmV0dXJuIGRpc3BsYXkgPT0gbnVsbCB8fCB0eXBlb2YgZGlzcGxheSA9PT0gJ3N0cmluZycgJiYgIWRpc3BsYXkudHJpbSgpO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxudmFyIFNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgYXJpYUxhYmVsID0gcHJvcHNbJ2FyaWEtbGFiZWwnXSxcbiAgICAgIGF1dG9Gb2N1cyA9IHByb3BzLmF1dG9Gb2N1cyxcbiAgICAgIGF1dG9XaWR0aCA9IHByb3BzLmF1dG9XaWR0aCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNwbGF5RW1wdHkgPSBwcm9wcy5kaXNwbGF5RW1wdHksXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmUHJvcCA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgbGFiZWxJZCA9IHByb3BzLmxhYmVsSWQsXG4gICAgICBfcHJvcHMkTWVudVByb3BzID0gcHJvcHMuTWVudVByb3BzLFxuICAgICAgTWVudVByb3BzID0gX3Byb3BzJE1lbnVQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkTWVudVByb3BzLFxuICAgICAgbXVsdGlwbGUgPSBwcm9wcy5tdWx0aXBsZSxcbiAgICAgIG5hbWUgPSBwcm9wcy5uYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuUHJvcCA9IHByb3BzLm9wZW4sXG4gICAgICByZWFkT25seSA9IHByb3BzLnJlYWRPbmx5LFxuICAgICAgcmVuZGVyVmFsdWUgPSBwcm9wcy5yZW5kZXJWYWx1ZSxcbiAgICAgIF9wcm9wcyRTZWxlY3REaXNwbGF5UCA9IHByb3BzLlNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wcyA9IF9wcm9wcyRTZWxlY3REaXNwbGF5UCA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkU2VsZWN0RGlzcGxheVAsXG4gICAgICB0YWJJbmRleFByb3AgPSBwcm9wcy50YWJJbmRleCxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdmFsdWVQcm9wID0gcHJvcHMudmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhcmlhLWxhYmVsXCIsIFwiYXV0b0ZvY3VzXCIsIFwiYXV0b1dpZHRoXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdFZhbHVlXCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRSZWZcIiwgXCJsYWJlbElkXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsb3NlXCIsIFwib25Gb2N1c1wiLCBcIm9uT3BlblwiLCBcIm9wZW5cIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgX3VzZUNvbnRyb2xsZWQgPSB1c2VDb250cm9sbGVkKHtcbiAgICBjb250cm9sbGVkOiB2YWx1ZVByb3AsXG4gICAgZGVmYXVsdDogZGVmYXVsdFZhbHVlLFxuICAgIG5hbWU6ICdTZWxlY3QnXG4gIH0pLFxuICAgICAgX3VzZUNvbnRyb2xsZWQyID0gX3NsaWNlZFRvQXJyYXkoX3VzZUNvbnRyb2xsZWQsIDIpLFxuICAgICAgdmFsdWUgPSBfdXNlQ29udHJvbGxlZDJbMF0sXG4gICAgICBzZXRWYWx1ZSA9IF91c2VDb250cm9sbGVkMlsxXTtcblxuICB2YXIgaW5wdXRSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgZGlzcGxheU5vZGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXREaXNwbGF5Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVJlZiA9IFJlYWN0LnVzZVJlZihvcGVuUHJvcCAhPSBudWxsKSxcbiAgICAgIGlzT3BlbkNvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZSgpLFxuICAgICAgbWVudU1pbldpZHRoU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TWVudU1pbldpZHRoU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUzID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgb3BlblN0YXRlID0gX1JlYWN0JHVzZVN0YXRlM1swXSxcbiAgICAgIHNldE9wZW5TdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTNbMV07XG5cbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYocmVmLCBpbnB1dFJlZlByb3ApO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGhhbmRsZVJlZiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgIGRpc3BsYXlOb2RlLmZvY3VzKCk7XG4gICAgICB9LFxuICAgICAgbm9kZTogaW5wdXRSZWYuY3VycmVudCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH0sIFtkaXNwbGF5Tm9kZSwgdmFsdWVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0ZvY3VzICYmIGRpc3BsYXlOb2RlKSB7XG4gICAgICBkaXNwbGF5Tm9kZS5mb2N1cygpO1xuICAgIH1cbiAgfSwgW2F1dG9Gb2N1cywgZGlzcGxheU5vZGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGlzcGxheU5vZGUpIHtcbiAgICAgIHZhciBsYWJlbCA9IG93bmVyRG9jdW1lbnQoZGlzcGxheU5vZGUpLmdldEVsZW1lbnRCeUlkKGxhYmVsSWQpO1xuXG4gICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgIGlmIChnZXRTZWxlY3Rpb24oKS5pc0NvbGxhcHNlZCkge1xuICAgICAgICAgICAgZGlzcGxheU5vZGUuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbGFiZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsYWJlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtsYWJlbElkLCBkaXNwbGF5Tm9kZV0pO1xuXG4gIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUob3BlbiwgZXZlbnQpIHtcbiAgICBpZiAob3Blbikge1xuICAgICAgaWYgKG9uT3Blbikge1xuICAgICAgICBvbk9wZW4oZXZlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFpc09wZW5Db250cm9sbGVkKSB7XG4gICAgICBzZXRNZW51TWluV2lkdGhTdGF0ZShhdXRvV2lkdGggPyBudWxsIDogZGlzcGxheU5vZGUuY2xpZW50V2lkdGgpO1xuICAgICAgc2V0T3BlblN0YXRlKG9wZW4pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQtY2xpY2tcbiAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBIaWphY2sgdGhlIGRlZmF1bHQgZm9jdXMgYmVoYXZpb3IuXG5cblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZGlzcGxheU5vZGUuZm9jdXMoKTtcbiAgICB1cGRhdGUodHJ1ZSwgZXZlbnQpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDbG9zZSA9IGZ1bmN0aW9uIGhhbmRsZUNsb3NlKGV2ZW50KSB7XG4gICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gIH07XG5cbiAgdmFyIGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKTsgLy8gU3VwcG9ydCBhdXRvZmlsbC5cblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgdmFyIGluZGV4ID0gY2hpbGRyZW5BcnJheS5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgfSkuaW5kZXhPZihldmVudC50YXJnZXQudmFsdWUpO1xuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuQXJyYXlbaW5kZXhdO1xuICAgIHNldFZhbHVlKGNoaWxkLnByb3BzLnZhbHVlKTtcblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIGNoaWxkKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUl0ZW1DbGljayA9IGZ1bmN0aW9uIGhhbmRsZUl0ZW1DbGljayhjaGlsZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgICAgdXBkYXRlKGZhbHNlLCBldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdWYWx1ZTtcblxuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5zbGljZSgpIDogW107XG4gICAgICAgIHZhciBpdGVtSW5kZXggPSB2YWx1ZS5pbmRleE9mKGNoaWxkLnByb3BzLnZhbHVlKTtcblxuICAgICAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICAgIG5ld1ZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1ZhbHVlLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGQucHJvcHMub25DbGljaykge1xuICAgICAgICBjaGlsZC5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcblxuICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTsgLy8gUHJlYWN0IHN1cHBvcnQsIHRhcmdldCBpcyByZWFkIG9ubHkgcHJvcGVydHkgb24gYSBuYXRpdmUgZXZlbnQuXG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV2ZW50LCAndGFyZ2V0Jywge1xuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb25DaGFuZ2UoZXZlbnQsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIGlmICghcmVhZE9ubHkpIHtcbiAgICAgIHZhciB2YWxpZEtleXMgPSBbJyAnLCAnQXJyb3dVcCcsICdBcnJvd0Rvd24nLCAvLyBUaGUgbmF0aXZlIHNlbGVjdCBkb2Vzbid0IHJlc3BvbmQgdG8gZW50ZXIgb24gTWFjT1MsIGJ1dCBpdCdzIHJlY29tbWVuZGVkIGJ5XG4gICAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcHJhY3RpY2VzL2V4YW1wbGVzL2xpc3Rib3gvbGlzdGJveC1jb2xsYXBzaWJsZS5odG1sXG4gICAgICAnRW50ZXInXTtcblxuICAgICAgaWYgKHZhbGlkS2V5cy5pbmRleE9mKGV2ZW50LmtleSkgIT09IC0xKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHVwZGF0ZSh0cnVlLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBvcGVuID0gZGlzcGxheU5vZGUgIT09IG51bGwgJiYgKGlzT3BlbkNvbnRyb2xsZWQgPyBvcGVuUHJvcCA6IG9wZW5TdGF0ZSk7XG5cbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgLy8gaWYgb3BlbiBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25cbiAgICBpZiAoIW9wZW4gJiYgb25CbHVyKSB7XG4gICAgICBldmVudC5wZXJzaXN0KCk7IC8vIFByZWFjdCBzdXBwb3J0LCB0YXJnZXQgaXMgcmVhZCBvbmx5IHByb3BlcnR5IG9uIGEgbmF0aXZlIGV2ZW50LlxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgdmFyIGRpc3BsYXk7XG4gIHZhciBkaXNwbGF5U2luZ2xlO1xuICB2YXIgZGlzcGxheU11bHRpcGxlID0gW107XG4gIHZhciBjb21wdXRlRGlzcGxheSA9IGZhbHNlO1xuICB2YXIgZm91bmRNYXRjaCA9IGZhbHNlOyAvLyBObyBuZWVkIHRvIGRpc3BsYXkgYW55IHZhbHVlIGlmIHRoZSBmaWVsZCBpcyBlbXB0eS5cblxuICBpZiAoaXNGaWxsZWQoe1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9KSB8fCBkaXNwbGF5RW1wdHkpIHtcbiAgICBpZiAocmVuZGVyVmFsdWUpIHtcbiAgICAgIGRpc3BsYXkgPSByZW5kZXJWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXB1dGVEaXNwbGF5ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXRlbXMgPSBjaGlsZHJlbkFycmF5Lm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzRnJhZ21lbnQoY2hpbGQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBTZWxlY3QgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2VsZWN0ZWQ7XG5cbiAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IFRoZSBgdmFsdWVgIHByb3AgbXVzdCBiZSBhbiBhcnJheSB3aGVuIHVzaW5nIHRoZSBgU2VsZWN0YCBjb21wb25lbnQgd2l0aCBgbXVsdGlwbGVgLlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgyKSk7XG4gICAgICB9XG5cbiAgICAgIHNlbGVjdGVkID0gdmFsdWUuc29tZShmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gYXJlRXF1YWxWYWx1ZXModiwgY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICBkaXNwbGF5TXVsdGlwbGUucHVzaChjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkID0gYXJlRXF1YWxWYWx1ZXModmFsdWUsIGNoaWxkLnByb3BzLnZhbHVlKTtcblxuICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXlTaW5nbGUgPSBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IHNlbGVjdGVkID8gJ3RydWUnIDogdW5kZWZpbmVkLFxuICAgICAgb25DbGljazogaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSxcbiAgICAgIG9uS2V5VXA6IGZ1bmN0aW9uIG9uS2V5VXAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIG91ciBNZW51SXRlbXMgZGlzcGF0Y2hlcyBhIGNsaWNrIGV2ZW50XG4gICAgICAgICAgLy8gaXQncyBub3QgYmVoYXZpb3Igb2YgdGhlIG5hdGl2ZSA8b3B0aW9uPiBhbmQgY2F1c2VzXG4gICAgICAgICAgLy8gdGhlIHNlbGVjdCB0byBjbG9zZSBpbW1lZGlhdGVseSBzaW5jZSB3ZSBvcGVuIG9uIHNwYWNlIGtleWRvd25cbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uS2V5VXApIHtcbiAgICAgICAgICBjaGlsZC5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoZSB2YWx1ZSBpcyBtb3N0IGxpa2VseSBub3QgYSB2YWxpZCBIVE1MIGF0dHJpYnV0ZS5cbiAgICAgICdkYXRhLXZhbHVlJzogY2hpbGQucHJvcHMudmFsdWUgLy8gSW5zdGVhZCwgd2UgcHJvdmlkZSBpdCBhcyBhIGRhdGEgYXR0cmlidXRlLlxuXG4gICAgfSk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghZm91bmRNYXRjaCAmJiAhbXVsdGlwbGUgJiYgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBjaGlsZHJlbkFycmF5Lm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLndhcm4oW1wiTWF0ZXJpYWwtVUk6IFlvdSBoYXZlIHByb3ZpZGVkIGFuIG91dC1vZi1yYW5nZSB2YWx1ZSBgXCIuY29uY2F0KHZhbHVlLCBcImAgZm9yIHRoZSBzZWxlY3QgXCIpLmNvbmNhdChuYW1lID8gXCIobmFtZT1cXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIikgXCIpIDogJycsIFwiY29tcG9uZW50LlwiKSwgXCJDb25zaWRlciBwcm92aWRpbmcgYSB2YWx1ZSB0aGF0IG1hdGNoZXMgb25lIG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucyBvciAnJy5cIiwgXCJUaGUgYXZhaWxhYmxlIHZhbHVlcyBhcmUgXCIuY29uY2F0KHZhbHVlcy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICByZXR1cm4geCAhPSBudWxsO1xuICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICByZXR1cm4gXCJgXCIuY29uY2F0KHgsIFwiYFwiKTtcbiAgICAgICAgfSkuam9pbignLCAnKSB8fCAnXCJcIicsIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtmb3VuZE1hdGNoLCBjaGlsZHJlbkFycmF5LCBtdWx0aXBsZSwgbmFtZSwgdmFsdWVdKTtcbiAgfVxuXG4gIGlmIChjb21wdXRlRGlzcGxheSkge1xuICAgIGRpc3BsYXkgPSBtdWx0aXBsZSA/IGRpc3BsYXlNdWx0aXBsZS5qb2luKCcsICcpIDogZGlzcGxheVNpbmdsZTtcbiAgfSAvLyBBdm9pZCBwZXJmb3JtaW5nIGEgbGF5b3V0IGNvbXB1dGF0aW9uIGluIHRoZSByZW5kZXIgbWV0aG9kLlxuXG5cbiAgdmFyIG1lbnVNaW5XaWR0aCA9IG1lbnVNaW5XaWR0aFN0YXRlO1xuXG4gIGlmICghYXV0b1dpZHRoICYmIGlzT3BlbkNvbnRyb2xsZWQgJiYgZGlzcGxheU5vZGUpIHtcbiAgICBtZW51TWluV2lkdGggPSBkaXNwbGF5Tm9kZS5jbGllbnRXaWR0aDtcbiAgfVxuXG4gIHZhciB0YWJJbmRleDtcblxuICBpZiAodHlwZW9mIHRhYkluZGV4UHJvcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcDtcbiAgfSBlbHNlIHtcbiAgICB0YWJJbmRleCA9IGRpc2FibGVkID8gbnVsbCA6IDA7XG4gIH1cblxuICB2YXIgYnV0dG9uSWQgPSBTZWxlY3REaXNwbGF5UHJvcHMuaWQgfHwgKG5hbWUgPyBcIm11aS1jb21wb25lbnQtc2VsZWN0LVwiLmNvbmNhdChuYW1lKSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIC8vIFRPRE8gdjU6IG1lcmdlIHJvb3QgYW5kIHNlbGVjdFxuICAgIGNsYXNzZXMuc2VsZWN0LCBjbGFzc2VzLnNlbGVjdE1lbnUsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgcmVmOiBzZXREaXNwbGF5Tm9kZSxcbiAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgcm9sZTogXCJidXR0b25cIixcbiAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgXCJhcmlhLWV4cGFuZGVkXCI6IG9wZW4gPyAndHJ1ZScgOiB1bmRlZmluZWQsXG4gICAgXCJhcmlhLWhhc3BvcHVwXCI6IFwibGlzdGJveFwiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsXG4gICAgXCJhcmlhLWxhYmVsbGVkYnlcIjogW2xhYmVsSWQsIGJ1dHRvbklkXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpIHx8IHVuZGVmaW5lZCxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25Nb3VzZURvd246IGRpc2FibGVkIHx8IHJlYWRPbmx5ID8gbnVsbCA6IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25Gb2N1czogb25Gb2N1c1xuICB9LCBTZWxlY3REaXNwbGF5UHJvcHMsIHtcbiAgICAvLyBUaGUgaWQgaXMgcmVxdWlyZWQgZm9yIHByb3BlciBhMTF5XG4gICAgaWQ6IGJ1dHRvbklkXG4gIH0pLCBpc0VtcHR5KGRpc3BsYXkpID9cbiAgLyojX19QVVJFX18qL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICB9XG4gIH0pIDogZGlzcGxheSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgX2V4dGVuZHMoe1xuICAgIHZhbHVlOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcmVmOiBpbnB1dFJlZixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICB0YWJJbmRleDogLTEsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLm5hdGl2ZUlucHV0LFxuICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzXG4gIH0sIG90aGVyKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBjbGFzc2VzW1wiaWNvblwiLmNvbmNhdChjYXBpdGFsaXplKHZhcmlhbnQpKV0sIG9wZW4gJiYgY2xhc3Nlcy5pY29uT3BlbiwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZClcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE1lbnUsIF9leHRlbmRzKHtcbiAgICBpZDogXCJtZW51LVwiLmNvbmNhdChuYW1lIHx8ICcnKSxcbiAgICBhbmNob3JFbDogZGlzcGxheU5vZGUsXG4gICAgb3Blbjogb3BlbixcbiAgICBvbkNsb3NlOiBoYW5kbGVDbG9zZVxuICB9LCBNZW51UHJvcHMsIHtcbiAgICBNZW51TGlzdFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGFiZWxJZCxcbiAgICAgIHJvbGU6ICdsaXN0Ym94JyxcbiAgICAgIGRpc2FibGVMaXN0V3JhcDogdHJ1ZVxuICAgIH0sIE1lbnVQcm9wcy5NZW51TGlzdFByb3BzKSxcbiAgICBQYXBlclByb3BzOiBfZXh0ZW5kcyh7fSwgTWVudVByb3BzLlBhcGVyUHJvcHMsIHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIG1pbldpZHRoOiBtZW51TWluV2lkdGhcbiAgICAgIH0sIE1lbnVQcm9wcy5QYXBlclByb3BzICE9IG51bGwgPyBNZW51UHJvcHMuUGFwZXJQcm9wcy5zdHlsZSA6IG51bGwpXG4gICAgfSlcbiAgfSksIGl0ZW1zKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNlbGVjdElucHV0LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gICdhcmlhLWxhYmVsJzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxNZW51SXRlbT5gIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZWxlbWVudCB2YWx1ZS4gVXNlIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBub3QgY29udHJvbGxlZC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdGVkIGl0ZW0gaXMgZGlzcGxheWVkIGV2ZW4gaWYgaXRzIHZhbHVlIGlzIGVtcHR5LlxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSW1wZXJhdGl2ZSBoYW5kbGUgaW1wbGVtZW50aW5nIGB7IHZhbHVlOiBULCBub2RlOiBIVE1MRWxlbWVudCwgZm9jdXMoKTogdm9pZCB9YFxuICAgKiBFcXVpdmFsZW50IHRvIGByZWZgXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIGVsZW1lbnQgdGhhdCBhY3RzIGFzIGFuIGFkZGl0aW9uYWwgbGFiZWwuIFRoZSBTZWxlY3Qgd2lsbFxuICAgKiBiZSBsYWJlbGxlZCBieSB0aGUgYWRkaXRpb25hbCBsYWJlbCBhbmQgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKi9cbiAgbGFiZWxJZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BNZW51YF0oL2FwaS9tZW51LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoYW55KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgb3BlbmVkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENvbnRyb2wgYHNlbGVjdGAgb3BlbiBzdGF0ZS5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3ROb2RlfVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTZWxlY3RJbnB1dDsiLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKF9yZWYpIHtcbiAgdmFyIGNvbnRyb2xsZWQgPSBfcmVmLmNvbnRyb2xsZWQsXG4gICAgICBkZWZhdWx0UHJvcCA9IF9yZWYuZGVmYXVsdCxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBfcmVmJHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0YXRlID0gX3JlZiRzdGF0ZSA9PT0gdm9pZCAwID8gJ3ZhbHVlJyA6IF9yZWYkc3RhdGU7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSxcbiAgICAgIGlzQ29udHJvbGxlZCA9IF9SZWFjdCR1c2VSZWYuY3VycmVudDtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApLFxuICAgICAgdmFsdWVTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFZhbHVlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChjb250cm9sbGVkICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBcIi5jb25jYXQoaXNDb250cm9sbGVkID8gJycgOiAndW4nLCBcImNvbnRyb2xsZWQgXCIpLmNvbmNhdChzdGF0ZSwgXCIgc3RhdGUgb2YgXCIpLmNvbmNhdChuYW1lLCBcIiB0byBiZSBcIikuY29uY2F0KGlzQ29udHJvbGxlZCA/ICd1bicgOiAnJywgXCJjb250cm9sbGVkLlwiKSwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIFwiRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIgXCIpICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsIFwiVGhlIG5hdHVyZSBvZiB0aGUgc3RhdGUgaXMgZGV0ZXJtaW5lZCBkdXJpbmcgdGhlIGZpcnN0IHJlbmRlciwgaXQncyBjb25zaWRlcmVkIGNvbnRyb2xsZWQgaWYgdGhlIHZhbHVlIGlzIG5vdCBgdW5kZWZpbmVkYC5cIiwgJ01vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2NvbnRyb2xsZWRdKTtcblxuICAgIHZhciBfUmVhY3QkdXNlUmVmMiA9IFJlYWN0LnVzZVJlZihkZWZhdWx0UHJvcCksXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9SZWFjdCR1c2VSZWYyLmN1cnJlbnQ7XG5cbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgZGVmYXVsdFZhbHVlICE9PSBkZWZhdWx0UHJvcCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgZGVmYXVsdCBcIi5jb25jYXQoc3RhdGUsIFwiIHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCBcIikuY29uY2F0KG5hbWUsIFwiIGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBcIikgKyBcIlRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCBcIi5jb25jYXQobmFtZSwgXCIuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW0pTT04uc3RyaW5naWZ5KGRlZmF1bHRQcm9wKV0pO1xuICB9XG5cbiAgdmFyIHNldFZhbHVlSWZVbmNvbnRyb2xsZWQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3JlYXRlU3ZnSWNvbiBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVTdmdJY29uJztcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdmdJY29uKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICBkOiBcIk03IDEwbDUgNSA1LTV6XCJcbn0pLCAnQXJyb3dEcm9wRG93bicpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IHJlZlR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxudmFyIE5hdGl2ZVNlbGVjdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTmF0aXZlU2VsZWN0SW5wdXQocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dFJlZiA9IHByb3BzLmlucHV0UmVmLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnc3RhbmRhcmQnIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiSWNvbkNvbXBvbmVudFwiLCBcImlucHV0UmVmXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgLy8gVE9ETyB2NTogbWVyZ2Ugcm9vdCBhbmQgc2VsZWN0XG4gICAgY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIHJlZjogaW5wdXRSZWYgfHwgcmVmXG4gIH0sIG90aGVyKSksIHByb3BzLm11bHRpcGxlID8gbnVsbCA6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEljb25Db21wb25lbnQsIHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5pY29uLCBjbGFzc2VzW1wiaWNvblwiLmNvbmNhdChjYXBpdGFsaXplKHZhcmlhbnQpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQpXG4gIH0pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gTmF0aXZlU2VsZWN0SW5wdXQucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGA8b3B0aW9uPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgbXVsdGlwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IE5hdGl2ZVNlbGVjdElucHV0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgTmF0aXZlU2VsZWN0SW5wdXQgZnJvbSAnLi9OYXRpdmVTZWxlY3RJbnB1dCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCB1c2VGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbC91c2VGb3JtQ29udHJvbCc7XG5pbXBvcnQgQXJyb3dEcm9wRG93bkljb24gZnJvbSAnLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd24nO1xuaW1wb3J0IElucHV0IGZyb20gJy4uL0lucHV0JztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYHJvb3RgIGNsYXNzLiAqL1xuICAgIHJvb3Q6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHNlbGVjdCBjb21wb25lbnQgYHNlbGVjdGAgY2xhc3MuICovXG4gICAgc2VsZWN0OiB7XG4gICAgICAnLW1vei1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgICAvLyBSZXNldFxuICAgICAgLy8gV2hlbiBpbnRlcmFjdGluZyBxdWlja2x5LCB0aGUgdGV4dCBjYW4gZW5kIHVwIHNlbGVjdGVkLlxuICAgICAgLy8gTmF0aXZlIHNlbGVjdCBjYW4ndCBiZSBzZWxlY3RlZCBlaXRoZXIuXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAvLyBSZXNldFxuICAgICAgbWluV2lkdGg6IDE2LFxuICAgICAgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIC8vIFNob3cgdGhhdCBpdCdzIG5vdCBhbiB0ZXh0IGlucHV0XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4wNSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wNSknLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAgLy8gUmVzZXQgQ2hyb21lIHN0eWxlXG5cbiAgICAgIH0sXG4gICAgICAvLyBSZW1vdmUgSUUgMTEgYXJyb3dcbiAgICAgICcmOjotbXMtZXhwYW5kJzoge1xuICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH0sXG4gICAgICAnJlttdWx0aXBsZV0nOiB7XG4gICAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgICB9LFxuICAgICAgJyY6bm90KFttdWx0aXBsZV0pIG9wdGlvbiwgJjpub3QoW211bHRpcGxlXSkgb3B0Z3JvdXAnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyXG4gICAgICB9LFxuICAgICAgJyYmJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDI0XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGZpbGxlZDoge1xuICAgICAgJyYmJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgJyYmJzoge1xuICAgICAgICBwYWRkaW5nUmlnaHQ6IDMyXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWxlY3QgY29tcG9uZW50IGBzZWxlY3RNZW51YCBjbGFzcy4gKi9cbiAgICBzZWxlY3RNZW51OiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIC8vIFJlc2V0cyBmb3IgbXVsdHBpbGUgc2VsZWN0IHdpdGggY2hpcHNcbiAgICAgIG1pbkhlaWdodDogJzEuMTg3NmVtJyxcbiAgICAgIC8vIFJlcXVpcmVkIGZvciBzZWxlY3RcXHRleHQtZmllbGQgaGVpZ2h0IGNvbnNpc3RlbmN5XG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgc2VsZWN0IGNvbXBvbmVudCBgZGlzYWJsZWRgIGNsYXNzLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGNvbXBvbmVudC4gKi9cbiAgICBpY29uOiB7XG4gICAgICAvLyBXZSB1c2UgYSBwb3NpdGlvbiBhYnNvbHV0ZSBvdmVyIGEgZmxleGJveCBpbiBvcmRlciB0byBmb3J3YXJkIHRoZSBwb2ludGVyIGV2ZW50c1xuICAgICAgLy8gdG8gdGhlIGlucHV0IGFuZCB0byBzdXBwb3J0IHdyYXBwaW5nIHRhZ3MuLlxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogJ2NhbGMoNTAlIC0gMTJweCknLFxuICAgICAgLy8gQ2VudGVyIHZlcnRpY2FsbHlcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERvbid0IGJsb2NrIHBvaW50ZXIgZXZlbnRzIG9uIHRoZSBzZWxlY3QgdW5kZXIgdGhlIGljb24uXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQgaWYgdGhlIHBvcHVwIGlzIG9wZW4uICovXG4gICAgaWNvbk9wZW46IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBjb21wb25lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAuICovXG4gICAgaWNvbkZpbGxlZDoge1xuICAgICAgcmlnaHQ6IDdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGljb24gY29tcG9uZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgaWNvbk91dGxpbmVkOiB7XG4gICAgICByaWdodDogN1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdW5kZXJseWluZyBuYXRpdmUgaW5wdXQgY29tcG9uZW50LiAqL1xuICAgIG5hdGl2ZUlucHV0OiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdElucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIG51bGwpO1xuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSB0byBgPFNlbGVjdCBuYXRpdmUgLz5gIHdpdGggYSBtdWNoIHNtYWxsZXIgYnVuZGxlIHNpemUgZm9vdHByaW50LlxuICovXG5cbnZhciBOYXRpdmVTZWxlY3QgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBOYXRpdmVTZWxlY3QocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgSWNvbkNvbXBvbmVudCA9IF9wcm9wcyRJY29uQ29tcG9uZW50ID09PSB2b2lkIDAgPyBBcnJvd0Ryb3BEb3duSWNvbiA6IF9wcm9wcyRJY29uQ29tcG9uZW50LFxuICAgICAgX3Byb3BzJGlucHV0ID0gcHJvcHMuaW5wdXQsXG4gICAgICBpbnB1dCA9IF9wcm9wcyRpbnB1dCA9PT0gdm9pZCAwID8gZGVmYXVsdElucHV0IDogX3Byb3BzJGlucHV0LFxuICAgICAgaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoaW5wdXQsIF9leHRlbmRzKHtcbiAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgTmF0aXZlU2VsZWN0SW5wdXRgLlxuICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgIGlucHV0Q29tcG9uZW50OiBOYXRpdmVTZWxlY3RJbnB1dCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICAgIHZhcmlhbnQ6IGZjcy52YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgfSwgaW5wdXRQcm9wcywgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IE5hdGl2ZVNlbGVjdC5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuIFRoZSBET00gQVBJIGNhc3RzIHRoaXMgdG8gYSBzdHJpbmcuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuTmF0aXZlU2VsZWN0Lm11aU5hbWUgPSAnU2VsZWN0JztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnXG59KShOYXRpdmVTZWxlY3QpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBtZXJnZUNsYXNzZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBTZWxlY3RJbnB1dCBmcm9tICcuL1NlbGVjdElucHV0JztcbmltcG9ydCBmb3JtQ29udHJvbFN0YXRlIGZyb20gJy4uL0Zvcm1Db250cm9sL2Zvcm1Db250cm9sU3RhdGUnO1xuaW1wb3J0IHVzZUZvcm1Db250cm9sIGZyb20gJy4uL0Zvcm1Db250cm9sL3VzZUZvcm1Db250cm9sJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBBcnJvd0Ryb3BEb3duSWNvbiBmcm9tICcuLi9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93bic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vSW5wdXQnO1xuaW1wb3J0IHsgc3R5bGVzIGFzIG5hdGl2ZVNlbGVjdFN0eWxlcyB9IGZyb20gJy4uL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QnO1xuaW1wb3J0IE5hdGl2ZVNlbGVjdElucHV0IGZyb20gJy4uL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IG5hdGl2ZVNlbGVjdFN0eWxlcztcblxudmFyIF9yZWYgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwgbnVsbCk7XG5cbnZhciBfcmVmMiA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZpbGxlZElucHV0LCBudWxsKTtcblxudmFyIFNlbGVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNlbGVjdChwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYXV0b1dpZHRoID0gcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgYXV0b1dpZHRoID0gX3Byb3BzJGF1dG9XaWR0aCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGRpc3BsYXlFbXB0eSA9IHByb3BzLmRpc3BsYXlFbXB0eSxcbiAgICAgIGRpc3BsYXlFbXB0eSA9IF9wcm9wcyRkaXNwbGF5RW1wdHkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc3BsYXlFbXB0eSxcbiAgICAgIF9wcm9wcyRJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIEljb25Db21wb25lbnQgPSBfcHJvcHMkSWNvbkNvbXBvbmVudCA9PT0gdm9pZCAwID8gQXJyb3dEcm9wRG93bkljb24gOiBfcHJvcHMkSWNvbkNvbXBvbmVudCxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICBsYWJlbCA9IHByb3BzLmxhYmVsLFxuICAgICAgbGFiZWxJZCA9IHByb3BzLmxhYmVsSWQsXG4gICAgICBfcHJvcHMkbGFiZWxXaWR0aCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBsYWJlbFdpZHRoID0gX3Byb3BzJGxhYmVsV2lkdGggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkbGFiZWxXaWR0aCxcbiAgICAgIE1lbnVQcm9wcyA9IHByb3BzLk1lbnVQcm9wcyxcbiAgICAgIF9wcm9wcyRtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgbXVsdGlwbGUgPSBfcHJvcHMkbXVsdGlwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG11bHRpcGxlLFxuICAgICAgX3Byb3BzJG5hdGl2ZSA9IHByb3BzLm5hdGl2ZSxcbiAgICAgIG5hdGl2ZSA9IF9wcm9wcyRuYXRpdmUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG5hdGl2ZSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25PcGVuID0gcHJvcHMub25PcGVuLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICByZW5kZXJWYWx1ZSA9IHByb3BzLnJlbmRlclZhbHVlLFxuICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gcHJvcHMuU2VsZWN0RGlzcGxheVByb3BzLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudFByb3BzID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJkaXNwbGF5RW1wdHlcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaWRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJsYWJlbFwiLCBcImxhYmVsSWRcIiwgXCJsYWJlbFdpZHRoXCIsIFwiTWVudVByb3BzXCIsIFwibXVsdGlwbGVcIiwgXCJuYXRpdmVcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInJlbmRlclZhbHVlXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGlucHV0Q29tcG9uZW50ID0gbmF0aXZlID8gTmF0aXZlU2VsZWN0SW5wdXQgOiBTZWxlY3RJbnB1dDtcbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcbiAgdmFyIGZjcyA9IGZvcm1Db250cm9sU3RhdGUoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBtdWlGb3JtQ29udHJvbDogbXVpRm9ybUNvbnRyb2wsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgdmFyIHZhcmlhbnQgPSBmY3MudmFyaWFudCB8fCB2YXJpYW50UHJvcHM7XG4gIHZhciBJbnB1dENvbXBvbmVudCA9IGlucHV0IHx8IHtcbiAgICBzdGFuZGFyZDogX3JlZixcbiAgICBvdXRsaW5lZDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGluZWRJbnB1dCwge1xuICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgbGFiZWxXaWR0aDogbGFiZWxXaWR0aFxuICAgIH0pLFxuICAgIGZpbGxlZDogX3JlZjJcbiAgfVt2YXJpYW50XTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoSW5wdXRDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgU2VsZWN0SW5wdXRgLlxuICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiBfZXh0ZW5kcyh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBJY29uQ29tcG9uZW50OiBJY29uQ29tcG9uZW50LFxuICAgICAgdmFyaWFudDogdmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFdlIHJlbmRlciBhIHNlbGVjdC4gV2UgY2FuIGlnbm9yZSB0aGUgdHlwZSBwcm92aWRlZCBieSB0aGUgYElucHV0YC5cbiAgICAgIG11bHRpcGxlOiBtdWx0aXBsZVxuICAgIH0sIG5hdGl2ZSA/IHtcbiAgICAgIGlkOiBpZFxuICAgIH0gOiB7XG4gICAgICBhdXRvV2lkdGg6IGF1dG9XaWR0aCxcbiAgICAgIGRpc3BsYXlFbXB0eTogZGlzcGxheUVtcHR5LFxuICAgICAgbGFiZWxJZDogbGFiZWxJZCxcbiAgICAgIE1lbnVQcm9wczogTWVudVByb3BzLFxuICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgIG9uT3Blbjogb25PcGVuLFxuICAgICAgb3Blbjogb3BlbixcbiAgICAgIHJlbmRlclZhbHVlOiByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wczogX2V4dGVuZHMoe1xuICAgICAgICBpZDogaWRcbiAgICAgIH0sIFNlbGVjdERpc3BsYXlQcm9wcylcbiAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICBjbGFzc2VzOiBpbnB1dFByb3BzID8gbWVyZ2VDbGFzc2VzKHtcbiAgICAgICAgYmFzZUNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIG5ld0NsYXNzZXM6IGlucHV0UHJvcHMuY2xhc3NlcyxcbiAgICAgICAgQ29tcG9uZW50OiBTZWxlY3RcbiAgICAgIH0pIDogY2xhc3Nlc1xuICAgIH0sIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTZWxlY3QucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgd2lkdGggb2YgdGhlIHBvcG92ZXIgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIGl0ZW1zIGluc2lkZSB0aGVcbiAgICogbWVudSwgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgYXQgbGVhc3QgdGhlIHdpZHRoIG9mIHRoZSBzZWxlY3QgaW5wdXQuXG4gICAqL1xuICBhdXRvV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYE1lbnVJdGVtYCB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlIGFuZCBgb3B0aW9uYCB3aGVuIGBuYXRpdmVgIGlzIHRydWUuXG4gICAqXG4gICAqIOKaoO+4j1RoZSBgTWVudUl0ZW1gIGVsZW1lbnRzICoqbXVzdCoqIGJlIGRpcmVjdCBkZXNjZW5kYW50cyB3aGVuIGBuYXRpdmVgIGlzIGZhbHNlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGVsZW1lbnQgdmFsdWUuIFVzZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbnRyb2xsZWQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB2YWx1ZSBpcyBkaXNwbGF5ZWQgZXZlbiBpZiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIGRpc3BsYXkgYSBtZWFuaW5nZnVsIHZhbHVlLCBhIGZ1bmN0aW9uIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGByZW5kZXJWYWx1ZWAgcHJvcCB3aGljaCByZXR1cm5zIHRoZSB2YWx1ZSB0byBiZSBkaXNwbGF5ZWQgd2hlbiBubyBpdGVtcyBhcmUgc2VsZWN0ZWQuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcCBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICovXG4gIGRpc3BsYXlFbXB0eTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRoYXQgZGlzcGxheXMgdGhlIGFycm93LlxuICAgKi9cbiAgSWNvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgYGlkYCBvZiB0aGUgd3JhcHBlciBlbGVtZW50IG9yIHRoZSBgc2VsZWN0YCBlbGVtZW50IHdoZW4gYG5hdGl2ZWAuXG4gICAqL1xuICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQW4gYElucHV0YCBlbGVtZW50OyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgbWF0ZXJpYWwtdWkgc3BlY2lmaWMgYElucHV0YC5cbiAgICovXG4gIGlucHV0OiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqIFdoZW4gYG5hdGl2ZWAgaXMgYHRydWVgLCB0aGUgYXR0cmlidXRlcyBhcmUgYXBwbGllZCBvbiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiBhbiBlbGVtZW50IHRoYXQgYWN0cyBhcyBhbiBhZGRpdGlvbmFsIGxhYmVsLiBUaGUgU2VsZWN0IHdpbGxcbiAgICogYmUgbGFiZWxsZWQgYnkgdGhlIGFkZGl0aW9uYWwgbGFiZWwgYW5kIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICovXG4gIGxhYmVsSWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNlZSBbT3V0bGluZWRJbnB1dCNsYWJlbF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8jcHJvcHMpXG4gICAqL1xuICBsYWJlbFdpZHRoOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0IG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGJlIHVzaW5nIGEgbmF0aXZlIGBzZWxlY3RgIGVsZW1lbnQuXG4gICAqL1xuICBuYXRpdmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAgKGFueSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbY2hpbGRdIFRoZSByZWFjdCBlbGVtZW50IHRoYXQgd2FzIHNlbGVjdGVkIHdoZW4gYG5hdGl2ZWAgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25PcGVuOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ29udHJvbCBgc2VsZWN0YCBvcGVuIHN0YXRlLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIGB2YWx1ZWAgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogQHJldHVybnMge1JlYWN0Tm9kZX1cbiAgICovXG4gIHJlbmRlclZhbHVlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgY2xpY2thYmxlIGRpdiBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0RGlzcGxheVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUuIFByb3ZpZGluZyBhbiBlbXB0eSBzdHJpbmcgd2lsbCBzZWxlY3Qgbm8gb3B0aW9ucy5cbiAgICogVGhpcyBwcm9wIGlzIHJlcXVpcmVkIHdoZW4gdGhlIGBuYXRpdmVgIHByb3AgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqIFNldCB0byBhbiBlbXB0eSBzdHJpbmcgYCcnYCBpZiB5b3UgZG9uJ3Qgd2FudCBhbnkgb2YgdGhlIGF2YWlsYWJsZSBvcHRpb25zIHRvIGJlIHNlbGVjdGVkLlxuICAgKlxuICAgKiBJZiB0aGUgdmFsdWUgaXMgYW4gb2JqZWN0IGl0IG11c3QgaGF2ZSByZWZlcmVuY2UgZXF1YWxpdHkgd2l0aCB0aGUgb3B0aW9uIGluIG9yZGVyIHRvIGJlIHNlbGVjdGVkLlxuICAgKiBJZiB0aGUgdmFsdWUgaXMgbm90IGFuIG9iamVjdCwgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBtdXN0IG1hdGNoIHdpdGggdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb3B0aW9uIGluIG9yZGVyIHRvIGJlIHNlbGVjdGVkLlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2ZpbGxlZCcsICdvdXRsaW5lZCcsICdzdGFuZGFyZCddKVxufSA6IHZvaWQgMDtcblNlbGVjdC5tdWlOYW1lID0gJ1NlbGVjdCc7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU2VsZWN0J1xufSkoU2VsZWN0KTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBJbnB1dCBmcm9tICcuLi9JbnB1dCc7XG5pbXBvcnQgRmlsbGVkSW5wdXQgZnJvbSAnLi4vRmlsbGVkSW5wdXQnO1xuaW1wb3J0IE91dGxpbmVkSW5wdXQgZnJvbSAnLi4vT3V0bGluZWRJbnB1dCc7XG5pbXBvcnQgSW5wdXRMYWJlbCBmcm9tICcuLi9JbnB1dExhYmVsJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUhlbHBlclRleHQgZnJvbSAnLi4vRm9ybUhlbHBlclRleHQnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9TZWxlY3QnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xudmFyIHZhcmlhbnRDb21wb25lbnQgPSB7XG4gIHN0YW5kYXJkOiBJbnB1dCxcbiAgZmlsbGVkOiBGaWxsZWRJbnB1dCxcbiAgb3V0bGluZWQ6IE91dGxpbmVkSW5wdXRcbn07XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge31cbn07XG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtGb3JtQ29udHJvbF0oL2FwaS9mb3JtLWNvbnRyb2wvKVxuICogLSBbSW5wdXRMYWJlbF0oL2FwaS9pbnB1dC1sYWJlbC8pXG4gKiAtIFtGaWxsZWRJbnB1dF0oL2FwaS9maWxsZWQtaW5wdXQvKVxuICogLSBbT3V0bGluZWRJbnB1dF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8pXG4gKiAtIFtJbnB1dF0oL2FwaS9pbnB1dC8pXG4gKiAtIFtGb3JtSGVscGVyVGV4dF0oL2FwaS9mb3JtLWhlbHBlci10ZXh0LylcbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBhbHRlciB0aGUgcHJvcHMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LCB5b3UgY2FuIGRvIHNvIGFzIGZvbGxvd3M6XG4gKlxuICogYGBganN4XG4gKiBjb25zdCBpbnB1dFByb3BzID0ge1xuICogICBzdGVwOiAzMDAsXG4gKiB9O1xuICpcbiAqIHJldHVybiA8VGV4dEZpZWxkIGlkPVwidGltZVwiIHR5cGU9XCJ0aW1lXCIgaW5wdXRQcm9wcz17aW5wdXRQcm9wc30gLz47XG4gKiBgYGBcbiAqXG4gKiBGb3IgYWR2YW5jZWQgY2FzZXMsIHBsZWFzZSBsb29rIGF0IHRoZSBzb3VyY2Ugb2YgVGV4dEZpZWxkIGJ5IGNsaWNraW5nIG9uIHRoZVxuICogXCJFZGl0IHRoaXMgcGFnZVwiIGJ1dHRvbiBhYm92ZS4gQ29uc2lkZXIgZWl0aGVyOlxuICpcbiAqIC0gdXNpbmcgdGhlIHVwcGVyIGNhc2UgcHJvcHMgZm9yIHBhc3NpbmcgdmFsdWVzIGRpcmVjdGx5IHRvIHRoZSBjb21wb25lbnRzXG4gKiAtIHVzaW5nIHRoZSB1bmRlcmx5aW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgYXMgc2hvd24gaW4gdGhlIGRlbW9zXG4gKi9cblxudmFyIFRleHRGaWVsZCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRGaWVsZChwcm9wcywgcmVmKSB7XG4gIHZhciBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBfcHJvcHMkYXV0b0ZvY3VzID0gcHJvcHMuYXV0b0ZvY3VzLFxuICAgICAgYXV0b0ZvY3VzID0gX3Byb3BzJGF1dG9Gb2N1cyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkYXV0b0ZvY3VzLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGVycm9yID0gX3Byb3BzJGVycm9yID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlcnJvcixcbiAgICAgIEZvcm1IZWxwZXJUZXh0UHJvcHMgPSBwcm9wcy5Gb3JtSGVscGVyVGV4dFByb3BzLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIGhlbHBlclRleHQgPSBwcm9wcy5oZWxwZXJUZXh0LFxuICAgICAgaGlkZGVuTGFiZWwgPSBwcm9wcy5oaWRkZW5MYWJlbCxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBJbnB1dExhYmVsUHJvcHMgPSBwcm9wcy5JbnB1dExhYmVsUHJvcHMsXG4gICAgICBpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcyxcbiAgICAgIElucHV0UHJvcHMgPSBwcm9wcy5JbnB1dFByb3BzLFxuICAgICAgaW5wdXRSZWYgPSBwcm9wcy5pbnB1dFJlZixcbiAgICAgIGxhYmVsID0gcHJvcHMubGFiZWwsXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25Gb2N1cyA9IHByb3BzLm9uRm9jdXMsXG4gICAgICBwbGFjZWhvbGRlciA9IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgX3Byb3BzJHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICByZXF1aXJlZCA9IF9wcm9wcyRyZXF1aXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkcmVxdWlyZWQsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgX3Byb3BzJHNlbGVjdCA9IHByb3BzLnNlbGVjdCxcbiAgICAgIHNlbGVjdCA9IF9wcm9wcyRzZWxlY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNlbGVjdCxcbiAgICAgIFNlbGVjdFByb3BzID0gcHJvcHMuU2VsZWN0UHJvcHMsXG4gICAgICB0eXBlID0gcHJvcHMudHlwZSxcbiAgICAgIHZhbHVlID0gcHJvcHMudmFsdWUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdzdGFuZGFyZCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhdXRvQ29tcGxldGVcIiwgXCJhdXRvRm9jdXNcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJGb3JtSGVscGVyVGV4dFByb3BzXCIsIFwiZnVsbFdpZHRoXCIsIFwiaGVscGVyVGV4dFwiLCBcImhpZGRlbkxhYmVsXCIsIFwiaWRcIiwgXCJJbnB1dExhYmVsUHJvcHNcIiwgXCJpbnB1dFByb3BzXCIsIFwiSW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZXF1aXJlZFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic2VsZWN0XCIsIFwiU2VsZWN0UHJvcHNcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChzZWxlY3QgJiYgIWNoaWxkcmVuKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGNoaWxkcmVuYCBtdXN0IGJlIHBhc3NlZCB3aGVuIHVzaW5nIHRoZSBgVGV4dEZpZWxkYCBjb21wb25lbnQgd2l0aCBgc2VsZWN0YC4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgSW5wdXRNb3JlID0ge307XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICBpZiAoSW5wdXRMYWJlbFByb3BzICYmIHR5cGVvZiBJbnB1dExhYmVsUHJvcHMuc2hyaW5rICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgSW5wdXRNb3JlLm5vdGNoZWQgPSBJbnB1dExhYmVsUHJvcHMuc2hyaW5rO1xuICAgIH1cblxuICAgIGlmIChsYWJlbCkge1xuICAgICAgdmFyIF9JbnB1dExhYmVsUHJvcHMkcmVxdTtcblxuICAgICAgdmFyIGRpc3BsYXlSZXF1aXJlZCA9IChfSW5wdXRMYWJlbFByb3BzJHJlcXUgPSBJbnB1dExhYmVsUHJvcHMgPT09IG51bGwgfHwgSW5wdXRMYWJlbFByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBJbnB1dExhYmVsUHJvcHMucmVxdWlyZWQpICE9PSBudWxsICYmIF9JbnB1dExhYmVsUHJvcHMkcmVxdSAhPT0gdm9pZCAwID8gX0lucHV0TGFiZWxQcm9wcyRyZXF1IDogcmVxdWlyZWQ7XG4gICAgICBJbnB1dE1vcmUubGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgbGFiZWwsIGRpc3BsYXlSZXF1aXJlZCAmJiBcIlxceEEwKlwiKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2VsZWN0KSB7XG4gICAgLy8gdW5zZXQgZGVmYXVsdHMgZnJvbSB0ZXh0Ym94IGlucHV0c1xuICAgIGlmICghU2VsZWN0UHJvcHMgfHwgIVNlbGVjdFByb3BzLm5hdGl2ZSkge1xuICAgICAgSW5wdXRNb3JlLmlkID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIElucHV0TW9yZVsnYXJpYS1kZXNjcmliZWRieSddID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGhlbHBlclRleHRJZCA9IGhlbHBlclRleHQgJiYgaWQgPyBcIlwiLmNvbmNhdChpZCwgXCItaGVscGVyLXRleHRcIikgOiB1bmRlZmluZWQ7XG4gIHZhciBpbnB1dExhYmVsSWQgPSBsYWJlbCAmJiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1sYWJlbFwiKSA6IHVuZGVmaW5lZDtcbiAgdmFyIElucHV0Q29tcG9uZW50ID0gdmFyaWFudENvbXBvbmVudFt2YXJpYW50XTtcbiAgdmFyIElucHV0RWxlbWVudCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGhlbHBlclRleHRJZCxcbiAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICBhdXRvRm9jdXM6IGF1dG9Gb2N1cyxcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBmdWxsV2lkdGg6IGZ1bGxXaWR0aCxcbiAgICBtdWx0aWxpbmU6IG11bHRpbGluZSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHJvd3M6IHJvd3MsXG4gICAgcm93c01heDogcm93c01heCxcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpZDogaWQsXG4gICAgaW5wdXRSZWY6IGlucHV0UmVmLFxuICAgIG9uQmx1cjogb25CbHVyLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICBpbnB1dFByb3BzOiBpbnB1dFByb3BzXG4gIH0sIElucHV0TW9yZSwgSW5wdXRQcm9wcykpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUNvbnRyb2wsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBlcnJvcjogZXJyb3IsXG4gICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgaGlkZGVuTGFiZWw6IGhpZGRlbkxhYmVsLFxuICAgIHJlZjogcmVmLFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICBjb2xvcjogY29sb3IsXG4gICAgdmFyaWFudDogdmFyaWFudFxuICB9LCBvdGhlciksIGxhYmVsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KElucHV0TGFiZWwsIF9leHRlbmRzKHtcbiAgICBodG1sRm9yOiBpZCxcbiAgICBpZDogaW5wdXRMYWJlbElkXG4gIH0sIElucHV0TGFiZWxQcm9wcyksIGxhYmVsKSwgc2VsZWN0ID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU2VsZWN0LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGhlbHBlclRleHRJZCxcbiAgICBpZDogaWQsXG4gICAgbGFiZWxJZDogaW5wdXRMYWJlbElkLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBpbnB1dDogSW5wdXRFbGVtZW50XG4gIH0sIFNlbGVjdFByb3BzKSwgY2hpbGRyZW4pIDogSW5wdXRFbGVtZW50LCBoZWxwZXJUZXh0ICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1IZWxwZXJUZXh0LCBfZXh0ZW5kcyh7XG4gICAgaWQ6IGhlbHBlclRleHRJZFxuICB9LCBGb3JtSGVscGVyVGV4dFByb3BzKSwgaGVscGVyVGV4dCkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0RmllbGQucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhpcyBwcm9wIGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IFtmb2xsb3dpbmcgdGhlIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsKS5cbiAgICovXG4gIGF1dG9Db21wbGV0ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGlucHV0YCBlbGVtZW50IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgRm9ybUhlbHBlclRleHRgXSgvYXBpL2Zvcm0taGVscGVyLXRleHQvKSBlbGVtZW50LlxuICAgKi9cbiAgRm9ybUhlbHBlclRleHRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaGVscGVyIHRleHQgY29udGVudC5cbiAgICovXG4gIGhlbHBlclRleHQ6IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBoaWRkZW5MYWJlbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBVc2UgdGhpcyBwcm9wIHRvIG1ha2UgYGxhYmVsYCBhbmQgYGhlbHBlclRleHRgIGFjY2Vzc2libGUgZm9yIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgSW5wdXRMYWJlbGBdKC9hcGkvaW5wdXQtbGFiZWwvKSBlbGVtZW50LlxuICAgKi9cbiAgSW5wdXRMYWJlbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBbQXR0cmlidXRlc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0F0dHJpYnV0ZXMpIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIElucHV0IGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgYmUgYSBbYEZpbGxlZElucHV0YF0oL2FwaS9maWxsZWQtaW5wdXQvKSxcbiAgICogW2BPdXRsaW5lZElucHV0YF0oL2FwaS9vdXRsaW5lZC1pbnB1dC8pIG9yIFtgSW5wdXRgXSgvYXBpL2lucHV0LylcbiAgICogY29tcG9uZW50IGRlcGVuZGluZyBvbiB0aGUgYHZhcmlhbnRgIHByb3AgdmFsdWUuXG4gICAqL1xuICBJbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIGNvbnRlbnQuXG4gICAqL1xuICBsYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqL1xuICBtYXJnaW46IFByb3BUeXBlcy5vbmVPZihbJ2RlbnNlJywgJ25vbmUnLCAnbm9ybWFsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkIGluc3RlYWQgb2YgYW4gaW5wdXQuXG4gICAqL1xuICBtdWx0aWxpbmU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgIChzdHJpbmcpLlxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGFzIHJlcXVpcmVkIGFuZCB0aGUgYGlucHV0YCBlbGVtZW50YCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSxcblxuICAvKipcbiAgICogUmVuZGVyIGEgW2BTZWxlY3RgXSgvYXBpL3NlbGVjdC8pIGVsZW1lbnQgd2hpbGUgcGFzc2luZyB0aGUgSW5wdXQgZWxlbWVudCB0byBgU2VsZWN0YCBhcyBgaW5wdXRgIHBhcmFtZXRlci5cbiAgICogSWYgdGhpcyBvcHRpb24gaXMgc2V0IHlvdSBtdXN0IHBhc3MgdGhlIG9wdGlvbnMgb2YgdGhlIHNlbGVjdCBhcyBjaGlsZHJlbi5cbiAgICovXG4gIHNlbGVjdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgU2VsZWN0YF0oL2FwaS9zZWxlY3QvKSBlbGVtZW50LlxuICAgKi9cbiAgU2VsZWN0UHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSB0ZXh0IGZpZWxkLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnbWVkaXVtJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuIEl0IHNob3VsZCBiZSBbYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaW5wdXQjRm9ybV8lM0NpbnB1dCUzRV90eXBlcykuXG4gICAqL1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudCwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZmlsbGVkJywgJ291dGxpbmVkJywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRleHRGaWVsZCdcbn0pKFRleHRGaWVsZCk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgdmFyIGZpcnN0ID0gbnVsbDtcbiAgdmFyIGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGZpcnN0ID0gbnVsbDtcbiAgICAgIGxhc3QgPSBudWxsO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICBiYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxhc3QgPSB7XG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlciA9IHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmlwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gIH0sIFtzdG9yZV0pO1xuICB2YXIgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpO1xuICB9LCBbc3RvcmVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IG51bGwgOiBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gVGhpcyBjYW5cbiAgICAgICAgLy8gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24ncyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnNcbiAgICAgICAgLy8gdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZSAgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcC5cblxuICAgICAgICB2YXIgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pLFxuICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF91c2VNZW1vMlswXSxcbiAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzID0gX3VzZU1lbW8yWzFdOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuXG4gICAgICB2YXIgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0sIFtkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZSwgc3Vic2NyaXB0aW9uXSk7IC8vIFdlIG5lZWQgdG8gZm9yY2UgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCB0byByZS1yZW5kZXIgd2hlbmV2ZXIgYSBSZWR1eCBzdG9yZSB1cGRhdGVcbiAgICAgIC8vIGNhdXNlcyBhIGNoYW5nZSB0byB0aGUgY2FsY3VsYXRlZCBjaGlsZCBjb21wb25lbnQgcHJvcHMgKG9yIHdlIGNhdWdodCBhbiBlcnJvciBpbiBtYXBTdGF0ZSlcblxuICAgICAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIsIEVNUFRZX0FSUkFZLCBpbml0U3RhdGVVcGRhdGVzKSxcbiAgICAgICAgICBfdXNlUmVkdWNlciQgPSBfdXNlUmVkdWNlclswXSxcbiAgICAgICAgICBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ID0gX3VzZVJlZHVjZXIkWzBdLFxuICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2ggPSBfdXNlUmVkdWNlclsxXTsgLy8gUHJvcGFnYXRlIGFueSBtYXBTdGF0ZS9tYXBEaXNwYXRjaCBlcnJvcnMgdXB3YXJkc1xuXG5cbiAgICAgIGlmIChwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0ICYmIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcjtcbiAgICAgIH0gLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG5cbiAgICAgIHZhciBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgdmFyIGxhc3RXcmFwcGVyUHJvcHMgPSB1c2VSZWYod3JhcHBlclByb3BzKTtcbiAgICAgIHZhciBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICB2YXIgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgdmFyIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VQdXJlT25seU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgLy8gLSBUaGlzIHJlbmRlciBtYXkgaGF2ZSBiZWVuIHRyaWdnZXJlZCBieSBhIFJlZHV4IHN0b3JlIHVwZGF0ZSB0aGF0IHByb2R1Y2VkIG5ldyBjaGlsZCBwcm9wc1xuICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgIC8vIEJ1dCwgaWYgd2UgaGF2ZSBuZXcgd3JhcHBlciBwcm9wcywgdGhvc2UgbWlnaHQgY2hhbmdlIHRoZSBjaGlsZCBwcm9wcywgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSB0aGluZ3MuXG4gICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQ7XG4gICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvIHRoaXMgYmVjYXVzZSBvbiByZW5kZXJzIF9ub3RfIGNhdXNlZCBieSBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRoZSBsYXRlc3Qgc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgIH0sIFtzdG9yZSwgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7IC8vIE91ciByZS1zdWJzY3JpYmUgbG9naWMgb25seSBydW5zIHdoZW4gdGhlIHN0b3JlL3N1YnNjcmlwdGlvbiBzZXR1cCBjaGFuZ2VzXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhzdWJzY3JpYmVVcGRhdGVzLCBbc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaF0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3JdKTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIHZhciByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn0iLCJmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgc3RvcmVTdGF0ZSAhPT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgZXJyLm1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5cIjtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnI7XG4gIH1cblxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBsYXRlc3RTZWxlY3Rvci5jdXJyZW50ID0gc2VsZWN0b3I7XG4gICAgbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50ID0gc3RvcmVTdGF0ZTtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcigpO1xuICAgIH1cblxuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtzdG9yZSwgc3Vic2NyaXB0aW9uXSk7XG4gIHJldHVybiBzZWxlY3RlZFN0YXRlO1xufVxuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXG4gKlxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XG4gKlxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuICpcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XG4gKiB9XG4gKi9cblxuZXhwb3J0IHZhciB1c2VTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9jcmVhdGVTZWxlY3Rvckhvb2soKTsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHQsIEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFJlc3VsdHMgfSBmcm9tIFwiLi4vUmVzdWx0cy9SZXN1bHRzLmpzeFwiO1xyXG5pbXBvcnQgeyBSZXN1bHRzQ29udGV4dCB9IGZyb20gXCIuLi8uLi9jb250ZXh0L3Jlc3VsdHNDb250ZXh0LmpzXCI7XHJcbmltcG9ydCB7IExvYWRlciB9IGZyb20gXCIuLi9Mb2FkZXIvTG9hZGVyLmpzeFwiO1xyXG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL1NlYXJjaC5tb2R1bGUuc2Nzc1wiO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25cIjtcclxuaW1wb3J0IEljb24gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0ljb25cIjtcclxuaW1wb3J0IFRleHRGaWVsZCBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkXCI7XHJcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IHsgd2l0aFN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBzZXRTZWFyY2hWYWx1ZSAgfSBmcm9tIFwiLi4vLi4vYWN0aW9ucy9hY3Rpb25zLmpzXCI7XHJcblxyXG5jb25zdCBTdHlsZWRCdXR0b24gPSBzdHlsZWQoQnV0dG9uKSh7XHJcbiAgICBiYWNrZ3JvdW5kOiBcIiNlMjFlMzVcIixcclxuICAgIHdpZHRoOiBcIjE1JVwiLFxyXG4gICAgaGVpZ2h0OiA1NCxcclxuICAgIG1pbldpZHRoOiAxMTAsXHJcbiAgICBib3JkZXJSYWRpdXM6IFwiMCA1cHggNXB4IDBcIixcclxuICAgIGZvbnRTaXplOiAxNSxcclxuICAgIGZvbnRXZWlnaHQ6IDYwMCxcclxuICAgIGxldHRlclNwYWNpbmc6IFwiMC4wMDVlbVwiLFxyXG4gICAgcGFkZGluZzogXCIycHggMCAwXCIsXHJcbiAgICBib3hTaGFkb3c6IFwiMCAycHggMXB4ICNjMjAwMTdcIixcclxuICAgIFwiJjpob3ZlciwgJjphY3RpdmVcIjoge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IFwiI2JmMDAxNlwiLFxyXG4gICAgICAgIGJveFNoYWRvdzogXCIwIDJweCAxcHggIzllMDAxMlwiXHJcbiAgICB9LFxyXG4gICAgXCImIC5NdWlCdXR0b24tbGFiZWxcIjoge1xyXG4gICAgICAgIGZvbnRXZWlnaHQ6IDYwMFxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IFN0eWxlZElucHV0ID0gd2l0aFN0eWxlcyh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgZm9udFNpemU6IDE3LFxyXG4gICAgICAgIGNvbG9yOiBcIiMzMzNcIixcclxuICAgICAgICBmb250V2VpZ2h0OiA2MDAsXHJcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjVweCAwIDAgNXB4XCIsXHJcbiAgICAgICAgXCImIC5NdWlPdXRsaW5lZElucHV0LXJvb3RcIjoge1xyXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNXB4IDAgMCA1cHhcIixcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKFRleHRGaWVsZCk7XHJcblxyXG5jb25zdCBTZWFyY2ggPSAoKSA9PiB7XHJcbiAgICBjb25zdCBbc2VhcmNoVmFsdWUsIHNldFNlYXJjaFZhbHVlXSA9IHVzZVN0YXRlKFwiXCIpO1xyXG4gICAgY29uc3QgW2Nhc2hlZFVzZXJzLCBzZXRDYXNoZWRVc2Vyc10gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IHsgbG9hZGluZywgdXNlcnMsIGZldGNoVXNlcnMgfSA9IHVzZUNvbnRleHQoUmVzdWx0c0NvbnRleHQpO1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2FzaGVkVXNlcnMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY2FzaGVkVXNlcnNcIikpO1xyXG4gICAgICAgIGlmIChjYXNoZWRVc2Vycykge1xyXG4gICAgICAgICAgICBzZXRDYXNoZWRVc2VycyhjYXNoZWRVc2Vycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW10pO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoc2VhcmNoVmFsdWUudHJpbSgpKSB7XHJcbiAgICAgICAgICAgIGZldGNoVXNlcnMoc2VhcmNoVmFsdWUpO1xyXG4gICAgICAgICAgICBzZXRTZWFyY2hWYWx1ZShcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9e3N0eWxlcy5zZWFyY2h9IG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9IG5vVmFsaWRhdGUgYXV0b0NvbXBsZXRlPSdvZmYnPlxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IGlkPSdvdXRsaW5lZC1zZWFyY2gnIGxhYmVsPSdGaW5kIGEgdXNlcicgdHlwZT0nc2VhcmNoJyB2YXJpYW50PSdvdXRsaW5lZCcgdmFsdWU9e3NlYXJjaFZhbHVlfSBvbkNoYW5nZT17KGUpID0+IHNldFNlYXJjaFZhbHVlKGUudGFyZ2V0LnZhbHVlKX0gZnVsbFdpZHRoLz5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRCdXR0b24gdmFyaWFudD0nY29udGFpbmVkJyBjb2xvcj0nc2Vjb25kYXJ5JyB0eXBlPSdzdWJtaXQnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJY29uPnNlYXJjaDwvSWNvbj5cclxuICAgICAgICAgICAgICAgICAgICBTZWFyY2hcclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkQnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Zvcm0+XHJcbiAgICAgICAgICAgIHtsb2FkaW5nID8gKFxyXG4gICAgICAgICAgICAgICAgPExvYWRlciAvPlxyXG4gICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgPFJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICB1c2Vycz17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJzLmxlbmd0aCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdXNlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY2FzaGVkVXNlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2FzaGVkVXNlcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcclxuICAgIChzdGF0ZSkgPT4gKHtcclxuICAgICAgc2VhcmNoVmFsdWU6IHN0YXRlLnNlYXJjaFZhbHVlLFxyXG4gICAgfSksXHJcbiAgICB7XHJcbiAgICAgICAgc2V0U2VhcmNoVmFsdWUsXHJcbiAgICB9XHJcbiAgKShTZWFyY2gpOyIsImV4cG9ydCBjb25zdCBzZXRTZWFyY2hWYWx1ZSA9ICh2YWx1ZSkgPT4gKHtcclxuICAgIHR5cGU6IFwiU0VUX1NFQVJDSF9WQUxVRVwiLFxyXG4gICAgcGF5bG9hZDogeyB2YWx1ZSB9LFxyXG59KTtcclxuIiwiZXhwb3J0IGNvbnN0IFNIT1dfTE9BREVSID0gXCJTSE9XX0xPQURFUlwiO1xyXG5leHBvcnQgY29uc3QgRkVUQ0hfVVNFUlMgPSBcIkZFVENIX1VTRVJTXCI7XHJcbiIsImltcG9ydCB7IFNIT1dfTE9BREVSLCBGRVRDSF9VU0VSUyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5jb25zdCBoYW5kbGVycyA9IHtcclxuICAgIFtTSE9XX0xPQURFUl06IChzdGF0ZSkgPT4gKHsgLi4uc3RhdGUsIGxvYWRpbmc6IHRydWUgfSksXHJcbiAgICBbRkVUQ0hfVVNFUlNdOiAoc3RhdGUsIHsgcGF5bG9hZCB9KSA9PiAoe1xyXG4gICAgICAgIC4uLnN0YXRlLFxyXG4gICAgICAgIHVzZXJzOiBwYXlsb2FkLFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgfSksXHJcbiAgICBERUZBVUxUOiAoc3RhdGUpID0+IHN0YXRlLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlc3VsdHNSZWR1Y2VyID0gKHN0YXRlLCBhY3Rpb24pID0+IHtcclxuICAgIGNvbnN0IGhhbmRsZSA9IGhhbmRsZXJzW2FjdGlvbi50eXBlXSB8fCBoYW5kbGVycy5ERUZBVUxUO1xyXG4gICAgcmV0dXJuIGhhbmRsZShzdGF0ZSwgYWN0aW9uKTtcclxufTtcclxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIHBhdGgudG9Mb3dlckNhc2UoKS5pbmRleE9mKHByZWZpeC50b0xvd2VyQ2FzZSgpKSA9PT0gMCAmJiAnLz8jJy5pbmRleE9mKHBhdGguY2hhckF0KHByZWZpeC5sZW5ndGgpKSAhPT0gLTE7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuXG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbjtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKSA6IHZvaWQgMDtcbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn1cblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5mdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cblxuZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufVxuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZm9yY2VSZWZyZXNoID0gX3Byb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQkMSA9ICdoYXNoY2hhbmdlJztcbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJpcEhhc2godXJsKSB7XG4gIHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpICsgJyMnICsgcGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IF9wcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB2b2lkIDAgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsJCQxKGEsIGIpIHtcbiAgICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2g7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbCQkMShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH0gLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG5cblxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHZhciBiYXNlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHZhciBocmVmID0gJyc7XG5cbiAgICBpZiAoYmFzZVRhZyAmJiBiYXNlVGFnLmdldEF0dHJpYnV0ZSgnaHJlZicpKSB7XG4gICAgICBocmVmID0gc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaHJlZiArICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ICsgMSk7XG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKSA6IHZvaWQgMDtcbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKSA6IHZvaWQgMDtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoSGFzaENoYW5nZUV2ZW50JDEsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gX3Byb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHZvaWQgMCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IF9wcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG5cbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5leHBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCwgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xudmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB7fTtcblxuZnVuY3Rpb24gZ2V0VW5pcXVlSWQoKSB7XG4gIHZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuICByZXR1cm4gY29tbW9uanNHbG9iYWxba2V5XSA9IChjb21tb25qc0dsb2JhbFtrZXldIHx8IDApICsgMTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ2V0VW5pcXVlSWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpcy5lbWl0dGVyID0gY3JlYXRlRXZlbnRFbWl0dGVyKF90aGlzLnByb3BzLnZhbHVlKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUHJvdmlkZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW2NvbnRleHRQcm9wXSA9IHRoaXMuZW1pdHRlciwgX3JlZjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgIT09IG5leHRQcm9wcy52YWx1ZSkge1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSBuZXh0UHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBjaGFuZ2VkQml0cztcblxuICAgICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgd2FybmluZygoY2hhbmdlZEJpdHMgJiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQpID09PSBjaGFuZ2VkQml0cywgJ2NhbGN1bGF0ZUNoYW5nZWRCaXRzOiBFeHBlY3RlZCB0aGUgcmV0dXJuIHZhbHVlIHRvIGJlIGEgJyArICczMS1iaXQgaW50ZWdlci4gSW5zdGVhZCByZWNlaXZlZDogJyArIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0KG5leHRQcm9wcy52YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIFByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0gKF9Qcm92aWRlciRjaGlsZENvbnRleCA9IHt9LCBfUHJvdmlkZXIkY2hpbGRDb250ZXhbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLCBfUHJvdmlkZXIkY2hpbGRDb250ZXgpO1xuXG4gIHZhciBDb25zdW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVkdWNlciB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBSZXN1bHRzQ29udGV4dCB9IGZyb20gXCIuL3Jlc3VsdHNDb250ZXh0XCI7XHJcbmltcG9ydCB7IHJlc3VsdHNSZWR1Y2VyIH0gZnJvbSBcIi4vcmVzdWx0c1JlZHVjZXJcIjtcclxuaW1wb3J0IHsgU0hPV19MT0FERVIsIEZFVENIX1VTRVJTIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xyXG5pbXBvcnQgeyB1c2VIaXN0b3J5IH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBSZXN1bHRzU3RhdGUgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XHJcbiAgICBjb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcbiAgICAgICAgdXNlcnM6IFtdLFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgfTtcclxuICAgIGxldCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xyXG4gICAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKHJlc3VsdHNSZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xyXG4gICAgY29uc3Qgc2hvd0xvYWRlciA9ICgpID0+IGRpc3BhdGNoKHsgdHlwZTogU0hPV19MT0FERVIgfSk7XHJcbiAgICBjb25zdCBmZXRjaFVzZXJzID0gYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgc2hvd0xvYWRlcigpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgICAgICAgICBgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9zZWFyY2gvdXNlcnM/cT0ke3ZhbHVlfWBcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGpzb24uaXRlbXMubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLml0ZW0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXNoZWRVc2Vyc1wiLCBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibGFzdFNlYXJjaFZhbHVlXCIsIHZhbHVlKTtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcclxuICAgICAgICAgICAgICAgIHNlYXJjaDogYD9zZWFyY2g9JHt2YWx1ZX1gLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBGRVRDSF9VU0VSUywgcGF5bG9hZCB9KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPb3BzLCBzb21ldGhpbmcgd2VudCB3cm9uZ1wiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPFJlc3VsdHNDb250ZXh0LlByb3ZpZGVyXHJcbiAgICAgICAgICAgIHZhbHVlPXt7XHJcbiAgICAgICAgICAgICAgICBzaG93TG9hZGVyLFxyXG4gICAgICAgICAgICAgICAgZmV0Y2hVc2VycyxcclxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHN0YXRlLmxvYWRpbmcsXHJcbiAgICAgICAgICAgICAgICB1c2Vyczogc3RhdGUudXNlcnMsXHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgICAgPC9SZXN1bHRzQ29udGV4dC5Qcm92aWRlcj5cclxuICAgICk7XHJcbn07XHJcblxyXG5SZXN1bHRzU3RhdGUucHJvcFR5cGVzID0ge1xyXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFNlYXJjaCBmcm9tIFwiLi4vU2VhcmNoL1NlYXJjaC5qc3hcIjtcclxuaW1wb3J0IHsgUmVzdWx0c1N0YXRlIH0gZnJvbSBcIi4uLy4uL2NvbnRleHQvcmVzdWx0c1N0YXRlLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBIb21lKCkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8UmVzdWx0c1N0YXRlPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nYXBwX2NvbnRhaW5lcic+XHJcbiAgICAgICAgICA8U2VhcmNoIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9SZXN1bHRzU3RhdGU+XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9tZTtcclxuXHJcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjODAwN2E5ZmIxODVjYjE1MmVlNjVkNGYzMDU3YjUxZi5wbmdcIjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHN0eWxlZCB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHlcIjtcclxuaW1wb3J0IEF2YXRhciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvQXZhdGFyXCI7XHJcbmltcG9ydCBsb2dvIGZyb20gXCIuLi8uLi9pY29ucy9naXRodWIucG5nXCI7XHJcblxyXG5jb25zdCBTdHlsZWRBYm91dFR5cG9ncmFwaHkgPSBzdHlsZWQoVHlwb2dyYXBoeSkoe1xyXG4gIG1hcmdpbjogXCI1MHB4IDAgNDBweFwiXHJcbn0pO1xyXG5cclxuY29uc3QgU3R5bGVkQWJvdXRJY29uID0gc3R5bGVkKEF2YXRhcikoe1xyXG4gIHdpZHRoOiAxMDAsXHJcbiAgaGVpZ2h0OiAxMDBcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgQWJvdXQgPSAoKSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9J2FwcF9jb250YWluZXInPlxyXG4gICAgPFN0eWxlZEFib3V0VHlwb2dyYXBoeT5cclxuICAgICAgR2l0SHViIFVzZXJzIEFwcCDigJMgYSBzaW1wbGUgYXBwbGljYXRpb24gdGhhdCBhbGxvd3MgeW91IHRvIGZpbmQgYW55IGdpdGh1YiB1c2VyIHF1aWNrbHkgYW5kIGVmZm9ydGxlc3NseS4gVHJ5IGl0IG5vdyAmI3gxZjYwODtcclxuICAgIDwvU3R5bGVkQWJvdXRUeXBvZ3JhcGh5PlxyXG4gICAgPFN0eWxlZEFib3V0SWNvbiBhbHQ9J2dpdGh1YiBpY29uJyBzcmM9e2xvZ299IC8+XHJcbiAgPC9kaXY+XHJcbik7IiwiaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBIb21lIGZyb20gXCIuLi9Ib21lL0hvbWUuanN4XCI7XHJcbmltcG9ydCB7IEFib3V0IH0gZnJvbSBcIi4uL0Fib3V0L0Fib3V0LmpzeFwiO1xyXG4vLyBpbXBvcnQgeyBOYXZiYXIgfSBmcm9tIFwiLi4vTmF2YmFyL05hdmJhci5qc3hcIjtcclxuLy8gaW1wb3J0IHsgUm91dGUsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5mdW5jdGlvbiBBcHAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICAgICAgey8qIDxOYXZiYXIgLz4gKi99XHJcbiAgICAgICAgICAgIDxIb21lIC8+XHJcbiAgICAgICAgICAgIDxBYm91dCAvPlxyXG4gICAgICAgICAgICB7LyogPFN3aXRjaD5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPXtcIi9cIn0gZXhhY3QgY29tcG9uZW50PXtIb21lfSAvPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9e1wiL2Fib3V0XCJ9IGNvbXBvbmVudD17QWJvdXR9IC8+XHJcbiAgICAgICAgICAgIDwvU3dpdGNoPiAqL31cclxuICAgICAgICA8L0ZyYWdtZW50PlxyXG4gICAgKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXBwO1xyXG4iLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIHNlYXJjaFZhbHVlOiBcIlwiLFxufTtcblxuY29uc3Qgc2VhcmNoVmFsdWUgPSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIHsgdHlwZSwgcGF5bG9hZCB9KSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJTRVRfU0VBUkNIX1ZBTFVFXCI6XG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc2VhcmNoVmFsdWU6IHBheWxvYWQgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICAgIHNlYXJjaFZhbHVlLFxufSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9jb21wb25lbnRzL0FwcC9BcHAuanN4XCI7XG5pbXBvcnQgXCIuL3N0eWxlcy9tYWluLnNjc3NcIjtcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyByb290UmVkdWNlciB9IGZyb20gXCIuL3JlZHVjZXJzL3Jvb3RSZWR1Y2VyLmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gXCJyZWR1eFwiO1xuLy8gaW1wb3J0IHsgQnJvd3NlclJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIpO1xuY29uc3Qgcm9vdENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKTtcblxuUmVhY3RET00ucmVuZGVyKFxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICB7LyogPEJyb3dzZXJSb3V0ZXIgYmFzZW5hbWU9e3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSB8fCBcIlwifT4gKi99XG4gICAgICAgICAgICA8QXBwIC8+XG4gICAgICAgIHsvKiA8L0Jyb3dzZXJSb3V0ZXI+ICovfVxuICAgIDwvUHJvdmlkZXI+LFxuICAgIHJvb3RDb250YWluZXJcbik7XG4iXSwic291cmNlUm9vdCI6IiJ9